package grammar_fs;

import java_cup.runtime.*;

parser code {:
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            if (s.left >= 0) {                

                m.append(" in line "+(s.left+1));   

                if (s.right >= 0)                    
                    m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            NULO, VERDADERO, FALSO, VAR, IMPRIMIR, IMPORTAR, DETENER, SELECCIONA, CASO, DEFECTO, RETORNAR, SI, SINO, FUNCION, DESCENDENTE, ASCENDENTE, CADA, INVERTIR, MAXIMO, MINIMO, FILTRAR, BUSCAR, MAP, REDUCE, TODOS, ALGUNO, LEERGXML, OPE, OPI, OPN, CREARVENTANA, CREARCONTENEDOR, CREARTEXTO, CREARCAJA, CREARAREA, CREARNUMERICO, CREARDESPLEGABLE, CREARBOTON, CREARIMAGEN, CREARREPRODUCTOR, CREARVIDEO, ALCLIC, ALCARGAR, ALCERRAR, IDENTIFIER, NUMBER_LITERAL, LCURL, RCURL, LPAR, RPAR, LBRACK, RBRACK, EQ, PLUS, MINUS, TIMES, DIV, POW, PLUSPLUS, MINUSMINUS, PLUSEQ, MINUSEQ, TIMESEQ, DIVEQ, MORETHAN, LESSTHAN, MORETHANEQ, LESSTHANEQ, EQEQ, NOTEQ, AND, OR, NOT, COLON, SEMICOLON, COMMA, DOT, Q, STRING;

/* Non terminals */
non terminal            S;
non terminal    

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */

S       ::= L:l                                                                 {: 