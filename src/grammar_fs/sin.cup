package grammar_fs;
import interpreter_fs.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

parser code
{:
    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }

    public nodo root;
:};

scan with
{:
    return lexer.next_token();
:};

/* Terminals (tokens returned by the scanner). */
terminal                NULO, VERDADERO, FALSO, VAR, IMPRIMIR, IMPORTAR, DETENER, SELECCIONA, CASO, DEFECTO, RETORNAR, SI, SINO, FUNCION, DESCENDENTE, ASCENDENTE, CADA, INVERTIR, MAXIMO, MINIMO, FILTRAR, BUSCAR, MAP, REDUCE, TODOS, ALGUNO, LEERGXML, OPE, OPI, OPN, CREARVENTANA, CREARCONTENEDOR, CREARTEXTO, CREARCAJA, CREARAREA, CREARNUMERICO, CREARDESPLEGABLE, CREARBOTON, CREARIMAGEN, CREARREPRODUCTOR, CREARVIDEO, ALCLIC, ALCARGAR, ALCERRAR, LCURL, RCURL, LPAR, RPAR, LBRACK, RBRACK, EQ, PLUS, MINUS, TIMES, DIV, POW, PLUSPLUS, MINUSMINUS, PLUSEQ, MINUSEQ, TIMESEQ, DIVEQ, MORETHAN, LESSTHAN, MORETHANEQ, LESSTHANEQ, EQEQ, NOTEQ, AND, OR, NOT, COLON, SEMI, COMMA, DOT, Q;
terminal    String      NUM, ID, STRING;
terminal                UMINUS, UNOT;

/* Non terminals */
non terminal                S;
non terminal    nodo        L, A, As, Func, call_f, Dec, Dec_, Asign, E;
non terminal    nodo        Obj_a, IF, ELSE_IF, ELSE, SWITCH, ARR_FN;
non terminal    nodo        WIN_FN;
non terminal    LinkedList  l_para, l_para2, l_E, l_Obj_a, CASE;

/* Precedences */
precedence left Q;
precedence left OR;
precedence left AND;
precedence right UNOT;
precedence left EQEQ, NOTEQ;
precedence left MORETHAN, LESSTHAN, MORETHANEQ, LESSTHANEQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left POW;
precedence left PLUSPLUS, MINUSMINUS;
precedence right UMINUS;
precedence left DOT;

/* The grammar rules */

S       ::= L:l                                                                 {: parser.root = l; :}
        ;

L       ::= A:a                                                                 {: RESULT = new ambient(a); :}
        ;

A       ::= A:a As:as                                                           {: RESULT = new a_l(a, as); :}
        |   As:as                                                               {: RESULT = as; :}
        ;

As      ::= Dec:d SEMI                                                          {: RESULT = d; :}
        |   Asign:a SEMI                                                        {: RESULT = a; :}
        |   IMPRIMIR LPAR E:e RPAR SEMI                                         {: RESULT = new imprimir(e); :}
        |   IMPORTAR LPAR E:e RPAR SEMI                                         {: RESULT = new importar(e); :}
        |   DETENER SEMI                                                        {: RESULT = new detener(); :}
        |   RETORNAR E:e SEMI                                                   {: RESULT = new retornar(e); :}
        |   Func:f                                                              {: RESULT = f; :}
        |   call_f:f SEMI                                                       {: RESULT = f; :}
        |   IF:f                                                                {: RESULT = f; :}
        |   SWITCH:s                                                            {: RESULT = s; :}
        |   ARR_FN:a SEMI                                                       {: RESULT = a; :}
        |   WIN_FN:a SEMI                                                       {: RESULT = a; :}
        ;

Func    ::= FUNCION ID:i LPAR l_para:l RPAR LCURL A:a RCURL                     {: RESULT = new Func(i, l, a); :}
        |   FUNCION ID:i LPAR l_para2:l RPAR LCURL A:a RCURL                    {: RESULT = new Func(i, l, a); :}
        |   FUNCION ID:i LPAR RPAR LCURL A:a RCURL                              {: RESULT = new Func(i, null, a); :}
        ;

call_f  ::= ID:i LPAR l_E:e RPAR                                                {: RESULT = new call_f(i, e); :}
        |   ID:i LPAR RPAR                                                      {: RESULT = new call_f(i, null); :}
        ;

l_para  ::= l_para:l COMMA ID:i                                                 {: l.add(i);
                                                                                   RESULT = l; 
                                                                                :}
        |   ID:i                                                                {: LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                :}
        ;

l_para2 ::= l_para2:l COMMA VAR ID:i                                             {: l.add(i);
                                                                                   RESULT = l; 
                                                                                :}
        |   VAR ID:i                                                            {: LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                :}
        ;

Dec     ::= Dec:l COMMA Dec_:d                                                  {: RESULT = new l_dec(l, d); :}
        |   VAR Dec_:d                                                          {: RESULT = d; :}
        ;

Dec_    ::= ID:i                                                                {: RESULT = new dec(i, null); :}
        |   ID:i EQ E:e                                                         {: RESULT = new dec(i, e); :}
        |   ID:i EQ LCURL l_Obj_a:e RCURL                                       {: RESULT = new Obj(i, e); :}
        |   ID:i EQ LBRACK RBRACK                                               {: RESULT = new dec_arr(i, null); :}
        |   ID:i EQ LBRACK l_E:e RBRACK                                         {: RESULT = new dec_arr(i, e); :}
        ;

Asign   ::= ID:i EQ E:e                                                         {: RESULT = new asign(i, e); :}
        |   ID:i LBRACK NUM:p RBRACK EQ E:e                                     {: RESULT = new asign_arr(i, Integer.parseInt(p), e); :}
        |   ID:o DOT ID:i EQ E:e                                                {: RESULT = new Obj_putId(o, i, e); :}
        |   ID:o DOT ID:i LBRACK NUM:p RBRACK EQ E:e                            {: RESULT = new Obj_putArr(o, i, Integer.parseInt(p), e); :}
        |   ID:i PLUSPLUS                                                       {: RESULT = new aumento(new getId(i), 1); :}
        |   ID:i MINUSMINUS                                                     {: RESULT = new aumento(new getId(i), -1); :}
        |   ID:i PLUSEQ E:e                                                     {: RESULT = new asign_oper(i, e, 1); :}
        |   ID:i MINUSEQ E:e                                                    {: RESULT = new asign_oper(i, e, 2); :}
        |   ID:i TIMESEQ E:e                                                    {: RESULT = new asign_oper(i, e, 3); :}
        |   ID:i DIVEQ E:e                                                      {: RESULT = new asign_oper(i, e, 4); :}
        ;

l_Obj_a ::= l_Obj_a:l COMMA Obj_a:o                                             {: l.add(o);
                                                                                   RESULT = l; :}
        |   Obj_a:o                                                             {: LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(o);
                                                                                   RESULT = list; :}
        ;

Obj_a   ::= ID:i COLON E:e                                                      {: RESULT = new Obj_a(i, e); :}
        |   ID:i COLON LBRACK RBRACK                                            {: RESULT = new Obj_a_arr(i, null); :}
        |   ID:i COLON LBRACK l_E:e RBRACK                                      {: RESULT = new Obj_a_arr(i, e); :}
        ;

IF      ::= SI LPAR E:e RPAR LCURL A:a RCURL                                    {: RESULT = new IF(e, a); :}
        |   SI LPAR E:e RPAR LCURL A:a RCURL ELSE_IF:ef                         {: RESULT = new IF_ELSE(e, a, ef); :}
        ;

ELSE_IF ::= SINO SI LPAR E:e RPAR LCURL A:a RCURL ELSE_IF:ef                    {: RESULT = new IF_ELSE(e, a, ef); :}
        |   SINO SI LPAR E:e RPAR LCURL A:a RCURL                               {: RESULT = new IF_ELSE(e, a, null); :}
        |   ELSE:el                                                             {: RESULT = el; :}
        ;

ELSE    ::= SINO LCURL A:a RCURL                                                {: RESULT = new ELSE(a); :}
        ;

SWITCH  ::= SELECCIONA LPAR E:e RPAR LCURL CASE:c RCURL                         {: RESULT = new SWITCH(e, c); :}
        ;

CASE    ::= CASO E:e COLON LCURL A:a RCURL CASE:c                               {: LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   tmp.addAll(c);
                                                                                   RESULT = tmp;
                                                                                :}
        |   CASO E:e COLON LCURL A:a RCURL                                      {: LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   RESULT = tmp;
                                                                                :}
        |   DEFECTO COLON LCURL A:a RCURL                                       {: LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(null, a));
                                                                                   RESULT = tmp;
                                                                                :}
        ;

ARR_FN  ::= ID:i DOT DESCENDENTE LPAR RPAR                                      {: RESULT = new DESCENDENTE(null, i); :}
        |   ID:o DOT ID:i DOT DESCENDENTE LPAR RPAR                             {: RESULT = new DESCENDENTE(o, i); :}
        |   ID:i DOT ASCENDENTE LPAR RPAR                                       {: RESULT = new ASCENDENTE(null, i); :}
        |   ID:o DOT ID:i DOT ASCENDENTE LPAR RPAR                              {: RESULT = new ASCENDENTE(o, i); :}
        |   ID:i DOT INVERTIR LPAR RPAR                                         {: RESULT = new INVERTIR(null, i); :}
        |   ID:o DOT ID:i DOT INVERTIR LPAR RPAR                                {: RESULT = new INVERTIR(o, i); :}
        |   ID:i DOT MAP LPAR ID:f RPAR                                         {: RESULT = new Map(new getId(i), f); :}
        |   ID:o DOT ID:i DOT MAP LPAR ID:f RPAR                                {: RESULT = new Map(new Obj_getId(new getId(o), i), f); :}
        ;

WIN_FN  ::= ID:i DOT ALCARGAR LPAR RPAR                                         {: RESULT = new AlCargar(i, null); :}
        |   ID:i DOT ALCARGAR LPAR call_f:f RPAR                                {: RESULT = new AlCargar(i, f); :}
        |   ID:i DOT CREARTEXTO LPAR E:f COMMA E:t COMMA E:c COMMA E:x COMMA E:y COMMA E:n COMMA E:cur COMMA E:v RPAR
                                                                                {: RESULT = new Texto(i, f, t, c, x, y, n, cur, v); :}
        |   ID:i DOT CREARCAJA LPAR E:h COMMA E:w COMMA E:f COMMA E:t COMMA E:c COMMA E:x COMMA E:y COMMA E:n COMMA E:cur COMMA E:d COMMA E:name RPAR
                                                                                {: RESULT = new CajaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); :}
        |   ID:i DOT CREARAREA LPAR E:h COMMA E:w COMMA E:f COMMA E:t COMMA E:c COMMA E:x COMMA E:y COMMA E:n COMMA E:cur COMMA E:d COMMA E:name RPAR
                                                                                {: RESULT = new AreaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); :}
        |   ID:i DOT CREARNUMERICO LPAR E:h COMMA E:w COMMA E:max COMMA E:min COMMA E:x COMMA E:y COMMA E:d COMMA E:n RPAR
                                                                                {: RESULT = new Numerico(i, h, w, max, min, x, y, d, n); :}
        |   ID:i DOT CREARDESPLEGABLE LPAR E:h COMMA E:w COMMA E:l COMMA E:x COMMA E:y COMMA E:d COMMA E:n RPAR
                                                                                {: RESULT = new Desplegable(i, h, w, l, x, y, d, n); :}
        |   ID:i DOT CREARIMAGEN LPAR E:r COMMA E:x COMMA E:y COMMA E:h COMMA E:w RPAR
                                                                                {: RESULT = new Imagen(i, r, x, y, h, w); :}
        |   ID:i DOT ALCLIC LPAR call_f:f RPAR                                  {: RESULT = new AlClic(i, f); :}
        |   ID:i DOT ALCERRAR LPAR RPAR                                         {: RESULT = new AlCerrar(i, null); :}
        |   ID:i DOT ALCERRAR LPAR call_f:f RPAR                                {: RESULT = new AlCerrar(i, f); :}
        ;

l_E     ::= l_E:l COMMA E:e                                                     {: l.add(e);
                                                                                   RESULT = l; :}
        |   E:e                                                                 {: LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; :}
        ;

E       ::= E:e1 OR E:e2                                                        {: RESULT = new log_exp(e1, e2, "or"); :}
        |   E:e1 AND E:e2                                                       {: RESULT = new log_exp(e1, e2, "and"); :}
        |   NOT E:e1                                                            {: RESULT = new log_exp(e1, null, "not"); :}
        %prec UNOT
        |   E:e1 MORETHAN E:e2                                                  {: RESULT = new rel_exp(e1, e2, ">"); :}
        |   E:e1 LESSTHAN E:e2                                                  {: RESULT = new rel_exp(e1, e2, "<"); :}
        |   E:e1 MORETHANEQ E:e2                                                {: RESULT = new rel_exp(e1, e2, ">="); :}
        |   E:e1 LESSTHANEQ E:e2                                                {: RESULT = new rel_exp(e1, e2, "<="); :}
        |   E:e1 EQEQ E:e2                                                      {: RESULT = new rel_exp(e1, e2, "=="); :}
        |   E:e1 NOTEQ E:e2                                                     {: RESULT = new rel_exp(e1, e2, "!="); :}
        |   E:e1 PLUS E:e2                                                      {: RESULT = new arm_exp(e1, e2, "+"); :}
        |   E:e1 MINUS E:e2                                                     {: RESULT = new arm_exp(e1, e2, "-"); :}
        |   E:e1 TIMES E:e2                                                     {: RESULT = new arm_exp(e1, e2, "*"); :}
        |   E:e1 DIV E:e2                                                       {: RESULT = new arm_exp(e1, e2, "/"); :}
        |   E:e1 POW E:e2                                                       {: RESULT = new arm_exp(e1, e2, "^"); :}
        |   MINUS E:e1                                                          {: RESULT = new arm_exp(e1, null, "u-"); :}
        %prec UMINUS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        |   E:e PLUSPLUS                                                        {: RESULT = new aumento(e, 1); :}
        |   E:e MINUSMINUS                                                      {: RESULT = new aumento(e, -1); :}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        |   E:e DOT MAXIMO LPAR RPAR                                            {: RESULT = new Maximo(e); :}
        |   E:e DOT MINIMO LPAR RPAR                                            {: RESULT = new Minimo(e); :}
        |   E:e DOT ASCENDENTE LPAR RPAR                                        {: RESULT = new ASCENDENTE(e); :}
        |   E:e DOT DESCENDENTE LPAR RPAR                                       {: RESULT = new DESCENDENTE(e); :}
        |   E:e DOT INVERTIR LPAR RPAR                                          {: RESULT = new INVERTIR(e); :}
        |   E:e DOT MAP LPAR ID:i RPAR                                          {: RESULT = new Map(e, i); :}
        |   E:e DOT FILTRAR LPAR ID:i RPAR                                      {: RESULT = new Filtrar(e, i); :}
        |   E:e DOT BUSCAR LPAR ID:i RPAR                                       {: RESULT = new Buscar(e, i); :}
        |   E:e DOT REDUCE LPAR ID:i RPAR                                       {: RESULT = new Reduce(e, i); :}
        |   E:e DOT TODOS LPAR ID:i RPAR                                        {: RESULT = new Todos(e, i); :}
        |   E:e DOT ALGUNO LPAR ID:i RPAR                                       {: RESULT = new Alguno(e, i); :}
        |   E:c Q E:t COLON E:f                                                 {: RESULT = new inline_if(c, t, f); :}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        |   ID:e                                                                {: RESULT = new getId(e); :}
        |   E:e DOT ID:i                                                        {: RESULT = new Obj_getId(e, i); :}
        |   ID:e LBRACK NUM:i RBRACK                                            {: RESULT = new getArr(e, Integer.parseInt(i)); :}
        |   E:e DOT ID:i LBRACK NUM:n RBRACK                                    {: RESULT = new Obj_getArr(e, i, Integer.parseInt(n)); :}
        |   call_f:e                                                            {: RESULT = e; :}        
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        |   CREARVENTANA LPAR E:c COMMA E:h COMMA E:w COMMA E:i RPAR            {: RESULT = new Ventana(c, h, w, i); :}
        |   E:i DOT CREARCONTENEDOR LPAR E:h COMMA E:w COMMA E:c COMMA E:b COMMA E:x COMMA E:y RPAR
                                                                                {: RESULT = new Panel(i, h, w, c, b, x, y); :}
        |   E:i DOT CREARBOTON LPAR E:f COMMA E:t COMMA E:c COMMA E:x COMMA E:y COMMA E:r COMMA E:v COMMA E:h COMMA E:w RPAR
                                                                                {: RESULT = new Boton(i, f, t, c, x, y, r, v, h, w); :}
        |   LEERGXML LPAR E:e RPAR                                              {: RESULT = new LeerGXML(e); :}
        |   E:i DOT OPI LPAR E:e RPAR                                           {: RESULT = new OPI(i, e); :}
        |   E:i DOT OPN LPAR E:e RPAR                                           {: RESULT = new OPI(i, e); :}
        |   E:i DOT OPE LPAR E:e RPAR                                           {: RESULT = new OPE(i, e); :}
        |   CADA LPAR E:e RPAR                                                  {: RESULT = new CADA(e); :}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        |   NUM:e                                                               {: RESULT = new num(e); :}
        |   STRING:e                                                            {: RESULT = new str(e); :}
        |   NULO                                                                {: RESULT = new nulo(); :}
        |   VERDADERO                                                           {: RESULT = new bool(1); :}
        |   FALSO                                                               {: RESULT = new bool(0); :}
        |   LPAR E:e RPAR                                                       {: RESULT = e; :}
        ;
