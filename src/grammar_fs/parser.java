
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 12:05:01 CST 2019
//----------------------------------------------------

package grammar_fs;

import interpreter_fs.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 12:05:01 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\007\000" +
    "\002\005\004\000\002\005\005\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\004\000\002\005\004\000\002\006\012\000\002\006\012" +
    "\000\002\006\011\000\002\007\006\000\002\007\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\006\000\002" +
    "\024\004\000\002\010\005\000\002\010\004\000\002\011" +
    "\003\000\002\011\005\000\002\011\007\000\002\011\006" +
    "\000\002\011\007\000\002\012\005\000\002\012\010\000" +
    "\002\012\007\000\002\012\012\000\002\012\004\000\002" +
    "\012\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\026\005\000\002\026\003" +
    "\000\002\014\005\000\002\014\006\000\002\014\007\000" +
    "\002\015\011\000\002\015\012\000\002\016\013\000\002" +
    "\016\012\000\002\016\003\000\002\017\006\000\002\020" +
    "\011\000\002\027\011\000\002\027\010\000\002\027\007" +
    "\000\002\021\007\000\002\021\011\000\002\021\007\000" +
    "\002\021\011\000\002\021\007\000\002\021\011\000\002" +
    "\021\010\000\002\021\012\000\002\022\007\000\002\022" +
    "\010\000\002\022\026\000\002\022\034\000\002\022\034" +
    "\000\002\022\026\000\002\022\024\000\002\022\020\000" +
    "\002\022\010\000\002\022\007\000\002\022\010\000\002" +
    "\025\005\000\002\025\003\000\002\013\005\000\002\013" +
    "\005\000\002\013\004\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\010\000\002\013\010\000\002" +
    "\013\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\007\000\002\013\003\000\002\013\005" +
    "\000\002\013\006\000\002\013\010\000\002\013\003\000" +
    "\002\013\014\000\002\013\022\000\002\013\030\000\002" +
    "\013\006\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\006\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\024\007\026\010\007\011\027\012\022\013" +
    "\006\016\016\017\020\021\030\121\013\001\002\000\004" +
    "\114\u01d7\001\002\000\004\002\u01d6\001\002\000\004\062" +
    "\u01c4\001\002\000\004\062\u01c0\001\002\000\030\002\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\061\ufff3\121\ufff3\001\002\000\030\002\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\016\ufff4\017" +
    "\ufff4\021\ufff4\061\ufff4\121\ufff4\001\002\000\004\002\001" +
    "\001\002\000\026\062\307\064\u0113\066\u010f\074\u010c\075" +
    "\u0114\076\u010e\077\u0110\100\u0112\101\u010d\116\u0111\001\002" +
    "\000\030\002\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\016\ufff6\017\ufff6\021\ufff6\061\ufff6\121\ufff6\001\002" +
    "\000\026\002\uffff\007\026\010\007\011\027\012\022\013" +
    "\006\016\016\017\020\021\030\121\013\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\030\002\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\016\ufffd\017\ufffd\021\ufffd\061\ufffd\121\ufffd\001\002" +
    "\000\004\062\366\001\002\000\004\114\365\001\002\000" +
    "\004\114\364\001\002\000\006\114\362\115\361\001\002" +
    "\000\004\114\360\001\002\000\004\114\357\001\002\000" +
    "\004\121\333\001\002\000\004\062\062\001\002\000\004" +
    "\121\031\001\002\000\004\062\032\001\002\000\010\007" +
    "\033\063\037\121\034\001\002\000\004\121\061\001\002" +
    "\000\006\063\uffea\115\uffea\001\002\000\006\063\054\115" +
    "\053\001\002\000\006\063\045\115\044\001\002\000\004" +
    "\060\040\001\002\000\024\007\026\010\007\011\027\012" +
    "\022\013\006\016\016\017\020\021\030\121\013\001\002" +
    "\000\026\007\026\010\007\011\027\012\022\013\006\016" +
    "\016\017\020\021\030\061\043\121\013\001\002\000\030" +
    "\002\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\016" +
    "\ufffe\017\ufffe\021\ufffe\061\ufffe\121\ufffe\001\002\000\030" +
    "\002\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\016" +
    "\uffee\017\uffee\021\uffee\061\uffee\121\uffee\001\002\000\004" +
    "\007\051\001\002\000\004\060\046\001\002\000\024\007" +
    "\026\010\007\011\027\012\022\013\006\016\016\017\020" +
    "\021\030\121\013\001\002\000\026\007\026\010\007\011" +
    "\027\012\022\013\006\016\016\017\020\021\030\061\050" +
    "\121\013\001\002\000\030\002\uffef\007\uffef\010\uffef\011" +
    "\uffef\012\uffef\013\uffef\016\uffef\017\uffef\021\uffef\061\uffef" +
    "\121\uffef\001\002\000\004\121\052\001\002\000\006\063" +
    "\uffe9\115\uffe9\001\002\000\004\121\060\001\002\000\004" +
    "\060\055\001\002\000\024\007\026\010\007\011\027\012" +
    "\022\013\006\016\016\017\020\021\030\121\013\001\002" +
    "\000\026\007\026\010\007\011\027\012\022\013\006\016" +
    "\016\017\020\021\030\061\057\121\013\001\002\000\030" +
    "\002\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013\ufff0\016" +
    "\ufff0\017\ufff0\021\ufff0\061\ufff0\121\ufff0\001\002\000\006" +
    "\063\uffeb\115\uffeb\001\002\000\006\063\uffe8\115\uffe8\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\060\061\uff88\063\uff88\065\uff88\067\uff88" +
    "\070\uff88\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88" +
    "\111\uff88\113\uff88\114\uff88\115\uff88\116\uff88\117\uff88\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\060\061\uff84\063\uff84\065\uff84\067\uff84" +
    "\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84" +
    "\111\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84\001" +
    "\002\000\004\062\326\001\002\000\060\061\uff86\063\uff86" +
    "\065\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\074" +
    "\uff86\075\uff86\102\uff86\103\uff86\104\uff86\105\uff86\106\uff86" +
    "\107\uff86\110\uff86\111\uff86\113\uff86\114\uff86\115\uff86\116" +
    "\uff86\117\uff86\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\004\062\321\001\002" +
    "\000\060\061\uff87\063\uff87\065\uff87\067\uff87\070\uff87\071" +
    "\uff87\072\uff87\073\uff87\074\uff87\075\uff87\102\uff87\103\uff87" +
    "\104\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111\uff87\113" +
    "\uff87\114\uff87\115\uff87\116\uff87\117\uff87\001\002\000\064" +
    "\061\uff95\062\307\063\uff95\064\310\065\uff95\067\uff95\070" +
    "\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\102\uff95" +
    "\103\uff95\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111" +
    "\uff95\113\uff95\114\uff95\115\uff95\116\uff95\117\uff95\001\002" +
    "\000\060\061\uff91\063\uff91\065\uff91\067\uff91\070\uff91\071" +
    "\uff91\072\uff91\073\uff91\074\uff91\075\uff91\102\uff91\103\uff91" +
    "\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91\111\uff91\113" +
    "\uff91\114\uff91\115\uff91\116\uff91\117\uff91\001\002\000\060" +
    "\061\uff85\063\uff85\065\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\073\uff85\074\uff85\075\uff85\102\uff85\103\uff85\104\uff85" +
    "\105\uff85\106\uff85\107\uff85\110\uff85\111\uff85\113\uff85\114" +
    "\uff85\115\uff85\116\uff85\117\uff85\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\004" +
    "\062\275\001\002\000\046\063\121\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\116" +
    "\120\117\107\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\060\061\uffa2\063" +
    "\uffa2\065\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2" +
    "\074\uffa2\075\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106" +
    "\uffa2\107\uffa2\110\uffa2\111\uffa2\113\uffa2\114\uffa2\115\uffa2" +
    "\116\uffa2\117\uffa2\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\032\004" +
    "\067\005\075\006\065\024\066\036\071\042\077\062\070" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\060\061\uffa3\063\uffa3\065\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\102\uffa3\103" +
    "\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3" +
    "\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\044\022\132\023\142\025\131\026\140\027\136" +
    "\030\127\031\130\032\135\033\134\034\141\035\133\037" +
    "\126\040\125\041\144\043\143\051\145\121\137\001\002" +
    "\000\004\114\124\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\060\061\uffab\063" +
    "\uffab\065\uffab\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\uffab\107\uffab\110\uffab\111\uffab\113\uffab\114\uffab\115\uffab" +
    "\116\120\117\uffab\001\002\000\030\002\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\061\ufff9\121\ufff9\001\002\000\004\062\253\001\002\000" +
    "\004\062\250\001\002\000\004\062\245\001\002\000\004" +
    "\062\242\001\002\000\004\062\240\001\002\000\004\062" +
    "\236\001\002\000\004\062\233\001\002\000\004\062\230" +
    "\001\002\000\004\062\225\001\002\000\004\062\223\001" +
    "\002\000\062\061\uff94\063\uff94\064\220\065\uff94\067\uff94" +
    "\070\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\102" +
    "\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94" +
    "\111\uff94\113\uff94\114\uff94\115\uff94\116\uff94\117\uff94\001" +
    "\002\000\004\062\216\001\002\000\004\062\213\001\002" +
    "\000\004\062\211\001\002\000\004\062\174\001\002\000" +
    "\004\062\171\001\002\000\004\062\146\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\150\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\152\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\115" +
    "\154\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\067\103" +
    "\070\117\071\101\072\114\073\110\074\116\075\111\102" +
    "\115\103\112\104\106\105\113\106\122\107\104\110\102" +
    "\111\105\115\156\116\120\117\107\001\002\000\032\004" +
    "\067\005\075\006\065\024\066\036\071\042\077\062\070" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\046\067\103\070\117\071\101\072\114\073\110\074\116" +
    "\075\111\102\115\103\112\104\106\105\113\106\122\107" +
    "\104\110\102\111\105\115\160\116\120\117\107\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\115\103\112\104\106\105\113" +
    "\106\122\107\104\110\102\111\105\115\162\116\120\117" +
    "\107\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\115\164" +
    "\116\120\117\107\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\046\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\115\166\116\120\117\107\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\046" +
    "\063\170\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\116\120\117\107\001\002\000" +
    "\060\061\uff8e\063\uff8e\065\uff8e\067\uff8e\070\uff8e\071\uff8e" +
    "\072\uff8e\073\uff8e\074\uff8e\075\uff8e\102\uff8e\103\uff8e\104" +
    "\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e\113\uff8e" +
    "\114\uff8e\115\uff8e\116\uff8e\117\uff8e\001\002\000\032\004" +
    "\067\005\075\006\065\024\066\036\071\042\077\062\070" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\046\063\173\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\116\120\117\107\001\002" +
    "\000\060\061\uff8b\063\uff8b\065\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\102\uff8b\103\uff8b" +
    "\104\uff8b\105\uff8b\106\uff8b\107\uff8b\110\uff8b\111\uff8b\113" +
    "\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\176\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\200\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\115" +
    "\202\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\067\103" +
    "\070\117\071\101\072\114\073\110\074\116\075\111\102" +
    "\115\103\112\104\106\105\113\106\122\107\104\110\102" +
    "\111\105\115\204\116\120\117\107\001\002\000\032\004" +
    "\067\005\075\006\065\024\066\036\071\042\077\062\070" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\046\067\103\070\117\071\101\072\114\073\110\074\116" +
    "\075\111\102\115\103\112\104\106\105\113\106\122\107" +
    "\104\110\102\111\105\115\206\116\120\117\107\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\063\210\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\116\120\117" +
    "\107\001\002\000\060\061\uff8f\063\uff8f\065\uff8f\067\uff8f" +
    "\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\102" +
    "\uff8f\103\uff8f\104\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f" +
    "\111\uff8f\113\uff8f\114\uff8f\115\uff8f\116\uff8f\117\uff8f\001" +
    "\002\000\004\063\212\001\002\000\060\061\uff9f\063\uff9f" +
    "\065\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074" +
    "\uff9f\075\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\111\uff9f\113\uff9f\114\uff9f\115\uff9f\116" +
    "\uff9f\117\uff9f\001\002\000\004\121\214\001\002\000\004" +
    "\063\215\001\002\000\060\061\uff98\063\uff98\065\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\073\uff98\074\uff98\075\uff98" +
    "\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107\uff98\110" +
    "\uff98\111\uff98\113\uff98\114\uff98\115\uff98\116\uff98\117\uff98" +
    "\001\002\000\004\063\217\001\002\000\060\061\uffa1\063" +
    "\uffa1\065\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1" +
    "\074\uffa1\075\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106" +
    "\uffa1\107\uffa1\110\uffa1\111\uffa1\113\uffa1\114\uffa1\115\uffa1" +
    "\116\uffa1\117\uffa1\001\002\000\004\120\221\001\002\000" +
    "\004\065\222\001\002\000\060\061\uff92\063\uff92\065\uff92" +
    "\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075" +
    "\uff92\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92" +
    "\110\uff92\111\uff92\113\uff92\114\uff92\115\uff92\116\uff92\117" +
    "\uff92\001\002\000\004\063\224\001\002\000\060\061\uffa0" +
    "\063\uffa0\065\uffa0\067\uffa0\070\uffa0\071\uffa0\072\uffa0\073" +
    "\uffa0\074\uffa0\075\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0" +
    "\106\uffa0\107\uffa0\110\uffa0\111\uffa0\113\uffa0\114\uffa0\115" +
    "\uffa0\116\uffa0\117\uffa0\001\002\000\004\121\226\001\002" +
    "\000\004\063\227\001\002\000\060\061\uff9c\063\uff9c\065" +
    "\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107" +
    "\uff9c\110\uff9c\111\uff9c\113\uff9c\114\uff9c\115\uff9c\116\uff9c" +
    "\117\uff9c\001\002\000\004\121\231\001\002\000\004\063" +
    "\232\001\002\000\060\061\uff99\063\uff99\065\uff99\067\uff99" +
    "\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\102" +
    "\uff99\103\uff99\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99" +
    "\111\uff99\113\uff99\114\uff99\115\uff99\116\uff99\117\uff99\001" +
    "\002\000\004\121\234\001\002\000\004\063\235\001\002" +
    "\000\060\061\uff97\063\uff97\065\uff97\067\uff97\070\uff97\071" +
    "\uff97\072\uff97\073\uff97\074\uff97\075\uff97\102\uff97\103\uff97" +
    "\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97\111\uff97\113" +
    "\uff97\114\uff97\115\uff97\116\uff97\117\uff97\001\002\000\004" +
    "\063\237\001\002\000\060\061\uff9e\063\uff9e\065\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110" +
    "\uff9e\111\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e" +
    "\001\002\000\004\063\241\001\002\000\060\061\uff9d\063" +
    "\uff9d\065\uff9d\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d" +
    "\074\uff9d\075\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\110\uff9d\111\uff9d\113\uff9d\114\uff9d\115\uff9d" +
    "\116\uff9d\117\uff9d\001\002\000\004\121\243\001\002\000" +
    "\004\063\244\001\002\000\060\061\uff9a\063\uff9a\065\uff9a" +
    "\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075" +
    "\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a" +
    "\110\uff9a\111\uff9a\113\uff9a\114\uff9a\115\uff9a\116\uff9a\117" +
    "\uff9a\001\002\000\004\121\246\001\002\000\004\063\247" +
    "\001\002\000\060\061\uff9b\063\uff9b\065\uff9b\067\uff9b\070" +
    "\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\102\uff9b" +
    "\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111" +
    "\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\063\252\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\116\120\117" +
    "\107\001\002\000\060\061\uff8a\063\uff8a\065\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\102" +
    "\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a" +
    "\111\uff8a\113\uff8a\114\uff8a\115\uff8a\116\uff8a\117\uff8a\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\063\255\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\116\120" +
    "\117\107\001\002\000\060\061\uff8c\063\uff8c\065\uff8c\067" +
    "\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c" +
    "\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110" +
    "\uff8c\111\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c" +
    "\001\002\000\060\061\uffa8\063\uffa8\065\uffa8\067\uffa8\070" +
    "\uffa8\071\101\072\114\073\110\074\116\075\111\102\uffa8" +
    "\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111" +
    "\uffa8\113\uffa8\114\uffa8\115\uffa8\116\120\117\uffa8\001\002" +
    "\000\060\061\uffaf\063\uffaf\065\uffaf\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\uffaf\103\uffaf" +
    "\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf\113" +
    "\uffaf\114\uffaf\115\uffaf\116\120\117\uffaf\001\002\000\060" +
    "\061\uffa6\063\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072" +
    "\uffa6\073\110\074\116\075\111\102\uffa6\103\uffa6\104\uffa6" +
    "\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\113\uffa6\114" +
    "\uffa6\115\uffa6\116\120\117\uffa6\001\002\000\060\061\uffac" +
    "\063\uffac\065\uffac\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\uffac\103\uffac\104\uffac\105\uffac" +
    "\106\uffac\107\uffac\110\uffac\111\uffac\113\uffac\114\uffac\115" +
    "\uffac\116\120\117\uffac\001\002\000\060\061\uffae\063\uffae" +
    "\065\uffae\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae" +
    "\107\uffae\110\uffae\111\uffae\113\uffae\114\uffae\115\uffae\116" +
    "\120\117\uffae\001\002\000\060\061\uffa5\063\uffa5\065\uffa5" +
    "\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\116\075" +
    "\111\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\110\uffa5\111\uffa5\113\uffa5\114\uffa5\115\uffa5\116\120\117" +
    "\uffa5\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\113\265\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\060\061\uff96\063\uff96\065" +
    "\uff96\067\103\070\117\071\101\072\114\073\110\074\116" +
    "\075\111\102\115\103\112\104\106\105\113\106\122\107" +
    "\104\110\102\111\105\113\uff96\114\uff96\115\uff96\116\120" +
    "\117\107\001\002\000\060\061\uffad\063\uffad\065\uffad\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110" +
    "\uffad\111\uffad\113\uffad\114\uffad\115\uffad\116\120\117\uffad" +
    "\001\002\000\060\061\uffb2\063\uffb2\065\uffb2\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\uffb2\113\uffb2\114\uffb2\115\uffb2\116\120\117\uffb2\001\002" +
    "\000\060\061\uffaa\063\uffaa\065\uffaa\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\uffaa\107\uffaa\110\uffaa\111\uffaa\113" +
    "\uffaa\114\uffaa\115\uffaa\116\120\117\uffaa\001\002\000\060" +
    "\061\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\101\072" +
    "\114\073\110\074\116\075\111\102\uffa9\103\uffa9\104\uffa9" +
    "\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\113\uffa9\114" +
    "\uffa9\115\uffa9\116\120\117\uffa9\001\002\000\060\061\uffb1" +
    "\063\uffb1\065\uffb1\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\115\103\112\104\106\105\113" +
    "\106\122\107\104\110\uffb1\111\uffb1\113\uffb1\114\uffb1\115" +
    "\uffb1\116\120\117\uffb1\001\002\000\060\061\uffa7\063\uffa7" +
    "\065\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\110\074" +
    "\116\075\111\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7" +
    "\107\uffa7\110\uffa7\111\uffa7\113\uffa7\114\uffa7\115\uffa7\116" +
    "\120\117\uffa7\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\115\277\116\120\117\107\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\046\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\115\103\112\104\106\105\113\106\122\107\104\110" +
    "\102\111\105\115\301\116\120\117\107\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\303\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\063\305\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\116\120" +
    "\117\107\001\002\000\060\061\uff90\063\uff90\065\uff90\067" +
    "\uff90\070\uff90\071\uff90\072\uff90\073\uff90\074\uff90\075\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\111\uff90\113\uff90\114\uff90\115\uff90\116\uff90\117\uff90" +
    "\001\002\000\060\061\uffb0\063\uffb0\065\uffb0\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\uffb0\111" +
    "\uffb0\113\uffb0\114\uffb0\115\uffb0\116\120\117\uffb0\001\002" +
    "\000\034\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\063\314\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\004\120\311\001\002\000\004\065" +
    "\312\001\002\000\060\061\uff93\063\uff93\065\uff93\067\uff93" +
    "\070\uff93\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\102" +
    "\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93" +
    "\111\uff93\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93\001" +
    "\002\000\006\063\317\115\316\001\002\000\060\061\uffec" +
    "\063\uffec\065\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073" +
    "\uffec\074\uffec\075\uffec\102\uffec\103\uffec\104\uffec\105\uffec" +
    "\106\uffec\107\uffec\110\uffec\111\uffec\113\uffec\114\uffec\115" +
    "\uffec\116\uffec\117\uffec\001\002\000\052\063\uffb3\065\uffb3" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\115\uffb3\116\120\117\107\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\060\061\uffed\063\uffed\065\uffed\067\uffed\070\uffed" +
    "\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\102\uffed\103" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\113\uffed\114\uffed\115\uffed\116\uffed\117\uffed\001\002\000" +
    "\052\063\uffb4\065\uffb4\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\uffb4\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\063\323\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\116\120\117\107\001\002\000\060\061\uff8d\063\uff8d" +
    "\065\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074" +
    "\uff8d\075\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d" +
    "\107\uff8d\110\uff8d\111\uff8d\113\uff8d\114\uff8d\115\uff8d\116" +
    "\uff8d\117\uff8d\001\002\000\046\063\325\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\116\120\117\107\001\002\000\060\061\uff83\063\uff83\065" +
    "\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\074\uff83" +
    "\075\uff83\102\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107" +
    "\uff83\110\uff83\111\uff83\113\uff83\114\uff83\115\uff83\116\uff83" +
    "\117\uff83\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\063\330\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\116\120\117\107\001\002\000\060\061\uff89\063\uff89" +
    "\065\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89\074" +
    "\uff89\075\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89" +
    "\107\uff89\110\uff89\111\uff89\113\uff89\114\uff89\115\uff89\116" +
    "\uff89\117\uff89\001\002\000\060\061\uffa4\063\uffa4\065\uffa4" +
    "\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4" +
    "\110\uffa4\111\uffa4\113\uffa4\114\uffa4\115\uffa4\116\120\117" +
    "\uffa4\001\002\000\006\114\uffe6\115\uffe6\001\002\000\010" +
    "\066\334\114\uffe5\115\uffe5\001\002\000\036\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\060\335\062\070" +
    "\064\336\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\004\121\343\001\002\000\034\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\065\341\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\050" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\114\uffe4\115\uffe4\116\120\117\107\001" +
    "\002\000\006\065\342\115\316\001\002\000\006\114\uffe2" +
    "\115\uffe2\001\002\000\006\114\uffe1\115\uffe1\001\002\000" +
    "\004\113\351\001\002\000\006\061\uffd5\115\uffd5\001\002" +
    "\000\006\061\347\115\346\001\002\000\004\121\343\001" +
    "\002\000\006\114\uffe3\115\uffe3\001\002\000\006\061\uffd6" +
    "\115\uffd6\001\002\000\034\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\064\352\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\034\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\065\355" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\050\061\uffd4\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\uffd4\116\120\117\107" +
    "\001\002\000\006\065\356\115\316\001\002\000\006\061" +
    "\uffd3\115\uffd3\001\002\000\006\061\uffd2\115\uffd2\001\002" +
    "\000\030\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\016\ufff5\017\ufff5\021\ufff5\061\ufff5\121\ufff5\001\002" +
    "\000\030\002\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013" +
    "\ufff1\016\ufff1\017\ufff1\021\ufff1\061\ufff1\121\ufff1\001\002" +
    "\000\004\121\333\001\002\000\030\002\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\012\ufffc\013\ufffc\016\ufffc\017\ufffc\021\ufffc" +
    "\061\ufffc\121\ufffc\001\002\000\006\114\uffe7\115\uffe7\001" +
    "\002\000\030\002\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\016\ufff8\017\ufff8\021\ufff8\061\ufff8\121\ufff8\001" +
    "\002\000\030\002\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2" +
    "\013\ufff2\016\ufff2\017\ufff2\021\ufff2\061\ufff2\121\ufff2\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\063\370\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\116\120" +
    "\117\107\001\002\000\004\060\371\001\002\000\024\007" +
    "\026\010\007\011\027\012\022\013\006\016\016\017\020" +
    "\021\030\121\013\001\002\000\026\007\026\010\007\011" +
    "\027\012\022\013\006\016\016\017\020\021\030\061\373" +
    "\121\013\001\002\000\032\002\uffd1\007\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\013\uffd1\016\uffd1\017\uffd1\020\376\021\uffd1" +
    "\061\uffd1\121\uffd1\001\002\000\030\002\uffcd\007\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\016\uffcd\017\uffcd\021\uffcd" +
    "\061\uffcd\121\uffcd\001\002\000\030\002\uffd0\007\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0" +
    "\061\uffd0\121\uffd0\001\002\000\006\017\u0100\060\377\001" +
    "\002\000\024\007\026\010\007\011\027\012\022\013\006" +
    "\016\016\017\020\021\030\121\013\001\002\000\004\062" +
    "\u0101\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\063\u0103\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\116\120\117\107\001\002\000\004\060\u0104\001\002\000" +
    "\024\007\026\010\007\011\027\012\022\013\006\016\016" +
    "\017\020\021\030\121\013\001\002\000\026\007\026\010" +
    "\007\011\027\012\022\013\006\016\016\017\020\021\030" +
    "\061\u0106\121\013\001\002\000\032\002\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\016\uffce\017\uffce\020\376" +
    "\021\uffce\061\uffce\121\uffce\001\002\000\030\002\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\016\uffcf\017\uffcf" +
    "\021\uffcf\061\uffcf\121\uffcf\001\002\000\026\007\026\010" +
    "\007\011\027\012\022\013\006\016\016\017\020\021\030" +
    "\061\u0109\121\013\001\002\000\030\002\uffcc\007\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\016\uffcc\017\uffcc\021\uffcc" +
    "\061\uffcc\121\uffcc\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\114" +
    "\u010b\116\120\117\107\001\002\000\030\002\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\021" +
    "\ufff7\061\ufff7\121\ufff7\001\002\000\004\114\uffdc\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\036\022\u011f\023" +
    "\u0126\025\u011d\032\u0122\044\u011a\045\u0121\046\u0120\047\u0125" +
    "\050\u011b\052\u0124\055\u0127\056\u011c\057\u011e\121\u0123\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\004\120\u0115\001\002\000\004\114\uffdb" +
    "\001\002\000\004\065\u0116\001\002\000\004\066\u0117\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\114\uffdf\116\120" +
    "\117\107\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\114\uffd8\116" +
    "\120\117\107\001\002\000\004\062\u01ab\001\002\000\004" +
    "\062\u019c\001\002\000\004\062\u0198\001\002\000\004\062" +
    "\u0196\001\002\000\004\062\u0192\001\002\000\004\062\u0190" +
    "\001\002\000\004\062\u0179\001\002\000\004\062\u0162\001" +
    "\002\000\004\062\u015f\001\002\000\010\064\u014b\066\u014a" +
    "\116\u014c\001\002\000\004\062\u013f\001\002\000\004\062" +
    "\u012e\001\002\000\004\062\u012c\001\002\000\004\062\u0128" +
    "\001\002\000\004\121\u0129\001\002\000\004\062\307\001" +
    "\002\000\004\063\u012b\001\002\000\004\114\uffb7\001\002" +
    "\000\004\063\u012d\001\002\000\004\114\uffc5\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\046\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\u0130\116\120\117\107" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\115\u0132\116" +
    "\120\117\107\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\115\u0134\116\120\117\107\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\046\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\115\103\112\104\106\105\113\106\122\107\104\110" +
    "\102\111\105\115\u0136\116\120\117\107\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\u0138\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\u013a\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\115" +
    "\u013c\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\063\u013e" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\116\120\117\107\001\002\000\004\114" +
    "\uffba\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\115\u0141" +
    "\116\120\117\107\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\046\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\115\u0143\116\120\117\107\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\046" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\115\u0145\116\120\117\107\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\046\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\u0147\116\120\117\107" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\046\063\u0149\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\116" +
    "\120\117\107\001\002\000\004\114\uffb8\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\004\120\u015a\001\002\000\012\022\u0150\023\u014d\025" +
    "\u014e\032\u014f\001\002\000\004\062\u0158\001\002\000\004" +
    "\062\u0156\001\002\000\004\062\u0153\001\002\000\004\062" +
    "\u0151\001\002\000\004\063\u0152\001\002\000\004\114\uffc6" +
    "\001\002\000\004\121\u0154\001\002\000\004\063\u0155\001" +
    "\002\000\004\114\uffc0\001\002\000\004\063\u0157\001\002" +
    "\000\004\114\uffc2\001\002\000\004\063\u0159\001\002\000" +
    "\004\114\uffc4\001\002\000\004\065\u015b\001\002\000\004" +
    "\066\u015c\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\114" +
    "\uffdd\116\120\117\107\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\114\uffde\116\120\117\107\001\002\000\004\121\u0160\001" +
    "\002\000\004\063\u0161\001\002\000\004\114\uffc1\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\115\103\112\104\106\105\113" +
    "\106\122\107\104\110\102\111\105\115\u0164\116\120\117" +
    "\107\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\115\u0166" +
    "\116\120\117\107\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\046\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\115\u0168\116\120\117\107\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\046" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\115\u016a\116\120\117\107\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\046\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\u016c\116\120\117\107" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\115\u016e\116" +
    "\120\117\107\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\115\u0170\116\120\117\107\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\046\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\115\103\112\104\106\105\113\106\122\107\104\110" +
    "\102\111\105\115\u0172\116\120\117\107\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\u0174\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\u0176\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\063\u0178\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\116\120\117\107\001\002\000\004\114\uffbc\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\115\103\112\104\106\105\113" +
    "\106\122\107\104\110\102\111\105\115\u017b\116\120\117" +
    "\107\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\115\u017d" +
    "\116\120\117\107\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\046\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\115\u017f\116\120\117\107\001\002\000\032\004\067" +
    "\005\075\006\065\024\066\036\071\042\077\062\070\070" +
    "\064\112\076\120\063\121\073\122\072\001\002\000\046" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\115\u0181\116\120\117\107\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\046\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\u0183\116\120\117\107" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\115\u0185\116" +
    "\120\117\107\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\115\u0187\116\120\117\107\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\046\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\115\103\112\104\106\105\113\106\122\107\104\110" +
    "\102\111\105\115\u0189\116\120\117\107\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\u018b\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\u018d\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\063\u018f\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\116\120\117\107\001\002\000\004\114\uffbb\001\002" +
    "\000\004\063\u0191\001\002\000\004\114\uffc7\001\002\000" +
    "\006\063\u0194\121\u0129\001\002\000\004\063\u0195\001\002" +
    "\000\004\114\uffb6\001\002\000\004\114\uffb5\001\002\000" +
    "\004\063\u0197\001\002\000\004\114\uffc3\001\002\000\006" +
    "\063\u019a\121\u0129\001\002\000\004\063\u019b\001\002\000" +
    "\004\114\uffbf\001\002\000\004\114\uffbe\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\u019e\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\u01a0\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\115" +
    "\u01a2\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\067\103" +
    "\070\117\071\101\072\114\073\110\074\116\075\111\102" +
    "\115\103\112\104\106\105\113\106\122\107\104\110\102" +
    "\111\105\115\u01a4\116\120\117\107\001\002\000\032\004" +
    "\067\005\075\006\065\024\066\036\071\042\077\062\070" +
    "\070\064\112\076\120\063\121\073\122\072\001\002\000" +
    "\046\067\103\070\117\071\101\072\114\073\110\074\116" +
    "\075\111\102\115\103\112\104\106\105\113\106\122\107" +
    "\104\110\102\111\105\115\u01a6\116\120\117\107\001\002" +
    "\000\032\004\067\005\075\006\065\024\066\036\071\042" +
    "\077\062\070\070\064\112\076\120\063\121\073\122\072" +
    "\001\002\000\046\067\103\070\117\071\101\072\114\073" +
    "\110\074\116\075\111\102\115\103\112\104\106\105\113" +
    "\106\122\107\104\110\102\111\105\115\u01a8\116\120\117" +
    "\107\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\063\u01aa\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\116\120\117\107\001\002\000\004\114\uffb9\001\002\000" +
    "\032\004\067\005\075\006\065\024\066\036\071\042\077" +
    "\062\070\070\064\112\076\120\063\121\073\122\072\001" +
    "\002\000\046\067\103\070\117\071\101\072\114\073\110" +
    "\074\116\075\111\102\115\103\112\104\106\105\113\106" +
    "\122\107\104\110\102\111\105\115\u01ad\116\120\117\107" +
    "\001\002\000\032\004\067\005\075\006\065\024\066\036" +
    "\071\042\077\062\070\070\064\112\076\120\063\121\073" +
    "\122\072\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\115\u01af\116" +
    "\120\117\107\001\002\000\032\004\067\005\075\006\065" +
    "\024\066\036\071\042\077\062\070\070\064\112\076\120" +
    "\063\121\073\122\072\001\002\000\046\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\115\u01b1\116\120\117\107\001\002\000\032\004\067\005" +
    "\075\006\065\024\066\036\071\042\077\062\070\070\064" +
    "\112\076\120\063\121\073\122\072\001\002\000\046\067" +
    "\103\070\117\071\101\072\114\073\110\074\116\075\111" +
    "\102\115\103\112\104\106\105\113\106\122\107\104\110" +
    "\102\111\105\115\u01b3\116\120\117\107\001\002\000\032" +
    "\004\067\005\075\006\065\024\066\036\071\042\077\062" +
    "\070\070\064\112\076\120\063\121\073\122\072\001\002" +
    "\000\046\067\103\070\117\071\101\072\114\073\110\074" +
    "\116\075\111\102\115\103\112\104\106\105\113\106\122" +
    "\107\104\110\102\111\105\115\u01b5\116\120\117\107\001" +
    "\002\000\032\004\067\005\075\006\065\024\066\036\071" +
    "\042\077\062\070\070\064\112\076\120\063\121\073\122" +
    "\072\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\115\u01b7\116\120" +
    "\117\107\001\002\000\032\004\067\005\075\006\065\024" +
    "\066\036\071\042\077\062\070\070\064\112\076\120\063" +
    "\121\073\122\072\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\115" +
    "\u01b9\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\063\u01bb" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\116\120\117\107\001\002\000\004\114" +
    "\uffbd\001\002\000\046\067\103\070\117\071\101\072\114" +
    "\073\110\074\116\075\111\102\115\103\112\104\106\105" +
    "\113\106\122\107\104\110\102\111\105\114\uffd9\116\120" +
    "\117\107\001\002\000\046\067\103\070\117\071\101\072" +
    "\114\073\110\074\116\075\111\102\115\103\112\104\106" +
    "\105\113\106\122\107\104\110\102\111\105\114\uffe0\116" +
    "\120\117\107\001\002\000\046\067\103\070\117\071\101" +
    "\072\114\073\110\074\116\075\111\102\115\103\112\104" +
    "\106\105\113\106\122\107\104\110\102\111\105\114\uffda" +
    "\116\120\117\107\001\002\000\046\067\103\070\117\071" +
    "\101\072\114\073\110\074\116\075\111\102\115\103\112" +
    "\104\106\105\113\106\122\107\104\110\102\111\105\114" +
    "\uffd7\116\120\117\107\001\002\000\032\004\067\005\075" +
    "\006\065\024\066\036\071\042\077\062\070\070\064\112" +
    "\076\120\063\121\073\122\072\001\002\000\046\063\u01c2" +
    "\067\103\070\117\071\101\072\114\073\110\074\116\075" +
    "\111\102\115\103\112\104\106\105\113\106\122\107\104" +
    "\110\102\111\105\116\120\117\107\001\002\000\004\114" +
    "\u01c3\001\002\000\030\002\ufffa\007\ufffa\010\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\016\ufffa\017\ufffa\021\ufffa\061\ufffa\121" +
    "\ufffa\001\002\000\032\004\067\005\075\006\065\024\066" +
    "\036\071\042\077\062\070\070\064\112\076\120\063\121" +
    "\073\122\072\001\002\000\046\063\u01c6\067\103\070\117" +
    "\071\101\072\114\073\110\074\116\075\111\102\115\103" +
    "\112\104\106\105\113\106\122\107\104\110\102\111\105" +
    "\116\120\117\107\001\002\000\004\060\u01c7\001\002\000" +
    "\006\014\u01ca\015\u01c8\001\002\000\004\113\u01d2\001\002" +
    "\000\004\061\u01d1\001\002\000\032\004\067\005\075\006" +
    "\065\024\066\036\071\042\077\062\070\070\064\112\076" +
    "\120\063\121\073\122\072\001\002\000\046\067\103\070" +
    "\117\071\101\072\114\073\110\074\116\075\111\102\115" +
    "\103\112\104\106\105\113\106\122\107\104\110\102\111" +
    "\105\113\u01cc\116\120\117\107\001\002\000\004\060\u01cd" +
    "\001\002\000\024\007\026\010\007\011\027\012\022\013" +
    "\006\016\016\017\020\021\030\121\013\001\002\000\026" +
    "\007\026\010\007\011\027\012\022\013\006\016\016\017" +
    "\020\021\030\061\u01cf\121\013\001\002\000\010\014\u01ca" +
    "\015\u01c8\061\uffc9\001\002\000\004\061\uffca\001\002\000" +
    "\030\002\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\016\uffcb\017\uffcb\021\uffcb\061\uffcb\121\uffcb\001\002\000" +
    "\004\060\u01d3\001\002\000\024\007\026\010\007\011\027" +
    "\012\022\013\006\016\016\017\020\021\030\121\013\001" +
    "\002\000\026\007\026\010\007\011\027\012\022\013\006" +
    "\016\016\017\020\021\030\061\u01d5\121\013\001\002\000" +
    "\004\061\uffc8\001\002\000\004\002\000\001\002\000\030" +
    "\002\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\016" +
    "\ufffb\017\ufffb\021\ufffb\061\ufffb\121\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01d5\000\032\002\004\003\011\004\014\005\016\006" +
    "\013\007\024\010\022\012\003\015\010\020\007\021\020" +
    "\022\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\041\006\013\007\024\010\022\012\003" +
    "\015\010\020\007\021\020\022\023\001\001\000\006\007" +
    "\073\013\u0109\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\034\024\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\040\005\016\006\013\007\024\010\022" +
    "\012\003\015\010\020\007\021\020\022\023\001\001\000" +
    "\024\005\041\006\013\007\024\010\022\012\003\015\010" +
    "\020\007\021\020\022\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\004\046\005\016\006\013\007\024\010\022\012\003\015" +
    "\010\020\007\021\020\022\023\001\001\000\024\005\041" +
    "\006\013\007\024\010\022\012\003\015\010\020\007\021" +
    "\020\022\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\004\055\005\016\006\013\007\024\010\022\012\003" +
    "\015\010\020\007\021\020\022\023\001\001\000\024\005" +
    "\041\006\013\007\024\010\022\012\003\015\010\020\007" +
    "\021\020\022\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\073\013\077\001\001" +
    "\000\002\001\001\000\006\007\073\013\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\073\013\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\073\013\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\073\013\273\001\001\000\006" +
    "\007\073\013\272\001\001\000\006\007\073\013\271\001" +
    "\001\000\006\007\073\013\270\001\001\000\006\007\073" +
    "\013\267\001\001\000\006\007\073\013\266\001\001\000" +
    "\006\007\073\013\263\001\001\000\006\007\073\013\262" +
    "\001\001\000\002\001\001\000\006\007\073\013\261\001" +
    "\001\000\006\007\073\013\260\001\001\000\006\007\073" +
    "\013\257\001\001\000\006\007\073\013\256\001\001\000" +
    "\002\001\001\000\006\007\073\013\255\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\073\013\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\073\013\146\001\001\000\002\001\001\000\006" +
    "\007\073\013\150\001\001\000\002\001\001\000\006\007" +
    "\073\013\152\001\001\000\002\001\001\000\006\007\073" +
    "\013\154\001\001\000\002\001\001\000\006\007\073\013" +
    "\156\001\001\000\002\001\001\000\006\007\073\013\160" +
    "\001\001\000\002\001\001\000\006\007\073\013\162\001" +
    "\001\000\002\001\001\000\006\007\073\013\164\001\001" +
    "\000\002\001\001\000\006\007\073\013\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\013\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\073\013\174\001\001\000\002\001\001\000\006\007\073" +
    "\013\176\001\001\000\002\001\001\000\006\007\073\013" +
    "\200\001\001\000\002\001\001\000\006\007\073\013\202" +
    "\001\001\000\002\001\001\000\006\007\073\013\204\001" +
    "\001\000\002\001\001\000\006\007\073\013\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\073\013\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\073\013\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\073\013\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\013\275" +
    "\001\001\000\002\001\001\000\006\007\073\013\277\001" +
    "\001\000\002\001\001\000\006\007\073\013\301\001\001" +
    "\000\002\001\001\000\006\007\073\013\303\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\007\073\013\314\025\312\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\073\013\317\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\073" +
    "\013\321\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\013\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\073" +
    "\013\336\001\001\000\006\014\343\026\344\001\001\000" +
    "\010\007\073\013\314\025\337\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\073\013\352\001\001\000\010\007\073\013\314" +
    "\025\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\362\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\073\013\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\371\005\016\006\013\007\024\010\022" +
    "\012\003\015\010\020\007\021\020\022\023\001\001\000" +
    "\024\005\041\006\013\007\024\010\022\012\003\015\010" +
    "\020\007\021\020\022\023\001\001\000\006\016\374\017" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\u0107\005\016\006\013\007\024\010" +
    "\022\012\003\015\010\020\007\021\020\022\023\001\001" +
    "\000\002\001\001\000\006\007\073\013\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\u0104\005\016" +
    "\006\013\007\024\010\022\012\003\015\010\020\007\021" +
    "\020\022\023\001\001\000\024\005\041\006\013\007\024" +
    "\010\022\012\003\015\010\020\007\021\020\022\023\001" +
    "\001\000\006\016\u0106\017\373\001\001\000\002\001\001" +
    "\000\024\005\041\006\013\007\024\010\022\012\003\015" +
    "\010\020\007\021\020\022\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\073\013\u01be\001\001\000\006\007\073\013\u01bd" +
    "\001\001\000\006\007\073\013\u01bc\001\001\000\006\007" +
    "\073\013\u01bb\001\001\000\002\001\001\000\006\007\073" +
    "\013\u0118\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\013\u0117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\u0129\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\073\013\u012e\001\001\000\002\001\001" +
    "\000\006\007\073\013\u0130\001\001\000\002\001\001\000" +
    "\006\007\073\013\u0132\001\001\000\002\001\001\000\006" +
    "\007\073\013\u0134\001\001\000\002\001\001\000\006\007" +
    "\073\013\u0136\001\001\000\002\001\001\000\006\007\073" +
    "\013\u0138\001\001\000\002\001\001\000\006\007\073\013" +
    "\u013a\001\001\000\002\001\001\000\006\007\073\013\u013c" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\073\013\u013f\001\001\000\002\001\001\000\006\007\073" +
    "\013\u0141\001\001\000\002\001\001\000\006\007\073\013" +
    "\u0143\001\001\000\002\001\001\000\006\007\073\013\u0145" +
    "\001\001\000\002\001\001\000\006\007\073\013\u0147\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\073" +
    "\013\u015d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\073\013\u015c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\073" +
    "\013\u0162\001\001\000\002\001\001\000\006\007\073\013" +
    "\u0164\001\001\000\002\001\001\000\006\007\073\013\u0166" +
    "\001\001\000\002\001\001\000\006\007\073\013\u0168\001" +
    "\001\000\002\001\001\000\006\007\073\013\u016a\001\001" +
    "\000\002\001\001\000\006\007\073\013\u016c\001\001\000" +
    "\002\001\001\000\006\007\073\013\u016e\001\001\000\002" +
    "\001\001\000\006\007\073\013\u0170\001\001\000\002\001" +
    "\001\000\006\007\073\013\u0172\001\001\000\002\001\001" +
    "\000\006\007\073\013\u0174\001\001\000\002\001\001\000" +
    "\006\007\073\013\u0176\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\073\013\u0179\001\001\000\002\001" +
    "\001\000\006\007\073\013\u017b\001\001\000\002\001\001" +
    "\000\006\007\073\013\u017d\001\001\000\002\001\001\000" +
    "\006\007\073\013\u017f\001\001\000\002\001\001\000\006" +
    "\007\073\013\u0181\001\001\000\002\001\001\000\006\007" +
    "\073\013\u0183\001\001\000\002\001\001\000\006\007\073" +
    "\013\u0185\001\001\000\002\001\001\000\006\007\073\013" +
    "\u0187\001\001\000\002\001\001\000\006\007\073\013\u0189" +
    "\001\001\000\002\001\001\000\006\007\073\013\u018b\001" +
    "\001\000\002\001\001\000\006\007\073\013\u018d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0192\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\073\013" +
    "\u019c\001\001\000\002\001\001\000\006\007\073\013\u019e" +
    "\001\001\000\002\001\001\000\006\007\073\013\u01a0\001" +
    "\001\000\002\001\001\000\006\007\073\013\u01a2\001\001" +
    "\000\002\001\001\000\006\007\073\013\u01a4\001\001\000" +
    "\002\001\001\000\006\007\073\013\u01a6\001\001\000\002" +
    "\001\001\000\006\007\073\013\u01a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\073\013\u01ab\001\001" +
    "\000\002\001\001\000\006\007\073\013\u01ad\001\001\000" +
    "\002\001\001\000\006\007\073\013\u01af\001\001\000\002" +
    "\001\001\000\006\007\073\013\u01b1\001\001\000\002\001" +
    "\001\000\006\007\073\013\u01b3\001\001\000\002\001\001" +
    "\000\006\007\073\013\u01b5\001\001\000\002\001\001\000" +
    "\006\007\073\013\u01b7\001\001\000\002\001\001\000\006" +
    "\007\073\013\u01b9\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\073\013\u01c0\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\073\013\u01c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01c8\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\073\013\u01ca\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\u01cd\005\016\006\013" +
    "\007\024\010\022\012\003\015\010\020\007\021\020\022" +
    "\023\001\001\000\024\005\041\006\013\007\024\010\022" +
    "\012\003\015\010\020\007\021\020\022\023\001\001\000" +
    "\004\027\u01cf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\004\u01d3\005\016\006\013\007" +
    "\024\010\022\012\003\015\010\020\007\021\020\022\023" +
    "\001\001\000\024\005\041\006\013\007\024\010\022\012" +
    "\003\015\010\020\007\021\020\022\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= FALSO 
            {
              nodo RESULT =null;
		 RESULT = new bool(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= VERDADERO 
            {
              nodo RESULT =null;
		 RESULT = new bool(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= CADA LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CADA(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E DOT OPE LPAR E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OPE(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E DOT OPN LPAR E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OPI(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E DOT OPI LPAR E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OPI(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= LEERGXML LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LeerGXML(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E DOT CREARBOTON LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo r = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo v = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Boton(i, f, t, c, x, y, r, v, h, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E DOT CREARCONTENEDOR LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Panel(i, h, w, c, b, x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= CREARVENTANA LPAR E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Ventana(c, h, w, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= call_f 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E DOT ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_getArr(e, i, Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E DOT ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E Q E COLON E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new inline_if(c, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= E DOT ALGUNO LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Alguno(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= E DOT TODOS LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Todos(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E DOT REDUCE LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Reduce(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= E DOT BUSCAR LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Buscar(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E DOT FILTRAR LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Filtrar(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= E DOT MAP LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Map(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= E DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= E DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= E DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E DOT MINIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Minimo(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E DOT MAXIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Maximo(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E MINUSMINUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E PLUSPLUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "u-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WIN_FN ::= ID DOT ALCERRAR LPAR call_f RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlCerrar(i, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WIN_FN ::= ID DOT ALCERRAR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new AlCerrar(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WIN_FN ::= ID DOT ALCLIC LPAR call_f RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlClic(i, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WIN_FN ::= ID DOT CREARIMAGEN LPAR E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo r = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imagen(i, r, x, y, h, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WIN_FN ::= ID DOT CREARDESPLEGABLE LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Desplegable(i, h, w, l, x, y, d, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // WIN_FN ::= ID DOT CREARNUMERICO LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo max = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo min = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Numerico(i, h, w, max, min, x, y, d, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // WIN_FN ::= ID DOT CREARAREA LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo name = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AreaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WIN_FN ::= ID DOT CREARCAJA LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo name = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CajaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WIN_FN ::= ID DOT CREARTEXTO LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo v = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Texto(i, f, t, c, x, y, n, cur, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // WIN_FN ::= ID DOT ALCARGAR LPAR call_f RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AlCargar(i, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WIN_FN ::= ID DOT ALCARGAR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new AlCargar(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARR_FN ::= ID DOT ID DOT MAP LPAR ID RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Map(new Obj_getId(new getId(o), i), f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARR_FN ::= ID DOT MAP LPAR ID RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Map(new getId(i), f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARR_FN ::= ID DOT ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARR_FN ::= ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARR_FN ::= ID DOT ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARR_FN ::= ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARR_FN ::= ID DOT ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARR_FN ::= ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= DEFECTO COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(null, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASE ::= CASO E COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE ::= CASO E COLON LCURL A RCURL CASE 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   tmp.addAll(c);
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SWITCH ::= SELECCIONA LPAR E RPAR LCURL CASE RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SWITCH(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= SINO LCURL A RCURL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ELSE(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE_IF ::= ELSE 
            {
              nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo el = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF_ELSE(e, a, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Obj_a ::= ID COLON LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_a_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Obj_a ::= ID COLON LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Obj_a_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Obj_a ::= ID COLON E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_a(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // l_Obj_a ::= Obj_a 
            {
              LinkedList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(o);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // l_Obj_a ::= l_Obj_a COMMA Obj_a 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(o);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Asign ::= ID DIVEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Asign ::= ID TIMESEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Asign ::= ID MINUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Asign ::= ID PLUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Asign ::= ID MINUSMINUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(new getId(i), -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asign ::= ID PLUSPLUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(new getId(i), 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asign ::= ID DOT ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putArr(o, i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asign ::= ID DOT ID EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putId(o, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asign ::= ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_arr(i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asign ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Dec_ ::= ID EQ LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new dec_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Dec_ ::= ID EQ LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new dec_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Dec_ ::= ID EQ LCURL l_Obj_a RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Dec_ ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Dec_ ::= ID 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Dec ::= VAR Dec_ 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec ::= Dec COMMA Dec_ 
            {
              nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new l_dec(l, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // l_para2 ::= VAR ID 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // l_para2 ::= l_para2 COMMA VAR ID 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(i);
                                                                                   RESULT = l; 
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // l_para ::= ID 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // l_para ::= l_para COMMA ID 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(i);
                                                                                   RESULT = l; 
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // call_f ::= ID LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // call_f ::= ID LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Func ::= FUNCION ID LPAR RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Func ::= FUNCION ID LPAR l_para2 RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, l, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Func ::= FUNCION ID LPAR l_para RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, l, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // As ::= WIN_FN SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // As ::= ARR_FN SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // As ::= SWITCH 
            {
              nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo s = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // As ::= IF 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // As ::= call_f SEMI 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // As ::= Func 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // As ::= RETORNAR E SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new retornar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // As ::= DETENER SEMI 
            {
              nodo RESULT =null;
		 RESULT = new detener(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // As ::= IMPORTAR LPAR E RPAR SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new importar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // As ::= IMPRIMIR LPAR E RPAR SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new imprimir(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // As ::= Asign SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // As ::= Dec SEMI 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= As 
            {
              nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A As 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new a_l(a, as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= A 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ambient(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

