
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 28 22:25:27 CST 2019
//----------------------------------------------------

package grammar_fs;

import interpreter_fs.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 28 22:25:27 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\005\004\000\002" +
    "\006\012\000\002\006\011\000\002\007\006\000\002\007" +
    "\005\000\002\016\005\000\002\016\004\000\002\010\005" +
    "\000\002\010\004\000\002\011\003\000\002\011\005\000" +
    "\002\011\007\000\002\011\006\000\002\011\007\000\002" +
    "\012\005\000\002\012\004\000\002\012\004\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\020\005\000\002\020\003\000\002\014\005\000" +
    "\002\014\006\000\002\014\007\000\002\017\005\000\002" +
    "\017\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\004\000\002\013" +
    "\004\000\002\013\006\000\002\013\004\000\002\013\003" +
    "\000\002\013\005\000\002\013\006\000\002\013\007\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\015\003\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\016\007\012\010\020\012\006\016\004\021" +
    "\021\121\015\001\002\000\020\004\045\062\046\070\043" +
    "\112\052\120\044\121\050\122\047\001\002\000\020\002" +
    "\uffff\007\012\010\020\012\006\016\004\021\021\121\015" +
    "\001\002\000\004\114\210\001\002\000\006\114\206\115" +
    "\205\001\002\000\022\002\ufffd\007\ufffd\010\ufffd\012\ufffd" +
    "\016\ufffd\021\ufffd\061\ufffd\121\ufffd\001\002\000\004\002" +
    "\204\001\002\000\004\121\160\001\002\000\004\114\156" +
    "\001\002\000\022\002\ufff7\007\ufff7\010\ufff7\012\ufff7\016" +
    "\ufff7\021\ufff7\061\ufff7\121\ufff7\001\002\000\022\062\116" +
    "\066\144\074\150\075\147\076\145\077\146\100\143\101" +
    "\142\001\002\000\004\002\001\001\002\000\004\114\141" +
    "\001\002\000\004\062\042\001\002\000\004\121\022\001" +
    "\002\000\004\062\023\001\002\000\006\007\024\063\026" +
    "\001\002\000\004\121\041\001\002\000\006\007\033\063" +
    "\034\001\002\000\004\060\027\001\002\000\016\007\012" +
    "\010\020\012\006\016\004\021\021\121\015\001\002\000" +
    "\020\007\012\010\020\012\006\016\004\021\021\061\031" +
    "\121\015\001\002\000\022\002\ufff4\007\ufff4\010\ufff4\012" +
    "\ufff4\016\ufff4\021\ufff4\061\ufff4\121\ufff4\001\002\000\022" +
    "\002\ufffe\007\ufffe\010\ufffe\012\ufffe\016\ufffe\021\ufffe\061" +
    "\ufffe\121\ufffe\001\002\000\004\121\040\001\002\000\004" +
    "\060\035\001\002\000\016\007\012\010\020\012\006\016" +
    "\004\021\021\121\015\001\002\000\020\007\012\010\020" +
    "\012\006\016\004\021\021\061\037\121\015\001\002\000" +
    "\022\002\ufff5\007\ufff5\010\ufff5\012\ufff5\016\ufff5\021\ufff5" +
    "\061\ufff5\121\ufff5\001\002\000\006\007\ufff1\063\ufff1\001" +
    "\002\000\006\007\ufff0\063\ufff0\001\002\000\020\004\045" +
    "\062\046\070\043\112\052\120\044\121\050\122\047\001" +
    "\002\000\020\004\045\062\046\070\043\112\052\120\044" +
    "\121\050\122\047\001\002\000\056\061\uffc4\063\uffc4\065" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\121" +
    "\075\117\102\uffc4\103\uffc4\104\uffc4\105\uffc4\106\uffc4\107" +
    "\uffc4\110\uffc4\111\uffc4\113\uffc4\114\uffc4\115\uffc4\117\uffc4" +
    "\001\002\000\052\061\uffc1\063\uffc1\065\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\102\uffc1\103\uffc1\104\uffc1" +
    "\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\113\uffc1\114" +
    "\uffc1\115\uffc1\117\uffc1\001\002\000\020\004\045\062\046" +
    "\070\043\112\052\120\044\121\050\122\047\001\002\000" +
    "\052\061\uffc3\063\uffc3\065\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106" +
    "\uffc3\107\uffc3\110\uffc3\111\uffc3\113\uffc3\114\uffc3\115\uffc3" +
    "\117\uffc3\001\002\000\064\061\uffc8\062\116\063\uffc8\064" +
    "\120\065\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\121\075\117\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106" +
    "\uffc8\107\uffc8\110\uffc8\111\uffc8\113\uffc8\114\uffc8\115\uffc8" +
    "\116\122\117\uffc8\001\002\000\052\061\uffc2\063\uffc2\065" +
    "\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\102\uffc2" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111" +
    "\uffc2\113\uffc2\114\uffc2\115\uffc2\117\uffc2\001\002\000\020" +
    "\004\045\062\046\070\043\112\052\120\044\121\050\122" +
    "\047\001\002\000\040\063\070\067\064\070\054\071\067" +
    "\072\065\073\060\102\072\103\066\104\062\105\057\106" +
    "\056\107\061\110\055\111\071\117\063\001\002\000\020" +
    "\004\045\062\046\070\043\112\052\120\044\121\050\122" +
    "\047\001\002\000\020\004\045\062\046\070\043\112\052" +
    "\120\044\121\050\122\047\001\002\000\020\004\045\062" +
    "\046\070\043\112\052\120\044\121\050\122\047\001\002" +
    "\000\020\004\045\062\046\070\043\112\052\120\044\121" +
    "\050\122\047\001\002\000\020\004\045\062\046\070\043" +
    "\112\052\120\044\121\050\122\047\001\002\000\020\004" +
    "\045\062\046\070\043\112\052\120\044\121\050\122\047" +
    "\001\002\000\020\004\045\062\046\070\043\112\052\120" +
    "\044\121\050\122\047\001\002\000\020\004\045\062\046" +
    "\070\043\112\052\120\044\121\050\122\047\001\002\000" +
    "\020\004\045\062\046\070\043\112\052\120\044\121\050" +
    "\122\047\001\002\000\020\004\045\062\046\070\043\112" +
    "\052\120\044\121\050\122\047\001\002\000\020\004\045" +
    "\062\046\070\043\112\052\120\044\121\050\122\047\001" +
    "\002\000\020\004\045\062\046\070\043\112\052\120\044" +
    "\121\050\122\047\001\002\000\004\114\075\001\002\000" +
    "\020\004\045\062\046\070\043\112\052\120\044\121\050" +
    "\122\047\001\002\000\020\004\045\062\046\070\043\112" +
    "\052\120\044\121\050\122\047\001\002\000\052\061\uffd7" +
    "\063\uffd7\065\uffd7\067\064\070\054\071\067\072\065\073" +
    "\060\102\uffd7\103\uffd7\104\uffd7\105\uffd7\106\uffd7\107\uffd7" +
    "\110\uffd7\111\uffd7\113\uffd7\114\uffd7\115\uffd7\117\uffd7\001" +
    "\002\000\052\061\uffda\063\uffda\065\uffda\067\064\070\054" +
    "\071\067\072\065\073\060\102\072\103\066\104\062\105" +
    "\057\106\056\107\061\110\055\111\uffda\113\uffda\114\uffda" +
    "\115\uffda\117\uffda\001\002\000\022\002\ufffa\007\ufffa\010" +
    "\ufffa\012\ufffa\016\ufffa\021\ufffa\061\ufffa\121\ufffa\001\002" +
    "\000\052\061\uffcf\063\uffcf\065\uffcf\067\uffcf\070\uffcf\071" +
    "\uffcf\072\uffcf\073\060\102\uffcf\103\uffcf\104\uffcf\105\uffcf" +
    "\106\uffcf\107\uffcf\110\uffcf\111\uffcf\113\uffcf\114\uffcf\115" +
    "\uffcf\117\uffcf\001\002\000\052\061\uffd6\063\uffd6\065\uffd6" +
    "\067\064\070\054\071\067\072\065\073\060\102\uffd6\103" +
    "\uffd6\104\uffd6\105\uffd6\106\uffd6\107\uffd6\110\uffd6\111\uffd6" +
    "\113\uffd6\114\uffd6\115\uffd6\117\uffd6\001\002\000\052\061" +
    "\uffce\063\uffce\065\uffce\067\uffce\070\uffce\071\uffce\072\uffce" +
    "\073\060\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107" +
    "\uffce\110\uffce\111\uffce\113\uffce\114\uffce\115\uffce\117\uffce" +
    "\001\002\000\052\061\uffd1\063\uffd1\065\uffd1\067\uffd1\070" +
    "\uffd1\071\067\072\065\073\060\102\uffd1\103\uffd1\104\uffd1" +
    "\105\uffd1\106\uffd1\107\uffd1\110\uffd1\111\uffd1\113\uffd1\114" +
    "\uffd1\115\uffd1\117\uffd1\001\002\000\040\067\064\070\054" +
    "\071\067\072\065\073\060\102\072\103\066\104\062\105" +
    "\057\106\056\107\061\110\055\111\071\113\103\117\063" +
    "\001\002\000\020\004\045\062\046\070\043\112\052\120" +
    "\044\121\050\122\047\001\002\000\052\061\uffc5\063\uffc5" +
    "\065\uffc5\067\064\070\054\071\067\072\065\073\060\102" +
    "\072\103\066\104\062\105\057\106\056\107\061\110\055" +
    "\111\071\113\uffc5\114\uffc5\115\uffc5\117\063\001\002\000" +
    "\052\061\uffd5\063\uffd5\065\uffd5\067\064\070\054\071\067" +
    "\072\065\073\060\102\uffd5\103\uffd5\104\uffd5\105\uffd5\106" +
    "\uffd5\107\uffd5\110\uffd5\111\uffd5\113\uffd5\114\uffd5\115\uffd5" +
    "\117\uffd5\001\002\000\052\061\uffd2\063\uffd2\065\uffd2\067" +
    "\064\070\054\071\067\072\065\073\060\102\uffd2\103\uffd2" +
    "\104\uffd2\105\uffd2\106\uffd2\107\uffd2\110\uffd2\111\uffd2\113" +
    "\uffd2\114\uffd2\115\uffd2\117\uffd2\001\002\000\052\061\uffcd" +
    "\063\uffcd\065\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\102\uffcd\103\uffcd\104\uffcd\105\uffcd\106\uffcd\107\uffcd" +
    "\110\uffcd\111\uffcd\113\uffcd\114\uffcd\115\uffcd\117\uffcd\001" +
    "\002\000\052\061\uffd4\063\uffd4\065\uffd4\067\064\070\054" +
    "\071\067\072\065\073\060\102\uffd4\103\uffd4\104\uffd4\105" +
    "\uffd4\106\uffd4\107\uffd4\110\uffd4\111\uffd4\113\uffd4\114\uffd4" +
    "\115\uffd4\117\uffd4\001\002\000\052\061\uffd3\063\uffd3\065" +
    "\uffd3\067\064\070\054\071\067\072\065\073\060\102\uffd3" +
    "\103\uffd3\104\uffd3\105\uffd3\106\uffd3\107\uffd3\110\uffd3\111" +
    "\uffd3\113\uffd3\114\uffd3\115\uffd3\117\uffd3\001\002\000\052" +
    "\061\uffd9\063\uffd9\065\uffd9\067\064\070\054\071\067\072" +
    "\065\073\060\102\072\103\066\104\062\105\057\106\056" +
    "\107\061\110\uffd9\111\uffd9\113\uffd9\114\uffd9\115\uffd9\117" +
    "\uffd9\001\002\000\052\061\uffd0\063\uffd0\065\uffd0\067\uffd0" +
    "\070\uffd0\071\067\072\065\073\060\102\uffd0\103\uffd0\104" +
    "\uffd0\105\uffd0\106\uffd0\107\uffd0\110\uffd0\111\uffd0\113\uffd0" +
    "\114\uffd0\115\uffd0\117\uffd0\001\002\000\052\061\uffd8\063" +
    "\uffd8\065\uffd8\067\064\070\054\071\067\072\065\073\060" +
    "\102\072\103\066\104\062\105\057\106\056\107\061\110" +
    "\uffd8\111\uffd8\113\uffd8\114\uffd8\115\uffd8\117\uffd8\001\002" +
    "\000\052\061\uffcb\063\uffcb\065\uffcb\067\uffcb\070\uffcb\071" +
    "\uffcb\072\uffcb\073\uffcb\102\uffcb\103\uffcb\104\uffcb\105\uffcb" +
    "\106\uffcb\107\uffcb\110\uffcb\111\uffcb\113\uffcb\114\uffcb\115" +
    "\uffcb\117\uffcb\001\002\000\022\004\045\062\046\063\130" +
    "\070\043\112\052\120\044\121\050\122\047\001\002\000" +
    "\052\061\uffbe\063\uffbe\065\uffbe\067\uffbe\070\uffbe\071\uffbe" +
    "\072\uffbe\073\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106" +
    "\uffbe\107\uffbe\110\uffbe\111\uffbe\113\uffbe\114\uffbe\115\uffbe" +
    "\117\uffbe\001\002\000\004\120\125\001\002\000\052\061" +
    "\uffbf\063\uffbf\065\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf\107" +
    "\uffbf\110\uffbf\111\uffbf\113\uffbf\114\uffbf\115\uffbf\117\uffbf" +
    "\001\002\000\004\121\123\001\002\000\056\061\uffc7\063" +
    "\uffc7\065\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\121\075\117\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106" +
    "\uffc7\107\uffc7\110\uffc7\111\uffc7\113\uffc7\114\uffc7\115\uffc7" +
    "\117\uffc7\001\002\000\052\061\uffca\063\uffca\065\uffca\067" +
    "\uffca\070\uffca\071\uffca\072\uffca\073\uffca\102\uffca\103\uffca" +
    "\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\113" +
    "\uffca\114\uffca\115\uffca\117\uffca\001\002\000\004\065\126" +
    "\001\002\000\052\061\uffc6\063\uffc6\065\uffc6\067\uffc6\070" +
    "\uffc6\071\uffc6\072\uffc6\073\uffc6\102\uffc6\103\uffc6\104\uffc6" +
    "\105\uffc6\106\uffc6\107\uffc6\110\uffc6\111\uffc6\113\uffc6\114" +
    "\uffc6\115\uffc6\117\uffc6\001\002\000\006\063\133\115\132" +
    "\001\002\000\052\061\ufff2\063\ufff2\065\ufff2\067\ufff2\070" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\102\ufff2\103\ufff2\104\ufff2" +
    "\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\113\ufff2\114" +
    "\ufff2\115\ufff2\117\ufff2\001\002\000\044\063\uffdb\065\uffdb" +
    "\067\064\070\054\071\067\072\065\073\060\102\072\103" +
    "\066\104\062\105\057\106\056\107\061\110\055\111\071" +
    "\115\uffdb\117\063\001\002\000\020\004\045\062\046\070" +
    "\043\112\052\120\044\121\050\122\047\001\002\000\052" +
    "\061\ufff3\063\ufff3\065\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\110\ufff3\111\ufff3\113\ufff3\114\ufff3\115\ufff3\117" +
    "\ufff3\001\002\000\044\063\uffdc\065\uffdc\067\064\070\054" +
    "\071\067\072\065\073\060\102\072\103\066\104\062\105" +
    "\057\106\056\107\061\110\055\111\071\115\uffdc\117\063" +
    "\001\002\000\040\063\136\067\064\070\054\071\067\072" +
    "\065\073\060\102\072\103\066\104\062\105\057\106\056" +
    "\107\061\110\055\111\071\117\063\001\002\000\052\061" +
    "\uffc0\063\uffc0\065\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107" +
    "\uffc0\110\uffc0\111\uffc0\113\uffc0\114\uffc0\115\uffc0\117\uffc0" +
    "\001\002\000\052\061\uffc9\063\uffc9\065\uffc9\067\uffc9\070" +
    "\uffc9\071\uffc9\072\uffc9\073\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111\uffc9\113\uffc9\114" +
    "\uffc9\115\uffc9\117\uffc9\001\002\000\052\061\uffcc\063\uffcc" +
    "\065\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\102" +
    "\uffcc\103\uffcc\104\uffcc\105\uffcc\106\uffcc\107\uffcc\110\uffcc" +
    "\111\uffcc\113\uffcc\114\uffcc\115\uffcc\117\uffcc\001\002\000" +
    "\022\002\ufff6\007\ufff6\010\ufff6\012\ufff6\016\ufff6\021\ufff6" +
    "\061\ufff6\121\ufff6\001\002\000\020\004\045\062\046\070" +
    "\043\112\052\120\044\121\050\122\047\001\002\000\020" +
    "\004\045\062\046\070\043\112\052\120\044\121\050\122" +
    "\047\001\002\000\020\004\045\062\046\070\043\112\052" +
    "\120\044\121\050\122\047\001\002\000\020\004\045\062" +
    "\046\070\043\112\052\120\044\121\050\122\047\001\002" +
    "\000\020\004\045\062\046\070\043\112\052\120\044\121" +
    "\050\122\047\001\002\000\004\114\uffe6\001\002\000\004" +
    "\114\uffe7\001\002\000\040\067\064\070\054\071\067\072" +
    "\065\073\060\102\072\103\066\104\062\105\057\106\056" +
    "\107\061\110\055\111\071\114\uffe4\117\063\001\002\000" +
    "\040\067\064\070\054\071\067\072\065\073\060\102\072" +
    "\103\066\104\062\105\057\106\056\107\061\110\055\111" +
    "\071\114\uffe5\117\063\001\002\000\040\067\064\070\054" +
    "\071\067\072\065\073\060\102\072\103\066\104\062\105" +
    "\057\106\056\107\061\110\055\111\071\114\uffe8\117\063" +
    "\001\002\000\040\067\064\070\054\071\067\072\065\073" +
    "\060\102\072\103\066\104\062\105\057\106\056\107\061" +
    "\110\055\111\071\114\uffe3\117\063\001\002\000\040\067" +
    "\064\070\054\071\067\072\065\073\060\102\072\103\066" +
    "\104\062\105\057\106\056\107\061\110\055\111\071\114" +
    "\uffe2\117\063\001\002\000\022\002\ufffb\007\ufffb\010\ufffb" +
    "\012\ufffb\016\ufffb\021\ufffb\061\ufffb\121\ufffb\001\002\000" +
    "\006\114\uffee\115\uffee\001\002\000\010\066\161\114\uffed" +
    "\115\uffed\001\002\000\024\004\045\060\162\062\046\064" +
    "\163\070\043\112\052\120\044\121\050\122\047\001\002" +
    "\000\004\121\170\001\002\000\022\004\045\062\046\065" +
    "\166\070\043\112\052\120\044\121\050\122\047\001\002" +
    "\000\042\067\064\070\054\071\067\072\065\073\060\102" +
    "\072\103\066\104\062\105\057\106\056\107\061\110\055" +
    "\111\071\114\uffec\115\uffec\117\063\001\002\000\006\065" +
    "\167\115\132\001\002\000\006\114\uffea\115\uffea\001\002" +
    "\000\006\114\uffe9\115\uffe9\001\002\000\004\113\176\001" +
    "\002\000\006\061\uffe0\115\uffe0\001\002\000\006\061\174" +
    "\115\173\001\002\000\004\121\170\001\002\000\006\114" +
    "\uffeb\115\uffeb\001\002\000\006\061\uffe1\115\uffe1\001\002" +
    "\000\022\004\045\062\046\064\177\070\043\112\052\120" +
    "\044\121\050\122\047\001\002\000\022\004\045\062\046" +
    "\065\202\070\043\112\052\120\044\121\050\122\047\001" +
    "\002\000\042\061\uffdf\067\064\070\054\071\067\072\065" +
    "\073\060\102\072\103\066\104\062\105\057\106\056\107" +
    "\061\110\055\111\071\115\uffdf\117\063\001\002\000\006" +
    "\065\203\115\132\001\002\000\006\061\uffde\115\uffde\001" +
    "\002\000\006\061\uffdd\115\uffdd\001\002\000\004\002\000" +
    "\001\002\000\004\121\160\001\002\000\022\002\ufffc\007" +
    "\ufffc\010\ufffc\012\ufffc\016\ufffc\021\ufffc\061\ufffc\121\ufffc" +
    "\001\002\000\006\114\uffef\115\uffef\001\002\000\022\002" +
    "\ufff9\007\ufff9\010\ufff9\012\ufff9\016\ufff9\021\ufff9\061\ufff9" +
    "\121\ufff9\001\002\000\040\067\064\070\054\071\067\072" +
    "\065\073\060\102\072\103\066\104\062\105\057\106\056" +
    "\107\061\110\055\111\071\114\212\117\063\001\002\000" +
    "\022\002\ufff8\007\ufff8\010\ufff8\012\ufff8\016\ufff8\021\ufff8" +
    "\061\ufff8\121\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\210\000\022\002\010\003\015\004\004\005\007\006" +
    "\013\007\016\010\006\012\012\001\001\000\006\007\050" +
    "\013\210\001\001\000\014\005\031\006\013\007\016\010" +
    "\006\012\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\027\005\007\006\013\007\016\010\006\012\012" +
    "\001\001\000\014\005\031\006\013\007\016\010\006\012" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\035\005\007\006" +
    "\013\007\016\010\006\012\012\001\001\000\014\005\031" +
    "\006\013\007\016\010\006\012\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\050" +
    "\013\052\001\001\000\006\007\050\013\137\001\001\000" +
    "\004\015\136\001\001\000\002\001\001\000\006\007\050" +
    "\013\134\001\001\000\002\001\001\000\004\015\114\001" +
    "\001\000\002\001\001\000\006\007\050\013\113\001\001" +
    "\000\002\001\001\000\006\007\050\013\112\001\001\000" +
    "\006\007\050\013\111\001\001\000\006\007\050\013\110" +
    "\001\001\000\006\007\050\013\107\001\001\000\006\007" +
    "\050\013\106\001\001\000\006\007\050\013\105\001\001" +
    "\000\006\007\050\013\104\001\001\000\006\007\050\013" +
    "\101\001\001\000\006\007\050\013\100\001\001\000\006" +
    "\007\050\013\077\001\001\000\006\007\050\013\076\001" +
    "\001\000\006\007\050\013\075\001\001\000\002\001\001" +
    "\000\006\007\050\013\073\001\001\000\006\007\050\013" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\050" +
    "\013\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\050\013\130\017\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\050" +
    "\013\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\050\013\154\001" +
    "\001\000\006\007\050\013\153\001\001\000\006\007\050" +
    "\013\152\001\001\000\006\007\050\013\151\001\001\000" +
    "\006\007\050\013\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\050\013" +
    "\163\001\001\000\006\014\170\020\171\001\001\000\010" +
    "\007\050\013\130\017\164\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\050\013\177\001\001\000\010\007\050\013\130\017" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DecInc ::= MINUSMINUS 
            {
              nodo RESULT =null;
		 RESULT = new num("-1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecInc",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DecInc ::= PLUSPLUS 
            {
              nodo RESULT =null;
		 RESULT = new num("1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecInc",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= call_f 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E Q E COLON E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new inline_if(c, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= ID DOT ID 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(f, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= NUM DecInc 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(new num(e), d, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= ID DOT ID DecInc 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_aumento(f, e, (int)d.val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= ID DecInc 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new aumento(e, (int)d.val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "u-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Obj_a ::= ID COLON LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_a_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Obj_a ::= ID COLON LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Obj_a_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Obj_a ::= ID COLON E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_a(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // l_Obj_a ::= Obj_a 
            {
              LinkedList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(o);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // l_Obj_a ::= l_Obj_a COMMA Obj_a 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(o);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asign ::= ID DIVEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asign ::= ID TIMESEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Asign ::= ID MINUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asign ::= ID PLUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Asign ::= ID MINUSMINUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(i, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Asign ::= ID PLUSPLUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Asign ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_ ::= ID EQ LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new dec_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_ ::= ID EQ LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new dec_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dec_ ::= ID EQ LCURL l_Obj_a RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dec_ ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Dec_ ::= ID 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Dec ::= VAR Dec_ 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Dec ::= Dec COMMA Dec_ 
            {
              nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new l_dec(l, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // l_para ::= VAR ID 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // l_para ::= l_para VAR ID 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(i);
                                                                                   RESULT = l; 
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // call_f ::= ID LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // call_f ::= ID LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Func ::= FUNCION ID LPAR RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Func ::= FUNCION ID LPAR l_para RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, l, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // As ::= call_f SEMI 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // As ::= Func 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // As ::= RETORNAR E SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new retornar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // As ::= DETENER SEMI 
            {
              nodo RESULT =null;
		 RESULT = new detener(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // As ::= IMPRIMIR LPAR E RPAR SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new imprimir(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // As ::= Asign SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // As ::= Dec SEMI 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= As 
            {
              nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A As 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new a_l(a, as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= A 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ambient(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

