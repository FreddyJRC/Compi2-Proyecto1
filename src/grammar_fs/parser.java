
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 07 21:15:03 CST 2019
//----------------------------------------------------

package grammar_fs;

import interpreter_fs.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 07 21:15:03 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\006" +
    "\012\000\002\006\011\000\002\007\006\000\002\007\005" +
    "\000\002\025\006\000\002\025\004\000\002\010\005\000" +
    "\002\010\004\000\002\011\003\000\002\011\005\000\002" +
    "\011\007\000\002\011\006\000\002\011\007\000\002\012" +
    "\005\000\002\012\010\000\002\012\007\000\002\012\012" +
    "\000\002\012\004\000\002\012\004\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\027\005\000\002\027\003\000\002\014\005\000\002\014" +
    "\006\000\002\014\007\000\002\016\011\000\002\016\012" +
    "\000\002\017\013\000\002\017\012\000\002\017\003\000" +
    "\002\020\006\000\002\021\011\000\002\030\011\000\002" +
    "\030\010\000\002\030\007\000\002\022\007\000\002\022" +
    "\011\000\002\022\007\000\002\022\011\000\002\022\007" +
    "\000\002\022\011\000\002\026\005\000\002\026\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\004\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\006\000\002\013\007\000\002\013" +
    "\011\000\002\013\004\000\002\013\007\000\002\013\011" +
    "\000\002\013\007\000\002\013\011\000\002\013\007\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\006\000\002\013\010\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\005\000" +
    "\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\022\007\025\010\007\012\022\013\006\016" +
    "\016\017\020\021\026\121\013\001\002\000\004\114\357" +
    "\001\002\000\004\002\356\001\002\000\004\062\334\001" +
    "\002\000\004\062\330\001\002\000\026\002\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\021\ufff4\061" +
    "\ufff4\121\ufff4\001\002\000\026\002\ufff5\007\ufff5\010\ufff5" +
    "\012\ufff5\013\ufff5\016\ufff5\017\ufff5\021\ufff5\061\ufff5\121" +
    "\ufff5\001\002\000\004\002\001\001\002\000\026\062\137" +
    "\064\262\066\256\074\253\075\263\076\255\077\257\100" +
    "\261\101\254\116\260\001\002\000\026\002\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\021\ufff7\061" +
    "\ufff7\121\ufff7\001\002\000\024\002\uffff\007\025\010\007" +
    "\012\022\013\006\016\016\017\020\021\026\121\013\001" +
    "\002\000\024\004\057\005\064\006\055\062\060\070\054" +
    "\112\067\120\053\121\063\122\061\001\002\000\026\002" +
    "\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\016\ufffd\017\ufffd" +
    "\021\ufffd\061\ufffd\121\ufffd\001\002\000\004\062\225\001" +
    "\002\000\004\114\224\001\002\000\004\114\223\001\002" +
    "\000\006\114\221\115\220\001\002\000\004\114\217\001" +
    "\002\000\004\121\051\001\002\000\004\121\027\001\002" +
    "\000\004\062\030\001\002\000\006\007\031\063\033\001" +
    "\002\000\004\121\047\001\002\000\006\063\041\115\040" +
    "\001\002\000\004\060\034\001\002\000\022\007\025\010" +
    "\007\012\022\013\006\016\016\017\020\021\026\121\013" +
    "\001\002\000\024\007\025\010\007\012\022\013\006\016" +
    "\016\017\020\021\026\061\036\121\013\001\002\000\026" +
    "\002\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\016\ufff1\017" +
    "\ufff1\021\ufff1\061\ufff1\121\ufff1\001\002\000\026\002\ufffe" +
    "\007\ufffe\010\ufffe\012\ufffe\013\ufffe\016\ufffe\017\ufffe\021" +
    "\ufffe\061\ufffe\121\ufffe\001\002\000\004\007\045\001\002" +
    "\000\004\060\042\001\002\000\022\007\025\010\007\012" +
    "\022\013\006\016\016\017\020\021\026\121\013\001\002" +
    "\000\024\007\025\010\007\012\022\013\006\016\016\017" +
    "\020\021\026\061\044\121\013\001\002\000\026\002\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\013\ufff2\016\ufff2\017\ufff2\021" +
    "\ufff2\061\ufff2\121\ufff2\001\002\000\004\121\046\001\002" +
    "\000\006\063\uffee\115\uffee\001\002\000\006\063\uffed\115" +
    "\uffed\001\002\000\006\114\uffeb\115\uffeb\001\002\000\010" +
    "\066\052\114\uffea\115\uffea\001\002\000\030\004\057\005" +
    "\064\006\055\060\062\062\060\064\070\070\054\112\067" +
    "\120\053\121\063\122\061\001\002\000\056\061\uffa3\063" +
    "\uffa3\065\uffa3\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3" +
    "\074\156\075\155\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106" +
    "\uffa3\107\uffa3\110\uffa3\111\uffa3\113\uffa3\114\uffa3\115\uffa3" +
    "\117\uffa3\001\002\000\024\004\057\005\064\006\055\062" +
    "\060\070\054\112\067\120\053\121\063\122\061\001\002" +
    "\000\052\061\uff9f\063\uff9f\065\uff9f\067\uff9f\070\uff9f\071" +
    "\uff9f\072\uff9f\073\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f" +
    "\106\uff9f\107\uff9f\110\uff9f\111\uff9f\113\uff9f\114\uff9f\115" +
    "\uff9f\117\uff9f\001\002\000\052\061\uffa9\063\uffa9\065\uffa9" +
    "\067\uffa9\070\uffa9\071\uffa9\072\uffa9\073\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\113\uffa9\114\uffa9\115\uffa9\117\uffa9\001\002\000\052\061" +
    "\uffa1\063\uffa1\065\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1" +
    "\073\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107" +
    "\uffa1\110\uffa1\111\uffa1\113\uffa1\114\uffa1\115\uffa1\117\uffa1" +
    "\001\002\000\024\004\057\005\064\006\055\062\060\070" +
    "\054\112\067\120\053\121\063\122\061\001\002\000\052" +
    "\061\uffa2\063\uffa2\065\uffa2\067\uffa2\070\uffa2\071\uffa2\072" +
    "\uffa2\073\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2" +
    "\107\uffa2\110\uffa2\111\uffa2\113\uffa2\114\uffa2\115\uffa2\117" +
    "\uffa2\001\002\000\004\121\177\001\002\000\064\061\uffa8" +
    "\062\137\063\uffa8\064\140\065\uffa8\067\uffa8\070\uffa8\071" +
    "\uffa8\072\uffa8\073\uffa8\074\142\075\141\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\113" +
    "\uffa8\114\uffa8\115\uffa8\116\143\117\uffa8\001\002\000\052" +
    "\061\uffa0\063\uffa0\065\uffa0\067\uffa0\070\uffa0\071\uffa0\072" +
    "\uffa0\073\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0" +
    "\107\uffa0\110\uffa0\111\uffa0\113\uffa0\114\uffa0\115\uffa0\117" +
    "\uffa0\001\002\000\052\061\uffaa\063\uffaa\065\uffaa\067\uffaa" +
    "\070\uffaa\071\uffaa\072\uffaa\073\uffaa\102\uffaa\103\uffaa\104" +
    "\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa\113\uffaa" +
    "\114\uffaa\115\uffaa\117\uffaa\001\002\000\052\061\uffa4\063" +
    "\uffa4\065\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4" +
    "\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106\uffa4\107\uffa4\110" +
    "\uffa4\111\uffa4\113\uffa4\114\uffa4\115\uffa4\117\uffa4\001\002" +
    "\000\024\004\057\005\064\006\055\062\060\070\054\112" +
    "\067\120\053\121\063\122\061\001\002\000\026\004\057" +
    "\005\064\006\055\062\060\065\131\070\054\112\067\120" +
    "\053\121\063\122\061\001\002\000\042\067\102\070\072" +
    "\071\104\072\103\073\076\102\107\103\105\104\100\105" +
    "\074\106\075\107\077\110\073\111\106\114\uffe9\115\uffe9" +
    "\117\101\001\002\000\024\004\057\005\064\006\055\062" +
    "\060\070\054\112\067\120\053\121\063\122\061\001\002" +
    "\000\024\004\057\005\064\006\055\062\060\070\054\112" +
    "\067\120\053\121\063\122\061\001\002\000\024\004\057" +
    "\005\064\006\055\062\060\070\054\112\067\120\053\121" +
    "\063\122\061\001\002\000\024\004\057\005\064\006\055" +
    "\062\060\070\054\112\067\120\053\121\063\122\061\001" +
    "\002\000\024\004\057\005\064\006\055\062\060\070\054" +
    "\112\067\120\053\121\063\122\061\001\002\000\024\004" +
    "\057\005\064\006\055\062\060\070\054\112\067\120\053" +
    "\121\063\122\061\001\002\000\024\004\057\005\064\006" +
    "\055\062\060\070\054\112\067\120\053\121\063\122\061" +
    "\001\002\000\024\004\057\005\064\006\055\062\060\070" +
    "\054\112\067\120\053\121\063\122\061\001\002\000\024" +
    "\004\057\005\064\006\055\062\060\070\054\112\067\120" +
    "\053\121\063\122\061\001\002\000\024\004\057\005\064" +
    "\006\055\062\060\070\054\112\067\120\053\121\063\122" +
    "\061\001\002\000\024\004\057\005\064\006\055\062\060" +
    "\070\054\112\067\120\053\121\063\122\061\001\002\000" +
    "\024\004\057\005\064\006\055\062\060\070\054\112\067" +
    "\120\053\121\063\122\061\001\002\000\024\004\057\005" +
    "\064\006\055\062\060\070\054\112\067\120\053\121\063" +
    "\122\061\001\002\000\024\004\057\005\064\006\055\062" +
    "\060\070\054\112\067\120\053\121\063\122\061\001\002" +
    "\000\052\061\uffc1\063\uffc1\065\uffc1\067\102\070\072\071" +
    "\104\072\103\073\076\102\uffc1\103\uffc1\104\uffc1\105\uffc1" +
    "\106\uffc1\107\uffc1\110\uffc1\111\uffc1\113\uffc1\114\uffc1\115" +
    "\uffc1\117\uffc1\001\002\000\052\061\uffc4\063\uffc4\065\uffc4" +
    "\067\102\070\072\071\104\072\103\073\076\102\107\103" +
    "\105\104\100\105\074\106\075\107\077\110\073\111\uffc4" +
    "\113\uffc4\114\uffc4\115\uffc4\117\uffc4\001\002\000\052\061" +
    "\uffc0\063\uffc0\065\uffc0\067\102\070\072\071\104\072\103" +
    "\073\076\102\uffc0\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107" +
    "\uffc0\110\uffc0\111\uffc0\113\uffc0\114\uffc0\115\uffc0\117\uffc0" +
    "\001\002\000\052\061\uffb9\063\uffb9\065\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\076\102\uffb9\103\uffb9\104\uffb9" +
    "\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\113\uffb9\114" +
    "\uffb9\115\uffb9\117\uffb9\001\002\000\052\061\uffb8\063\uffb8" +
    "\065\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\076\102" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8" +
    "\111\uffb8\113\uffb8\114\uffb8\115\uffb8\117\uffb8\001\002\000" +
    "\052\061\uffbb\063\uffbb\065\uffbb\067\uffbb\070\uffbb\071\104" +
    "\072\103\073\076\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106" +
    "\uffbb\107\uffbb\110\uffbb\111\uffbb\113\uffbb\114\uffbb\115\uffbb" +
    "\117\uffbb\001\002\000\040\067\102\070\072\071\104\072" +
    "\103\073\076\102\107\103\105\104\100\105\074\106\075" +
    "\107\077\110\073\111\106\113\117\117\101\001\002\000" +
    "\024\004\057\005\064\006\055\062\060\070\054\112\067" +
    "\120\053\121\063\122\061\001\002\000\052\061\uffab\063" +
    "\uffab\065\uffab\067\102\070\072\071\104\072\103\073\076" +
    "\102\107\103\105\104\100\105\074\106\075\107\077\110" +
    "\073\111\106\113\uffab\114\uffab\115\uffab\117\101\001\002" +
    "\000\052\061\uffbf\063\uffbf\065\uffbf\067\102\070\072\071" +
    "\104\072\103\073\076\102\uffbf\103\uffbf\104\uffbf\105\uffbf" +
    "\106\uffbf\107\uffbf\110\uffbf\111\uffbf\113\uffbf\114\uffbf\115" +
    "\uffbf\117\uffbf\001\002\000\052\061\uffbc\063\uffbc\065\uffbc" +
    "\067\102\070\072\071\104\072\103\073\076\102\107\103" +
    "\105\104\100\105\074\106\uffbc\107\uffbc\110\uffbc\111\uffbc" +
    "\113\uffbc\114\uffbc\115\uffbc\117\uffbc\001\002\000\052\061" +
    "\uffb7\063\uffb7\065\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7" +
    "\073\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107" +
    "\uffb7\110\uffb7\111\uffb7\113\uffb7\114\uffb7\115\uffb7\117\uffb7" +
    "\001\002\000\052\061\uffbd\063\uffbd\065\uffbd\067\102\070" +
    "\072\071\104\072\103\073\076\102\107\103\105\104\100" +
    "\105\074\106\uffbd\107\uffbd\110\uffbd\111\uffbd\113\uffbd\114" +
    "\uffbd\115\uffbd\117\uffbd\001\002\000\052\061\uffbe\063\uffbe" +
    "\065\uffbe\067\102\070\072\071\104\072\103\073\076\102" +
    "\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe\110\uffbe" +
    "\111\uffbe\113\uffbe\114\uffbe\115\uffbe\117\uffbe\001\002\000" +
    "\052\061\uffc3\063\uffc3\065\uffc3\067\102\070\072\071\104" +
    "\072\103\073\076\102\107\103\105\104\100\105\074\106" +
    "\075\107\077\110\uffc3\111\uffc3\113\uffc3\114\uffc3\115\uffc3" +
    "\117\uffc3\001\002\000\052\061\uffba\063\uffba\065\uffba\067" +
    "\uffba\070\uffba\071\104\072\103\073\076\102\uffba\103\uffba" +
    "\104\uffba\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\113" +
    "\uffba\114\uffba\115\uffba\117\uffba\001\002\000\006\065\133" +
    "\115\134\001\002\000\006\114\uffe7\115\uffe7\001\002\000" +
    "\044\063\uffc5\065\uffc5\067\102\070\072\071\104\072\103" +
    "\073\076\102\107\103\105\104\100\105\074\106\075\107" +
    "\077\110\073\111\106\115\uffc5\117\101\001\002\000\006" +
    "\114\uffe6\115\uffe6\001\002\000\024\004\057\005\064\006" +
    "\055\062\060\070\054\112\067\120\053\121\063\122\061" +
    "\001\002\000\044\063\uffc6\065\uffc6\067\102\070\072\071" +
    "\104\072\103\073\076\102\107\103\105\104\100\105\074" +
    "\106\075\107\077\110\073\111\106\115\uffc6\117\101\001" +
    "\002\000\052\061\uffc2\063\uffc2\065\uffc2\067\102\070\072" +
    "\071\104\072\103\073\076\102\107\103\105\104\100\105" +
    "\074\106\075\107\077\110\uffc2\111\uffc2\113\uffc2\114\uffc2" +
    "\115\uffc2\117\uffc2\001\002\000\026\004\057\005\064\006" +
    "\055\062\060\063\175\070\054\112\067\120\053\121\063" +
    "\122\061\001\002\000\004\120\171\001\002\000\052\061" +
    "\uffb4\063\uffb4\065\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\113\uffb4\114\uffb4\115\uffb4\117\uffb4" +
    "\001\002\000\052\061\uffb5\063\uffb5\065\uffb5\067\uffb5\070" +
    "\uffb5\071\uffb5\072\uffb5\073\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5\113\uffb5\114" +
    "\uffb5\115\uffb5\117\uffb5\001\002\000\010\026\145\027\146" +
    "\121\144\001\002\000\062\061\uffa7\063\uffa7\064\154\065" +
    "\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\156" +
    "\075\155\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7\107" +
    "\uffa7\110\uffa7\111\uffa7\113\uffa7\114\uffa7\115\uffa7\116\157" +
    "\117\uffa7\001\002\000\004\062\151\001\002\000\004\062" +
    "\147\001\002\000\004\063\150\001\002\000\052\061\uffad" +
    "\063\uffad\065\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073" +
    "\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107\uffad" +
    "\110\uffad\111\uffad\113\uffad\114\uffad\115\uffad\117\uffad\001" +
    "\002\000\004\063\152\001\002\000\052\061\uffaf\063\uffaf" +
    "\065\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\102" +
    "\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf" +
    "\111\uffaf\113\uffaf\114\uffaf\115\uffaf\117\uffaf\001\002\000" +
    "\052\061\uffb3\063\uffb3\065\uffb3\067\uffb3\070\uffb3\071\uffb3" +
    "\072\uffb3\073\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106" +
    "\uffb3\107\uffb3\110\uffb3\111\uffb3\113\uffb3\114\uffb3\115\uffb3" +
    "\117\uffb3\001\002\000\004\120\166\001\002\000\052\061" +
    "\uff9c\063\uff9c\065\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\073\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107" +
    "\uff9c\110\uff9c\111\uff9c\113\uff9c\114\uff9c\115\uff9c\117\uff9c" +
    "\001\002\000\052\061\uff9d\063\uff9d\065\uff9d\067\uff9d\070" +
    "\uff9d\071\uff9d\072\uff9d\073\uff9d\102\uff9d\103\uff9d\104\uff9d" +
    "\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\113\uff9d\114" +
    "\uff9d\115\uff9d\117\uff9d\001\002\000\006\026\160\027\161" +
    "\001\002\000\004\062\164\001\002\000\004\062\162\001" +
    "\002\000\004\063\163\001\002\000\052\061\uffac\063\uffac" +
    "\065\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\102" +
    "\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\uffac" +
    "\111\uffac\113\uffac\114\uffac\115\uffac\117\uffac\001\002\000" +
    "\004\063\165\001\002\000\052\061\uffae\063\uffae\065\uffae" +
    "\067\uffae\070\uffae\071\uffae\072\uffae\073\uffae\102\uffae\103" +
    "\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111\uffae" +
    "\113\uffae\114\uffae\115\uffae\117\uffae\001\002\000\004\065" +
    "\167\001\002\000\056\061\uffa5\063\uffa5\065\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\156\075\155\102" +
    "\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5" +
    "\111\uffa5\113\uffa5\114\uffa5\115\uffa5\117\uffa5\001\002\000" +
    "\052\061\uffb1\063\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106" +
    "\uffb1\107\uffb1\110\uffb1\111\uffb1\113\uffb1\114\uffb1\115\uffb1" +
    "\117\uffb1\001\002\000\004\065\172\001\002\000\056\061" +
    "\uffa6\063\uffa6\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6" +
    "\073\uffa6\074\156\075\155\102\uffa6\103\uffa6\104\uffa6\105" +
    "\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6\113\uffa6\114\uffa6" +
    "\115\uffa6\117\uffa6\001\002\000\052\061\uffb2\063\uffb2\065" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\102\uffb2" +
    "\103\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111" +
    "\uffb2\113\uffb2\114\uffb2\115\uffb2\117\uffb2\001\002\000\006" +
    "\063\176\115\134\001\002\000\052\061\uffef\063\uffef\065" +
    "\uffef\067\uffef\070\uffef\071\uffef\072\uffef\073\uffef\102\uffef" +
    "\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110\uffef\111" +
    "\uffef\113\uffef\114\uffef\115\uffef\117\uffef\001\002\000\052" +
    "\061\ufff0\063\ufff0\065\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0" +
    "\107\ufff0\110\ufff0\111\ufff0\113\ufff0\114\ufff0\115\ufff0\117" +
    "\ufff0\001\002\000\004\113\205\001\002\000\006\061\uffda" +
    "\115\uffda\001\002\000\006\061\203\115\202\001\002\000" +
    "\004\121\177\001\002\000\006\114\uffe8\115\uffe8\001\002" +
    "\000\006\061\uffdb\115\uffdb\001\002\000\026\004\057\005" +
    "\064\006\055\062\060\064\206\070\054\112\067\120\053" +
    "\121\063\122\061\001\002\000\026\004\057\005\064\006" +
    "\055\062\060\065\211\070\054\112\067\120\053\121\063" +
    "\122\061\001\002\000\042\061\uffd9\067\102\070\072\071" +
    "\104\072\103\073\076\102\107\103\105\104\100\105\074" +
    "\106\075\107\077\110\073\111\106\115\uffd9\117\101\001" +
    "\002\000\006\065\212\115\134\001\002\000\006\061\uffd8" +
    "\115\uffd8\001\002\000\006\061\uffd7\115\uffd7\001\002\000" +
    "\040\063\214\067\102\070\072\071\104\072\103\073\076" +
    "\102\107\103\105\104\100\105\074\106\075\107\077\110" +
    "\073\111\106\117\101\001\002\000\052\061\uff9e\063\uff9e" +
    "\065\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\102" +
    "\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e" +
    "\111\uff9e\113\uff9e\114\uff9e\115\uff9e\117\uff9e\001\002\000" +
    "\052\061\uffb6\063\uffb6\065\uffb6\067\uffb6\070\uffb6\071\uffb6" +
    "\072\uffb6\073\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106" +
    "\uffb6\107\uffb6\110\uffb6\111\uffb6\113\uffb6\114\uffb6\115\uffb6" +
    "\117\uffb6\001\002\000\052\061\uffb0\063\uffb0\065\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\102\uffb0\103\uffb0" +
    "\104\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\111\uffb0\113" +
    "\uffb0\114\uffb0\115\uffb0\117\uffb0\001\002\000\026\002\ufff6" +
    "\007\ufff6\010\ufff6\012\ufff6\013\ufff6\016\ufff6\017\ufff6\021" +
    "\ufff6\061\ufff6\121\ufff6\001\002\000\004\121\051\001\002" +
    "\000\026\002\ufffc\007\ufffc\010\ufffc\012\ufffc\013\ufffc\016" +
    "\ufffc\017\ufffc\021\ufffc\061\ufffc\121\ufffc\001\002\000\006" +
    "\114\uffec\115\uffec\001\002\000\026\002\ufff9\007\ufff9\010" +
    "\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\021\ufff9\061\ufff9" +
    "\121\ufff9\001\002\000\026\002\ufff3\007\ufff3\010\ufff3\012" +
    "\ufff3\013\ufff3\016\ufff3\017\ufff3\021\ufff3\061\ufff3\121\ufff3" +
    "\001\002\000\024\004\057\005\064\006\055\062\060\070" +
    "\054\112\067\120\053\121\063\122\061\001\002\000\040" +
    "\063\227\067\102\070\072\071\104\072\103\073\076\102" +
    "\107\103\105\104\100\105\074\106\075\107\077\110\073" +
    "\111\106\117\101\001\002\000\004\060\230\001\002\000" +
    "\022\007\025\010\007\012\022\013\006\016\016\017\020" +
    "\021\026\121\013\001\002\000\024\007\025\010\007\012" +
    "\022\013\006\016\016\017\020\021\026\061\232\121\013" +
    "\001\002\000\030\002\uffd6\007\uffd6\010\uffd6\012\uffd6\013" +
    "\uffd6\016\uffd6\017\uffd6\020\235\021\uffd6\061\uffd6\121\uffd6" +
    "\001\002\000\026\002\uffd2\007\uffd2\010\uffd2\012\uffd2\013" +
    "\uffd2\016\uffd2\017\uffd2\021\uffd2\061\uffd2\121\uffd2\001\002" +
    "\000\026\002\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\016" +
    "\uffd5\017\uffd5\021\uffd5\061\uffd5\121\uffd5\001\002\000\006" +
    "\017\237\060\236\001\002\000\022\007\025\010\007\012" +
    "\022\013\006\016\016\017\020\021\026\121\013\001\002" +
    "\000\004\062\240\001\002\000\024\004\057\005\064\006" +
    "\055\062\060\070\054\112\067\120\053\121\063\122\061" +
    "\001\002\000\040\063\242\067\102\070\072\071\104\072" +
    "\103\073\076\102\107\103\105\104\100\105\074\106\075" +
    "\107\077\110\073\111\106\117\101\001\002\000\004\060" +
    "\243\001\002\000\022\007\025\010\007\012\022\013\006" +
    "\016\016\017\020\021\026\121\013\001\002\000\024\007" +
    "\025\010\007\012\022\013\006\016\016\017\020\021\026" +
    "\061\245\121\013\001\002\000\030\002\uffd3\007\uffd3\010" +
    "\uffd3\012\uffd3\013\uffd3\016\uffd3\017\uffd3\020\235\021\uffd3" +
    "\061\uffd3\121\uffd3\001\002\000\026\002\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4\021\uffd4\061\uffd4" +
    "\121\uffd4\001\002\000\024\007\025\010\007\012\022\013" +
    "\006\016\016\017\020\021\026\061\250\121\013\001\002" +
    "\000\026\002\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\016" +
    "\uffd1\017\uffd1\021\uffd1\061\uffd1\121\uffd1\001\002\000\040" +
    "\067\102\070\072\071\104\072\103\073\076\102\107\103" +
    "\105\104\100\105\074\106\075\107\077\110\073\111\106" +
    "\114\252\117\101\001\002\000\026\002\ufff8\007\ufff8\010" +
    "\ufff8\012\ufff8\013\ufff8\016\ufff8\017\ufff8\021\ufff8\061\ufff8" +
    "\121\ufff8\001\002\000\004\114\uffe1\001\002\000\024\004" +
    "\057\005\064\006\055\062\060\070\054\112\067\120\053" +
    "\121\063\122\061\001\002\000\024\004\057\005\064\006" +
    "\055\062\060\070\054\112\067\120\053\121\063\122\061" +
    "\001\002\000\024\004\057\005\064\006\055\062\060\070" +
    "\054\112\067\120\053\121\063\122\061\001\002\000\024" +
    "\004\057\005\064\006\055\062\060\070\054\112\067\120" +
    "\053\121\063\122\061\001\002\000\012\022\274\023\271" +
    "\025\273\121\272\001\002\000\024\004\057\005\064\006" +
    "\055\062\060\070\054\112\067\120\053\121\063\122\061" +
    "\001\002\000\004\120\264\001\002\000\004\114\uffe0\001" +
    "\002\000\004\065\265\001\002\000\004\066\266\001\002" +
    "\000\024\004\057\005\064\006\055\062\060\070\054\112" +
    "\067\120\053\121\063\122\061\001\002\000\040\067\102" +
    "\070\072\071\104\072\103\073\076\102\107\103\105\104" +
    "\100\105\074\106\075\107\077\110\073\111\106\114\uffe4" +
    "\117\101\001\002\000\040\067\102\070\072\071\104\072" +
    "\103\073\076\102\107\103\105\104\100\105\074\106\075" +
    "\107\077\110\073\111\106\114\uffdd\117\101\001\002\000" +
    "\004\062\322\001\002\000\010\064\302\066\301\116\303" +
    "\001\002\000\004\062\277\001\002\000\004\062\275\001" +
    "\002\000\004\063\276\001\002\000\004\114\uffcc\001\002" +
    "\000\004\063\300\001\002\000\004\114\uffc8\001\002\000" +
    "\024\004\057\005\064\006\055\062\060\070\054\112\067" +
    "\120\053\121\063\122\061\001\002\000\004\120\315\001" +
    "\002\000\010\022\306\023\304\025\305\001\002\000\004" +
    "\062\313\001\002\000\004\062\311\001\002\000\004\062" +
    "\307\001\002\000\004\063\310\001\002\000\004\114\uffcb" +
    "\001\002\000\004\063\312\001\002\000\004\114\uffc7\001" +
    "\002\000\004\063\314\001\002\000\004\114\uffc9\001\002" +
    "\000\004\065\316\001\002\000\004\066\317\001\002\000" +
    "\024\004\057\005\064\006\055\062\060\070\054\112\067" +
    "\120\053\121\063\122\061\001\002\000\040\067\102\070" +
    "\072\071\104\072\103\073\076\102\107\103\105\104\100" +
    "\105\074\106\075\107\077\110\073\111\106\114\uffe2\117" +
    "\101\001\002\000\040\067\102\070\072\071\104\072\103" +
    "\073\076\102\107\103\105\104\100\105\074\106\075\107" +
    "\077\110\073\111\106\114\uffe3\117\101\001\002\000\004" +
    "\063\323\001\002\000\004\114\uffca\001\002\000\040\067" +
    "\102\070\072\071\104\072\103\073\076\102\107\103\105" +
    "\104\100\105\074\106\075\107\077\110\073\111\106\114" +
    "\uffde\117\101\001\002\000\040\067\102\070\072\071\104" +
    "\072\103\073\076\102\107\103\105\104\100\105\074\106" +
    "\075\107\077\110\073\111\106\114\uffe5\117\101\001\002" +
    "\000\040\067\102\070\072\071\104\072\103\073\076\102" +
    "\107\103\105\104\100\105\074\106\075\107\077\110\073" +
    "\111\106\114\uffdf\117\101\001\002\000\040\067\102\070" +
    "\072\071\104\072\103\073\076\102\107\103\105\104\100" +
    "\105\074\106\075\107\077\110\073\111\106\114\uffdc\117" +
    "\101\001\002\000\024\004\057\005\064\006\055\062\060" +
    "\070\054\112\067\120\053\121\063\122\061\001\002\000" +
    "\040\063\332\067\102\070\072\071\104\072\103\073\076" +
    "\102\107\103\105\104\100\105\074\106\075\107\077\110" +
    "\073\111\106\117\101\001\002\000\004\114\333\001\002" +
    "\000\026\002\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\016" +
    "\ufffa\017\ufffa\021\ufffa\061\ufffa\121\ufffa\001\002\000\024" +
    "\004\057\005\064\006\055\062\060\070\054\112\067\120" +
    "\053\121\063\122\061\001\002\000\040\063\336\067\102" +
    "\070\072\071\104\072\103\073\076\102\107\103\105\104" +
    "\100\105\074\106\075\107\077\110\073\111\106\117\101" +
    "\001\002\000\004\060\337\001\002\000\006\014\342\015" +
    "\340\001\002\000\004\113\352\001\002\000\004\061\351" +
    "\001\002\000\024\004\057\005\064\006\055\062\060\070" +
    "\054\112\067\120\053\121\063\122\061\001\002\000\040" +
    "\067\102\070\072\071\104\072\103\073\076\102\107\103" +
    "\105\104\100\105\074\106\075\107\077\110\073\111\106" +
    "\113\344\117\101\001\002\000\004\060\345\001\002\000" +
    "\022\007\025\010\007\012\022\013\006\016\016\017\020" +
    "\021\026\121\013\001\002\000\024\007\025\010\007\012" +
    "\022\013\006\016\016\017\020\021\026\061\347\121\013" +
    "\001\002\000\010\014\342\015\340\061\uffce\001\002\000" +
    "\004\061\uffcf\001\002\000\026\002\uffd0\007\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0\061\uffd0\121" +
    "\uffd0\001\002\000\004\060\353\001\002\000\022\007\025" +
    "\010\007\012\022\013\006\016\016\017\020\021\026\121" +
    "\013\001\002\000\024\007\025\010\007\012\022\013\006" +
    "\016\016\017\020\021\026\061\355\121\013\001\002\000" +
    "\004\061\uffcd\001\002\000\004\002\000\001\002\000\026" +
    "\002\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\016\ufffb\017" +
    "\ufffb\021\ufffb\061\ufffb\121\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\030\002\004\003\011\004\014\005\016\006" +
    "\013\007\023\010\022\012\003\016\010\021\007\022\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\005\036\006\013\007\023\010\022\012\003\016\010" +
    "\021\007\022\020\001\001\000\012\007\065\013\250\023" +
    "\064\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\004\034" +
    "\005\016\006\013\007\023\010\022\012\003\016\010\021" +
    "\007\022\020\001\001\000\022\005\036\006\013\007\023" +
    "\010\022\012\003\016\010\021\007\022\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\042\005\016\006\013\007\023\010" +
    "\022\012\003\016\010\021\007\022\020\001\001\000\022" +
    "\005\036\006\013\007\023\010\022\012\003\016\010\021" +
    "\007\022\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\065\013\070\023\064\024\055" +
    "\001\001\000\004\015\215\001\001\000\012\007\065\013" +
    "\214\023\064\024\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\065\013\212\023" +
    "\064\024\055\001\001\000\002\001\001\000\006\014\177" +
    "\027\200\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\065\013\135" +
    "\023\064\024\055\001\001\000\014\007\065\013\131\023" +
    "\064\024\055\026\127\001\001\000\002\001\001\000\012" +
    "\007\065\013\126\023\064\024\055\001\001\000\012\007" +
    "\065\013\125\023\064\024\055\001\001\000\012\007\065" +
    "\013\124\023\064\024\055\001\001\000\012\007\065\013" +
    "\123\023\064\024\055\001\001\000\012\007\065\013\122" +
    "\023\064\024\055\001\001\000\012\007\065\013\121\023" +
    "\064\024\055\001\001\000\012\007\065\013\120\023\064" +
    "\024\055\001\001\000\012\007\065\013\115\023\064\024" +
    "\055\001\001\000\012\007\065\013\114\023\064\024\055" +
    "\001\001\000\012\007\065\013\113\023\064\024\055\001" +
    "\001\000\012\007\065\013\112\023\064\024\055\001\001" +
    "\000\012\007\065\013\111\023\064\024\055\001\001\000" +
    "\012\007\065\013\110\023\064\024\055\001\001\000\012" +
    "\007\065\013\107\023\064\024\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\065\013\117\023\064\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\065\013\134" +
    "\023\064\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\065\013\131\023\064\024\055\026\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\152\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\065\013\206\023\064\024\055\001" +
    "\001\000\014\007\065\013\131\023\064\024\055\026\207" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\065\013" +
    "\225\023\064\024\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\230\005\016\006\013\007\023\010" +
    "\022\012\003\016\010\021\007\022\020\001\001\000\022" +
    "\005\036\006\013\007\023\010\022\012\003\016\010\021" +
    "\007\022\020\001\001\000\006\017\233\020\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\246\005\016\006\013\007\023\010\022\012\003" +
    "\016\010\021\007\022\020\001\001\000\002\001\001\000" +
    "\012\007\065\013\240\023\064\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\243\005\016\006" +
    "\013\007\023\010\022\012\003\016\010\021\007\022\020" +
    "\001\001\000\022\005\036\006\013\007\023\010\022\012" +
    "\003\016\010\021\007\022\020\001\001\000\006\017\245" +
    "\020\232\001\001\000\002\001\001\000\022\005\036\006" +
    "\013\007\023\010\022\012\003\016\010\021\007\022\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\007\065\013\326\023\064" +
    "\024\055\001\001\000\012\007\065\013\325\023\064\024" +
    "\055\001\001\000\012\007\065\013\324\023\064\024\055" +
    "\001\001\000\012\007\065\013\323\023\064\024\055\001" +
    "\001\000\002\001\001\000\012\007\065\013\267\023\064" +
    "\024\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\065\013\266" +
    "\023\064\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\007\065\013\320" +
    "\023\064\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\065\013\317\023" +
    "\064\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\065\013\330\023\064\024\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\065" +
    "\013\334\023\064\024\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\065\013\342\023\064\024" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\345\005\016\006\013\007\023\010\022\012\003\016" +
    "\010\021\007\022\020\001\001\000\022\005\036\006\013" +
    "\007\023\010\022\012\003\016\010\021\007\022\020\001" +
    "\001\000\004\030\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\004\353\005\016\006" +
    "\013\007\023\010\022\012\003\016\010\021\007\022\020" +
    "\001\001\000\022\005\036\006\013\007\023\010\022\012" +
    "\003\016\010\021\007\022\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DecInc ::= MINUSMINUS 
            {
              nodo RESULT =null;
		 RESULT = new num("-1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecInc",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DecInc ::= PLUSPLUS 
            {
              nodo RESULT =null;
		 RESULT = new num("1"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecInc",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= FALSO 
            {
              nodo RESULT =null;
		 RESULT = new bool(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= VERDADERO 
            {
              nodo RESULT =null;
		 RESULT = new bool(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= call_f 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= ID DOT ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_getArr(o, e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= ID DOT ID 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(f, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= PRIM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= VAL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E Q E COLON E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new inline_if(c, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= ID DOT ID DOT MINIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Minimo(o, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= ID DOT MINIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Minimo(null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= ID DOT ID DOT MAXIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Maximo(o, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= ID DOT MAXIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Maximo(null, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= NUM DecInc 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(new num(e), d, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= ID DOT ID LBRACK NUM RBRACK DecInc 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_arr_aumento(o, e, Integer.parseInt(i), (int)d.val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= ID LBRACK NUM RBRACK DecInc 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new aumento_Arr(e, Integer.parseInt(i), (int)d.val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= ID DOT ID DecInc 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_aumento(f, e, (int)d.val); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= ID MINUSMINUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= ID PLUSPLUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "u-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARR_FN ::= ID DOT ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARR_FN ::= ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARR_FN ::= ID DOT ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARR_FN ::= ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARR_FN ::= ID DOT ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARR_FN ::= ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE ::= DEFECTO COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(null, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASE ::= CASO E COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASE ::= CASO E COLON LCURL A RCURL CASE 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   tmp.addAll(c);
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= SELECCIONA LPAR E RPAR LCURL CASE RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SWITCH(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE ::= SINO LCURL A RCURL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ELSE(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE_IF ::= ELSE 
            {
              nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo el = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF_ELSE(e, a, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Obj_a ::= ID COLON LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_a_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Obj_a ::= ID COLON LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Obj_a_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Obj_a ::= ID COLON E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_a(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l_Obj_a ::= Obj_a 
            {
              LinkedList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(o);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // l_Obj_a ::= l_Obj_a COMMA Obj_a 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(o);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asign ::= ID DIVEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asign ::= ID TIMESEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asign ::= ID MINUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asign ::= ID PLUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asign ::= ID MINUSMINUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(i, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asign ::= ID PLUSPLUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(i, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asign ::= ID DOT ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putArr(o, i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asign ::= ID DOT ID EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putId(o, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Asign ::= ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_arr(i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Asign ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Dec_ ::= ID EQ LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new dec_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec_ ::= ID EQ LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new dec_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dec_ ::= ID EQ LCURL l_Obj_a RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_ ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec_ ::= ID 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dec ::= VAR Dec_ 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Dec ::= Dec COMMA Dec_ 
            {
              nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new l_dec(l, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // l_para ::= VAR ID 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // l_para ::= l_para COMMA VAR ID 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(i);
                                                                                   RESULT = l; 
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // call_f ::= ID LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // call_f ::= ID LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Func ::= FUNCION ID LPAR RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Func ::= FUNCION ID LPAR l_para RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, l, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // As ::= ARR_FN SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // As ::= SWITCH 
            {
              nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo s = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // As ::= IF 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // As ::= call_f SEMI 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // As ::= Func 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // As ::= RETORNAR E SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new retornar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // As ::= DETENER SEMI 
            {
              nodo RESULT =null;
		 RESULT = new detener(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // As ::= IMPRIMIR LPAR E RPAR SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new imprimir(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // As ::= Asign SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // As ::= Dec SEMI 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= As 
            {
              nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A As 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new a_l(a, as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= A 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ambient(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

