
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Mar 11 21:26:05 CST 2019
//----------------------------------------------------

package grammar_fs;

import interpreter_fs.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Mar 11 21:26:05 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\007\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\006\012\000\002\006\011\000\002\007\006" +
    "\000\002\007\005\000\002\026\006\000\002\026\004\000" +
    "\002\010\005\000\002\010\004\000\002\011\003\000\002" +
    "\011\005\000\002\011\007\000\002\011\006\000\002\011" +
    "\007\000\002\012\005\000\002\012\010\000\002\012\007" +
    "\000\002\012\012\000\002\012\004\000\002\012\004\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\030\005\000\002\030\003\000\002\014" +
    "\005\000\002\014\006\000\002\014\007\000\002\016\011" +
    "\000\002\016\012\000\002\017\013\000\002\017\012\000" +
    "\002\017\003\000\002\020\006\000\002\021\011\000\002" +
    "\031\011\000\002\031\010\000\002\031\007\000\002\022" +
    "\007\000\002\022\011\000\002\022\007\000\002\022\011" +
    "\000\002\022\007\000\002\022\011\000\002\025\007\000" +
    "\002\025\026\000\002\025\034\000\002\025\034\000\002" +
    "\025\026\000\002\025\024\000\002\025\020\000\002\027" +
    "\005\000\002\027\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\004\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007\000\002" +
    "\013\007\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\010" +
    "\000\002\013\007\000\002\013\014\000\002\013\022\000" +
    "\002\013\030\000\002\013\003\000\002\013\005\000\002" +
    "\013\006\000\002\013\010\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\022\007\026\010\007\012\022\013\006\016" +
    "\016\017\020\021\027\121\013\001\002\000\004\114\u01a3" +
    "\001\002\000\004\002\u01a2\001\002\000\004\062\u0190\001" +
    "\002\000\004\062\u018c\001\002\000\026\002\ufff4\007\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\016\ufff4\017\ufff4\021\ufff4\061" +
    "\ufff4\121\ufff4\001\002\000\026\002\ufff5\007\ufff5\010\ufff5" +
    "\012\ufff5\013\ufff5\016\ufff5\017\ufff5\021\ufff5\061\ufff5\121" +
    "\ufff5\001\002\000\004\002\001\001\002\000\026\062\226" +
    "\064\363\066\357\074\354\075\364\076\356\077\360\100" +
    "\362\101\355\116\361\001\002\000\026\002\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\021\ufff7\061" +
    "\ufff7\121\ufff7\001\002\000\024\002\uffff\007\026\010\007" +
    "\012\022\013\006\016\016\017\020\021\027\121\013\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\026\002\ufffd\007\ufffd\010\ufffd\012\ufffd\013\ufffd\016\ufffd" +
    "\017\ufffd\021\ufffd\061\ufffd\121\ufffd\001\002\000\004\062" +
    "\326\001\002\000\004\114\325\001\002\000\004\114\324" +
    "\001\002\000\006\114\322\115\321\001\002\000\004\114" +
    "\320\001\002\000\004\114\317\001\002\000\004\121\052" +
    "\001\002\000\004\121\030\001\002\000\004\062\031\001" +
    "\002\000\006\007\032\063\034\001\002\000\004\121\050" +
    "\001\002\000\006\063\042\115\041\001\002\000\004\060" +
    "\035\001\002\000\022\007\026\010\007\012\022\013\006" +
    "\016\016\017\020\021\027\121\013\001\002\000\024\007" +
    "\026\010\007\012\022\013\006\016\016\017\020\021\027" +
    "\061\040\121\013\001\002\000\026\002\ufffe\007\ufffe\010" +
    "\ufffe\012\ufffe\013\ufffe\016\ufffe\017\ufffe\021\ufffe\061\ufffe" +
    "\121\ufffe\001\002\000\026\002\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\016\ufff0\017\ufff0\021\ufff0\061\ufff0\121\ufff0" +
    "\001\002\000\004\007\046\001\002\000\004\060\043\001" +
    "\002\000\022\007\026\010\007\012\022\013\006\016\016" +
    "\017\020\021\027\121\013\001\002\000\024\007\026\010" +
    "\007\012\022\013\006\016\016\017\020\021\027\061\045" +
    "\121\013\001\002\000\026\002\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\013\ufff1\016\ufff1\017\ufff1\021\ufff1\061\ufff1\121\ufff1" +
    "\001\002\000\004\121\047\001\002\000\006\063\uffed\115" +
    "\uffed\001\002\000\006\063\uffec\115\uffec\001\002\000\006" +
    "\114\uffea\115\uffea\001\002\000\010\066\053\114\uffe9\115" +
    "\uffe9\001\002\000\032\004\057\005\064\006\056\042\070" +
    "\060\062\062\060\064\067\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\060\061\uff97\063\uff97\065\uff97\067\uff97" +
    "\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\102" +
    "\uff97\103\uff97\104\uff97\105\uff97\106\uff97\107\uff97\110\uff97" +
    "\111\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117\uff97\001" +
    "\002\000\060\061\uff93\063\uff93\065\uff93\067\uff93\070\uff93" +
    "\071\uff93\072\uff93\073\uff93\074\uff93\075\uff93\102\uff93\103" +
    "\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93\111\uff93" +
    "\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93\001\002\000" +
    "\060\061\uff95\063\uff95\065\uff95\067\uff95\070\uff95\071\uff95" +
    "\072\uff95\073\uff95\074\uff95\075\uff95\102\uff95\103\uff95\104" +
    "\uff95\105\uff95\106\uff95\107\uff95\110\uff95\111\uff95\113\uff95" +
    "\114\uff95\115\uff95\116\uff95\117\uff95\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\060\061\uff96\063" +
    "\uff96\065\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96" +
    "\074\uff96\075\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106" +
    "\uff96\107\uff96\110\uff96\111\uff96\113\uff96\114\uff96\115\uff96" +
    "\116\uff96\117\uff96\001\002\000\004\121\300\001\002\000" +
    "\064\061\uff9c\062\226\063\uff9c\064\227\065\uff9c\067\uff9c" +
    "\070\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\102" +
    "\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c" +
    "\111\uff9c\113\uff9c\114\uff9c\115\uff9c\116\230\117\uff9c\001" +
    "\002\000\060\061\uff94\063\uff94\065\uff94\067\uff94\070\uff94" +
    "\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\102\uff94\103" +
    "\uff94\104\uff94\105\uff94\106\uff94\107\uff94\110\uff94\111\uff94" +
    "\113\uff94\114\uff94\115\uff94\116\uff94\117\uff94\001\002\000" +
    "\060\061\uff98\063\uff98\065\uff98\067\uff98\070\uff98\071\uff98" +
    "\072\uff98\073\uff98\074\uff98\075\uff98\102\uff98\103\uff98\104" +
    "\uff98\105\uff98\106\uff98\107\uff98\110\uff98\111\uff98\113\uff98" +
    "\114\uff98\115\uff98\116\uff98\117\uff98\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\030\004\057\005" +
    "\064\006\056\042\070\062\060\065\220\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\004\062\206\001" +
    "\002\000\050\067\102\070\072\071\107\072\104\073\076" +
    "\074\077\075\110\102\112\103\106\104\101\105\075\106" +
    "\074\107\100\110\073\111\111\114\uffe8\115\uffe8\116\105" +
    "\117\103\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\060\061\uffad\063\uffad" +
    "\065\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad" +
    "\107\uffad\110\uffad\111\uffad\113\uffad\114\uffad\115\uffad\116" +
    "\uffad\117\uffad\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\026\004\057\005\064\006\056\042\070" +
    "\062\060\070\054\112\066\120\055\121\063\122\061\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\032\022\122\023" +
    "\132\025\121\026\130\027\124\030\117\031\120\032\126" +
    "\033\125\034\131\035\123\121\127\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\060\061\uffac\063\uffac\065" +
    "\uffac\067\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac" +
    "\075\uffac\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107" +
    "\uffac\110\uffac\111\uffac\113\uffac\114\uffac\115\uffac\116\uffac" +
    "\117\uffac\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\060\061\uffb9\063\uffb9\065\uffb9\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\uffb9\103\uffb9" +
    "\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\113" +
    "\uffb9\114\uffb9\115\uffb9\116\105\117\uffb9\001\002\000\060" +
    "\061\uffbc\063\uffbc\065\uffbc\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\uffbc\113\uffbc\114" +
    "\uffbc\115\uffbc\116\105\117\uffbc\001\002\000\060\061\uffb1" +
    "\063\uffb1\065\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073" +
    "\076\074\077\075\110\102\uffb1\103\uffb1\104\uffb1\105\uffb1" +
    "\106\uffb1\107\uffb1\110\uffb1\111\uffb1\113\uffb1\114\uffb1\115" +
    "\uffb1\116\105\117\uffb1\001\002\000\060\061\uffb8\063\uffb8" +
    "\065\uffb8\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8" +
    "\107\uffb8\110\uffb8\111\uffb8\113\uffb8\114\uffb8\115\uffb8\116" +
    "\105\117\uffb8\001\002\000\004\062\167\001\002\000\004" +
    "\062\164\001\002\000\004\062\162\001\002\000\004\062" +
    "\160\001\002\000\004\062\155\001\002\000\004\062\153" +
    "\001\002\000\004\062\150\001\002\000\004\062\145\001" +
    "\002\000\062\061\uff9b\063\uff9b\064\142\065\uff9b\067\uff9b" +
    "\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b" +
    "\111\uff9b\113\uff9b\114\uff9b\115\uff9b\116\uff9b\117\uff9b\001" +
    "\002\000\004\062\140\001\002\000\004\062\135\001\002" +
    "\000\004\062\133\001\002\000\004\063\134\001\002\000" +
    "\060\061\uffa9\063\uffa9\065\uffa9\067\uffa9\070\uffa9\071\uffa9" +
    "\072\uffa9\073\uffa9\074\uffa9\075\uffa9\102\uffa9\103\uffa9\104" +
    "\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9\113\uffa9" +
    "\114\uffa9\115\uffa9\116\uffa9\117\uffa9\001\002\000\004\121" +
    "\136\001\002\000\004\063\137\001\002\000\060\061\uffa2" +
    "\063\uffa2\065\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073" +
    "\uffa2\074\uffa2\075\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\110\uffa2\111\uffa2\113\uffa2\114\uffa2\115" +
    "\uffa2\116\uffa2\117\uffa2\001\002\000\004\063\141\001\002" +
    "\000\060\061\uffab\063\uffab\065\uffab\067\uffab\070\uffab\071" +
    "\uffab\072\uffab\073\uffab\074\uffab\075\uffab\102\uffab\103\uffab" +
    "\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111\uffab\113" +
    "\uffab\114\uffab\115\uffab\116\uffab\117\uffab\001\002\000\004" +
    "\120\143\001\002\000\004\065\144\001\002\000\060\061" +
    "\uff99\063\uff99\065\uff99\067\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\110\uff99\111\uff99\113\uff99\114\uff99" +
    "\115\uff99\116\uff99\117\uff99\001\002\000\004\121\146\001" +
    "\002\000\004\063\147\001\002\000\060\061\uffa6\063\uffa6" +
    "\065\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\102\uffa6\103\uffa6\104\uffa6\105\uffa6\106\uffa6" +
    "\107\uffa6\110\uffa6\111\uffa6\113\uffa6\114\uffa6\115\uffa6\116" +
    "\uffa6\117\uffa6\001\002\000\004\121\151\001\002\000\004" +
    "\063\152\001\002\000\060\061\uffa3\063\uffa3\065\uffa3\067" +
    "\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3" +
    "\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3\110" +
    "\uffa3\111\uffa3\113\uffa3\114\uffa3\115\uffa3\116\uffa3\117\uffa3" +
    "\001\002\000\004\063\154\001\002\000\060\061\uffaa\063" +
    "\uffaa\065\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073\uffaa" +
    "\074\uffaa\075\uffaa\102\uffaa\103\uffaa\104\uffaa\105\uffaa\106" +
    "\uffaa\107\uffaa\110\uffaa\111\uffaa\113\uffaa\114\uffaa\115\uffaa" +
    "\116\uffaa\117\uffaa\001\002\000\004\121\156\001\002\000" +
    "\004\063\157\001\002\000\060\061\uffa1\063\uffa1\065\uffa1" +
    "\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1\075" +
    "\uffa1\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1" +
    "\110\uffa1\111\uffa1\113\uffa1\114\uffa1\115\uffa1\116\uffa1\117" +
    "\uffa1\001\002\000\004\063\161\001\002\000\060\061\uffa8" +
    "\063\uffa8\065\uffa8\067\uffa8\070\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8" +
    "\106\uffa8\107\uffa8\110\uffa8\111\uffa8\113\uffa8\114\uffa8\115" +
    "\uffa8\116\uffa8\117\uffa8\001\002\000\004\063\163\001\002" +
    "\000\060\061\uffa7\063\uffa7\065\uffa7\067\uffa7\070\uffa7\071" +
    "\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\102\uffa7\103\uffa7" +
    "\104\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\113" +
    "\uffa7\114\uffa7\115\uffa7\116\uffa7\117\uffa7\001\002\000\004" +
    "\121\165\001\002\000\004\063\166\001\002\000\060\061" +
    "\uffa4\063\uffa4\065\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4" +
    "\073\uffa4\074\uffa4\075\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\106\uffa4\107\uffa4\110\uffa4\111\uffa4\113\uffa4\114\uffa4" +
    "\115\uffa4\116\uffa4\117\uffa4\001\002\000\004\121\170\001" +
    "\002\000\004\063\171\001\002\000\060\061\uffa5\063\uffa5" +
    "\065\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074" +
    "\uffa5\075\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5" +
    "\107\uffa5\110\uffa5\111\uffa5\113\uffa5\114\uffa5\115\uffa5\116" +
    "\uffa5\117\uffa5\001\002\000\060\061\uffb0\063\uffb0\065\uffb0" +
    "\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\076\074\077\075" +
    "\110\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\113\uffb0\114\uffb0\115\uffb0\116\105\117" +
    "\uffb0\001\002\000\046\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\113\174\116\105" +
    "\117\103\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\060\061\uffa0\063\uffa0\065\uffa0\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\113\uffa0\114\uffa0\115\uffa0\116\105\117\103\001\002" +
    "\000\060\061\uffb3\063\uffb3\065\uffb3\067\uffb3\070\uffb3\071" +
    "\107\072\104\073\076\074\077\075\110\102\uffb3\103\uffb3" +
    "\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110\uffb3\111\uffb3\113" +
    "\uffb3\114\uffb3\115\uffb3\116\105\117\uffb3\001\002\000\060" +
    "\061\uffb7\063\uffb7\065\uffb7\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\uffb7\103\uffb7\104\uffb7" +
    "\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\113\uffb7\114" +
    "\uffb7\115\uffb7\116\105\117\uffb7\001\002\000\060\061\uffb4" +
    "\063\uffb4\065\uffb4\067\102\070\072\071\107\072\104\073" +
    "\076\074\077\075\110\102\112\103\106\104\101\105\075" +
    "\106\uffb4\107\uffb4\110\uffb4\111\uffb4\113\uffb4\114\uffb4\115" +
    "\uffb4\116\105\117\uffb4\001\002\000\060\061\uffaf\063\uffaf" +
    "\065\uffaf\067\uffaf\070\uffaf\071\uffaf\072\uffaf\073\uffaf\074" +
    "\077\075\110\102\uffaf\103\uffaf\104\uffaf\105\uffaf\106\uffaf" +
    "\107\uffaf\110\uffaf\111\uffaf\113\uffaf\114\uffaf\115\uffaf\116" +
    "\105\117\uffaf\001\002\000\060\061\uffb6\063\uffb6\065\uffb6" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\113\uffb6\114\uffb6\115\uffb6\116\105\117" +
    "\uffb6\001\002\000\060\061\uffb5\063\uffb5\065\uffb5\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\uffb5\107\uffb5\110\uffb5" +
    "\111\uffb5\113\uffb5\114\uffb5\115\uffb5\116\105\117\uffb5\001" +
    "\002\000\060\061\uffbb\063\uffbb\065\uffbb\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\uffbb\111\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\116\105\117\uffbb\001\002\000" +
    "\060\061\uffb2\063\uffb2\065\uffb2\067\uffb2\070\uffb2\071\107" +
    "\072\104\073\076\074\077\075\110\102\uffb2\103\uffb2\104" +
    "\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2\113\uffb2" +
    "\114\uffb2\115\uffb2\116\105\117\uffb2\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\210\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\212\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\214\116\105\117\103\001\002\000\004\121\215\001\002" +
    "\000\004\063\216\001\002\000\060\061\uff9f\063\uff9f\065" +
    "\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f" +
    "\075\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107" +
    "\uff9f\110\uff9f\111\uff9f\113\uff9f\114\uff9f\115\uff9f\116\uff9f" +
    "\117\uff9f\001\002\000\006\065\223\115\222\001\002\000" +
    "\006\114\uffe6\115\uffe6\001\002\000\052\063\uffbd\065\uffbd" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\uffbd\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\006\114" +
    "\uffe5\115\uffe5\001\002\000\052\063\uffbe\065\uffbe\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\uffbe\116\105\117\103\001\002\000\060\061" +
    "\uffba\063\uffba\065\uffba\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\uffba\111\uffba\113\uffba\114\uffba" +
    "\115\uffba\116\105\117\uffba\001\002\000\030\004\057\005" +
    "\064\006\056\042\070\062\060\063\276\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\004\120\273\001" +
    "\002\000\006\043\231\051\232\001\002\000\004\062\256" +
    "\001\002\000\004\062\233\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\235\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\237" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\115\241\116" +
    "\105\117\103\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\046\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\115\243\116\105" +
    "\117\103\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\046\067\102\070\072\071\107\072\104\073" +
    "\076\074\077\075\110\102\112\103\106\104\101\105\075" +
    "\106\074\107\100\110\073\111\111\115\245\116\105\117" +
    "\103\001\002\000\026\004\057\005\064\006\056\042\070" +
    "\062\060\070\054\112\066\120\055\121\063\122\061\001" +
    "\002\000\046\067\102\070\072\071\107\072\104\073\076" +
    "\074\077\075\110\102\112\103\106\104\101\105\075\106" +
    "\074\107\100\110\073\111\111\115\247\116\105\117\103" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\046\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\112\103\106\104\101\105\075\106\074" +
    "\107\100\110\073\111\111\115\251\116\105\117\103\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\115\253\116\105\117\103\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\063\255\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\112\103\106\104\101\105\075\106\074" +
    "\107\100\110\073\111\111\116\105\117\103\001\002\000" +
    "\060\061\uff9d\063\uff9d\065\uff9d\067\uff9d\070\uff9d\071\uff9d" +
    "\072\uff9d\073\uff9d\074\uff9d\075\uff9d\102\uff9d\103\uff9d\104" +
    "\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\111\uff9d\113\uff9d" +
    "\114\uff9d\115\uff9d\116\uff9d\117\uff9d\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\260\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\262\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\264\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\266" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\115\270\116" +
    "\105\117\103\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\046\063\272\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\116\105" +
    "\117\103\001\002\000\060\061\uff9e\063\uff9e\065\uff9e\067" +
    "\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\102\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110" +
    "\uff9e\111\uff9e\113\uff9e\114\uff9e\115\uff9e\116\uff9e\117\uff9e" +
    "\001\002\000\004\065\274\001\002\000\060\061\uff9a\063" +
    "\uff9a\065\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\075\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106" +
    "\uff9a\107\uff9a\110\uff9a\111\uff9a\113\uff9a\114\uff9a\115\uff9a" +
    "\116\uff9a\117\uff9a\001\002\000\006\063\277\115\222\001" +
    "\002\000\060\061\uffee\063\uffee\065\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\102\uffee\103" +
    "\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee\111\uffee" +
    "\113\uffee\114\uffee\115\uffee\116\uffee\117\uffee\001\002\000" +
    "\060\061\uffef\063\uffef\065\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\102\uffef\103\uffef\104" +
    "\uffef\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\113\uffef" +
    "\114\uffef\115\uffef\116\uffef\117\uffef\001\002\000\004\113" +
    "\306\001\002\000\006\061\uffd9\115\uffd9\001\002\000\006" +
    "\061\304\115\303\001\002\000\004\121\300\001\002\000" +
    "\006\114\uffe7\115\uffe7\001\002\000\006\061\uffda\115\uffda" +
    "\001\002\000\030\004\057\005\064\006\056\042\070\062" +
    "\060\064\307\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\030\004\057\005\064\006\056\042\070\062" +
    "\060\065\312\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\050\061\uffd8\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\115\uffd8\116" +
    "\105\117\103\001\002\000\006\065\313\115\222\001\002" +
    "\000\006\061\uffd7\115\uffd7\001\002\000\006\061\uffd6\115" +
    "\uffd6\001\002\000\046\063\315\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\116\105" +
    "\117\103\001\002\000\060\061\uff92\063\uff92\065\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\102\uff92\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110" +
    "\uff92\111\uff92\113\uff92\114\uff92\115\uff92\116\uff92\117\uff92" +
    "\001\002\000\060\061\uffae\063\uffae\065\uffae\067\uffae\070" +
    "\uffae\071\uffae\072\uffae\073\uffae\074\uffae\075\uffae\102\uffae" +
    "\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110\uffae\111" +
    "\uffae\113\uffae\114\uffae\115\uffae\116\105\117\uffae\001\002" +
    "\000\026\002\ufff6\007\ufff6\010\ufff6\012\ufff6\013\ufff6\016" +
    "\ufff6\017\ufff6\021\ufff6\061\ufff6\121\ufff6\001\002\000\026" +
    "\002\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\016\ufff2\017" +
    "\ufff2\021\ufff2\061\ufff2\121\ufff2\001\002\000\004\121\052" +
    "\001\002\000\026\002\ufffc\007\ufffc\010\ufffc\012\ufffc\013" +
    "\ufffc\016\ufffc\017\ufffc\021\ufffc\061\ufffc\121\ufffc\001\002" +
    "\000\006\114\uffeb\115\uffeb\001\002\000\026\002\ufff9\007" +
    "\ufff9\010\ufff9\012\ufff9\013\ufff9\016\ufff9\017\ufff9\021\ufff9" +
    "\061\ufff9\121\ufff9\001\002\000\026\002\ufff3\007\ufff3\010" +
    "\ufff3\012\ufff3\013\ufff3\016\ufff3\017\ufff3\021\ufff3\061\ufff3" +
    "\121\ufff3\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\046\063\330\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\116\105\117" +
    "\103\001\002\000\004\060\331\001\002\000\022\007\026" +
    "\010\007\012\022\013\006\016\016\017\020\021\027\121" +
    "\013\001\002\000\024\007\026\010\007\012\022\013\006" +
    "\016\016\017\020\021\027\061\333\121\013\001\002\000" +
    "\030\002\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5\016\uffd5" +
    "\017\uffd5\020\336\021\uffd5\061\uffd5\121\uffd5\001\002\000" +
    "\026\002\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\016\uffd1" +
    "\017\uffd1\021\uffd1\061\uffd1\121\uffd1\001\002\000\026\002" +
    "\uffd4\007\uffd4\010\uffd4\012\uffd4\013\uffd4\016\uffd4\017\uffd4" +
    "\021\uffd4\061\uffd4\121\uffd4\001\002\000\006\017\340\060" +
    "\337\001\002\000\022\007\026\010\007\012\022\013\006" +
    "\016\016\017\020\021\027\121\013\001\002\000\004\062" +
    "\341\001\002\000\026\004\057\005\064\006\056\042\070" +
    "\062\060\070\054\112\066\120\055\121\063\122\061\001" +
    "\002\000\046\063\343\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\116\105\117\103" +
    "\001\002\000\004\060\344\001\002\000\022\007\026\010" +
    "\007\012\022\013\006\016\016\017\020\021\027\121\013" +
    "\001\002\000\024\007\026\010\007\012\022\013\006\016" +
    "\016\017\020\021\027\061\346\121\013\001\002\000\030" +
    "\002\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2\016\uffd2\017" +
    "\uffd2\020\336\021\uffd2\061\uffd2\121\uffd2\001\002\000\026" +
    "\002\uffd3\007\uffd3\010\uffd3\012\uffd3\013\uffd3\016\uffd3\017" +
    "\uffd3\021\uffd3\061\uffd3\121\uffd3\001\002\000\024\007\026" +
    "\010\007\012\022\013\006\016\016\017\020\021\027\061" +
    "\351\121\013\001\002\000\026\002\uffd0\007\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\016\uffd0\017\uffd0\021\uffd0\061\uffd0\121" +
    "\uffd0\001\002\000\046\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\114\353\116\105" +
    "\117\103\001\002\000\026\002\ufff8\007\ufff8\010\ufff8\012" +
    "\ufff8\013\ufff8\016\ufff8\017\ufff8\021\ufff8\061\ufff8\121\ufff8" +
    "\001\002\000\004\114\uffe0\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\030\022\377\023\u0104\025\375\044\372\045\u0100\046" +
    "\376\047\u0103\050\373\052\u0102\056\374\121\u0101\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\004" +
    "\120\365\001\002\000\004\114\uffdf\001\002\000\004\065" +
    "\366\001\002\000\004\066\367\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\114\uffe3\116\105\117\103\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\114\uffdc\116\105\117\103\001\002\000\004\062\u0177" +
    "\001\002\000\004\062\u0168\001\002\000\004\062\u0166\001" +
    "\002\000\004\062\u0164\001\002\000\004\062\u014d\001\002" +
    "\000\004\062\u014b\001\002\000\004\062\u0134\001\002\000" +
    "\010\064\u0124\066\u0123\116\u0125\001\002\000\004\062\u0118" +
    "\001\002\000\004\062\u0107\001\002\000\004\062\u0105\001" +
    "\002\000\004\063\u0106\001\002\000\004\114\uffc9\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\u0109\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\046\067" +
    "\102\070\072\071\107\072\104\073\076\074\077\075\110" +
    "\102\112\103\106\104\101\105\075\106\074\107\100\110" +
    "\073\111\111\115\u010b\116\105\117\103\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\u010d\116\105\117\103\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\u010f\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\u0111\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\u0113\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\u0115" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\063\u0117\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\116" +
    "\105\117\103\001\002\000\004\114\uffc1\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\u011a\116\105\117\103\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\u011c\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\u011e\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\u0120\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\063\u0122\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\116\105\117\103\001\002\000\004\114\uffbf\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\004\120" +
    "\u012f\001\002\000\010\022\u0128\023\u0126\025\u0127\001\002" +
    "\000\004\062\u012d\001\002\000\004\062\u012b\001\002\000" +
    "\004\062\u0129\001\002\000\004\063\u012a\001\002\000\004" +
    "\114\uffca\001\002\000\004\063\u012c\001\002\000\004\114" +
    "\uffc6\001\002\000\004\063\u012e\001\002\000\004\114\uffc8" +
    "\001\002\000\004\065\u0130\001\002\000\004\066\u0131\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\114\uffe1\116\105\117\103\001\002" +
    "\000\046\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\112\103\106\104\101\105\075\106\074" +
    "\107\100\110\073\111\111\114\uffe2\116\105\117\103\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\115\u0136\116\105\117\103\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\u0138\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\046\067" +
    "\102\070\072\071\107\072\104\073\076\074\077\075\110" +
    "\102\112\103\106\104\101\105\075\106\074\107\100\110" +
    "\073\111\111\115\u013a\116\105\117\103\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\u013c\116\105\117\103\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\u013e\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\u0140\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\u0142\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\u0144" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\115\u0146\116" +
    "\105\117\103\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\046\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\115\u0148\116\105" +
    "\117\103\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\046\063\u014a\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\116\105\117" +
    "\103\001\002\000\004\114\uffc3\001\002\000\004\063\u014c" +
    "\001\002\000\004\114\uffcb\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\u014f\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\u0151" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\067\102\070\072\071\107\072" +
    "\104\073\076\074\077\075\110\102\112\103\106\104\101" +
    "\105\075\106\074\107\100\110\073\111\111\115\u0153\116" +
    "\105\117\103\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\046\067\102\070\072\071\107\072\104" +
    "\073\076\074\077\075\110\102\112\103\106\104\101\105" +
    "\075\106\074\107\100\110\073\111\111\115\u0155\116\105" +
    "\117\103\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\046\067\102\070\072\071\107\072\104\073" +
    "\076\074\077\075\110\102\112\103\106\104\101\105\075" +
    "\106\074\107\100\110\073\111\111\115\u0157\116\105\117" +
    "\103\001\002\000\026\004\057\005\064\006\056\042\070" +
    "\062\060\070\054\112\066\120\055\121\063\122\061\001" +
    "\002\000\046\067\102\070\072\071\107\072\104\073\076" +
    "\074\077\075\110\102\112\103\106\104\101\105\075\106" +
    "\074\107\100\110\073\111\111\115\u0159\116\105\117\103" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\046\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\112\103\106\104\101\105\075\106\074" +
    "\107\100\110\073\111\111\115\u015b\116\105\117\103\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\115\u015d\116\105\117\103\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\u015f\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\046\067" +
    "\102\070\072\071\107\072\104\073\076\074\077\075\110" +
    "\102\112\103\106\104\101\105\075\106\074\107\100\110" +
    "\073\111\111\115\u0161\116\105\117\103\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\063\u0163" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\116\105\117\103\001\002\000\004\114" +
    "\uffc2\001\002\000\004\063\u0165\001\002\000\004\114\uffc7" +
    "\001\002\000\004\063\u0167\001\002\000\004\114\uffc5\001" +
    "\002\000\026\004\057\005\064\006\056\042\070\062\060" +
    "\070\054\112\066\120\055\121\063\122\061\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\115\u016a\116\105\117\103\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\u016c\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\046\067" +
    "\102\070\072\071\107\072\104\073\076\074\077\075\110" +
    "\102\112\103\106\104\101\105\075\106\074\107\100\110" +
    "\073\111\111\115\u016e\116\105\117\103\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\u0170\116\105\117\103\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\u0172\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\u0174\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\063\u0176\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\116\105\117\103\001\002\000\004\114\uffc0\001\002" +
    "\000\026\004\057\005\064\006\056\042\070\062\060\070" +
    "\054\112\066\120\055\121\063\122\061\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\115\u0179\116\105\117\103\001\002\000" +
    "\026\004\057\005\064\006\056\042\070\062\060\070\054" +
    "\112\066\120\055\121\063\122\061\001\002\000\046\067" +
    "\102\070\072\071\107\072\104\073\076\074\077\075\110" +
    "\102\112\103\106\104\101\105\075\106\074\107\100\110" +
    "\073\111\111\115\u017b\116\105\117\103\001\002\000\026" +
    "\004\057\005\064\006\056\042\070\062\060\070\054\112" +
    "\066\120\055\121\063\122\061\001\002\000\046\067\102" +
    "\070\072\071\107\072\104\073\076\074\077\075\110\102" +
    "\112\103\106\104\101\105\075\106\074\107\100\110\073" +
    "\111\111\115\u017d\116\105\117\103\001\002\000\026\004" +
    "\057\005\064\006\056\042\070\062\060\070\054\112\066" +
    "\120\055\121\063\122\061\001\002\000\046\067\102\070" +
    "\072\071\107\072\104\073\076\074\077\075\110\102\112" +
    "\103\106\104\101\105\075\106\074\107\100\110\073\111" +
    "\111\115\u017f\116\105\117\103\001\002\000\026\004\057" +
    "\005\064\006\056\042\070\062\060\070\054\112\066\120" +
    "\055\121\063\122\061\001\002\000\046\067\102\070\072" +
    "\071\107\072\104\073\076\074\077\075\110\102\112\103" +
    "\106\104\101\105\075\106\074\107\100\110\073\111\111" +
    "\115\u0181\116\105\117\103\001\002\000\026\004\057\005" +
    "\064\006\056\042\070\062\060\070\054\112\066\120\055" +
    "\121\063\122\061\001\002\000\046\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\115" +
    "\u0183\116\105\117\103\001\002\000\026\004\057\005\064" +
    "\006\056\042\070\062\060\070\054\112\066\120\055\121" +
    "\063\122\061\001\002\000\046\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\115\u0185" +
    "\116\105\117\103\001\002\000\026\004\057\005\064\006" +
    "\056\042\070\062\060\070\054\112\066\120\055\121\063" +
    "\122\061\001\002\000\046\063\u0187\067\102\070\072\071" +
    "\107\072\104\073\076\074\077\075\110\102\112\103\106" +
    "\104\101\105\075\106\074\107\100\110\073\111\111\116" +
    "\105\117\103\001\002\000\004\114\uffc4\001\002\000\046" +
    "\067\102\070\072\071\107\072\104\073\076\074\077\075" +
    "\110\102\112\103\106\104\101\105\075\106\074\107\100" +
    "\110\073\111\111\114\uffdd\116\105\117\103\001\002\000" +
    "\046\067\102\070\072\071\107\072\104\073\076\074\077" +
    "\075\110\102\112\103\106\104\101\105\075\106\074\107" +
    "\100\110\073\111\111\114\uffe4\116\105\117\103\001\002" +
    "\000\046\067\102\070\072\071\107\072\104\073\076\074" +
    "\077\075\110\102\112\103\106\104\101\105\075\106\074" +
    "\107\100\110\073\111\111\114\uffde\116\105\117\103\001" +
    "\002\000\046\067\102\070\072\071\107\072\104\073\076" +
    "\074\077\075\110\102\112\103\106\104\101\105\075\106" +
    "\074\107\100\110\073\111\111\114\uffdb\116\105\117\103" +
    "\001\002\000\026\004\057\005\064\006\056\042\070\062" +
    "\060\070\054\112\066\120\055\121\063\122\061\001\002" +
    "\000\046\063\u018e\067\102\070\072\071\107\072\104\073" +
    "\076\074\077\075\110\102\112\103\106\104\101\105\075" +
    "\106\074\107\100\110\073\111\111\116\105\117\103\001" +
    "\002\000\004\114\u018f\001\002\000\026\002\ufffa\007\ufffa" +
    "\010\ufffa\012\ufffa\013\ufffa\016\ufffa\017\ufffa\021\ufffa\061" +
    "\ufffa\121\ufffa\001\002\000\026\004\057\005\064\006\056" +
    "\042\070\062\060\070\054\112\066\120\055\121\063\122" +
    "\061\001\002\000\046\063\u0192\067\102\070\072\071\107" +
    "\072\104\073\076\074\077\075\110\102\112\103\106\104" +
    "\101\105\075\106\074\107\100\110\073\111\111\116\105" +
    "\117\103\001\002\000\004\060\u0193\001\002\000\006\014" +
    "\u0196\015\u0194\001\002\000\004\113\u019e\001\002\000\004" +
    "\061\u019d\001\002\000\026\004\057\005\064\006\056\042" +
    "\070\062\060\070\054\112\066\120\055\121\063\122\061" +
    "\001\002\000\046\067\102\070\072\071\107\072\104\073" +
    "\076\074\077\075\110\102\112\103\106\104\101\105\075" +
    "\106\074\107\100\110\073\111\111\113\u0198\116\105\117" +
    "\103\001\002\000\004\060\u0199\001\002\000\022\007\026" +
    "\010\007\012\022\013\006\016\016\017\020\021\027\121" +
    "\013\001\002\000\024\007\026\010\007\012\022\013\006" +
    "\016\016\017\020\021\027\061\u019b\121\013\001\002\000" +
    "\010\014\u0196\015\u0194\061\uffcd\001\002\000\004\061\uffce" +
    "\001\002\000\026\002\uffcf\007\uffcf\010\uffcf\012\uffcf\013" +
    "\uffcf\016\uffcf\017\uffcf\021\uffcf\061\uffcf\121\uffcf\001\002" +
    "\000\004\060\u019f\001\002\000\022\007\026\010\007\012" +
    "\022\013\006\016\016\017\020\021\027\121\013\001\002" +
    "\000\024\007\026\010\007\012\022\013\006\016\016\017" +
    "\020\021\027\061\u01a1\121\013\001\002\000\004\061\uffcc" +
    "\001\002\000\004\002\000\001\002\000\026\002\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\013\ufffb\016\ufffb\017\ufffb\021\ufffb" +
    "\061\ufffb\121\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a1\000\032\002\004\003\011\004\014\005\016\006" +
    "\013\007\024\010\022\012\003\016\010\021\007\022\020" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\036\006\013\007\024\010\022\012\003" +
    "\016\010\021\007\022\020\025\023\001\001\000\006\007" +
    "\064\013\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\035\005\016\006\013\007\024\010\022\012" +
    "\003\016\010\021\007\022\020\025\023\001\001\000\024" +
    "\005\036\006\013\007\024\010\022\012\003\016\010\021" +
    "\007\022\020\025\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\004" +
    "\043\005\016\006\013\007\024\010\022\012\003\016\010" +
    "\021\007\022\020\025\023\001\001\000\024\005\036\006" +
    "\013\007\024\010\022\012\003\016\010\021\007\022\020" +
    "\025\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\064\013\070\001\001\000\006\007" +
    "\064\013\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\064\013\313\001\001\000" +
    "\002\001\001\000\006\014\300\030\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\064\013\224\001\001\000\010\007\064\013\220\027\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\064\013\204\001\001\000\006\007\064\013\203\001\001" +
    "\000\006\007\064\013\202\001\001\000\006\007\064\013" +
    "\201\001\001\000\006\007\064\013\200\001\001\000\002" +
    "\001\001\000\006\007\064\013\177\001\001\000\006\007" +
    "\064\013\176\001\001\000\006\007\064\013\175\001\001" +
    "\000\006\007\064\013\172\001\001\000\006\007\064\013" +
    "\171\001\001\000\002\001\001\000\006\007\064\013\115" +
    "\001\001\000\006\007\064\013\114\001\001\000\002\001" +
    "\001\000\006\007\064\013\113\001\001\000\006\007\064" +
    "\013\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\064\013\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\064\013\206\001\001\000\002\001\001\000\006\007\064" +
    "\013\210\001\001\000\002\001\001\000\006\007\064\013" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\064\013\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\064\013\220\027\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\064\013\233\001\001\000\002\001\001\000\006" +
    "\007\064\013\235\001\001\000\002\001\001\000\006\007" +
    "\064\013\237\001\001\000\002\001\001\000\006\007\064" +
    "\013\241\001\001\000\002\001\001\000\006\007\064\013" +
    "\243\001\001\000\002\001\001\000\006\007\064\013\245" +
    "\001\001\000\002\001\001\000\006\007\064\013\247\001" +
    "\001\000\002\001\001\000\006\007\064\013\251\001\001" +
    "\000\002\001\001\000\006\007\064\013\253\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\064\013\256" +
    "\001\001\000\002\001\001\000\006\007\064\013\260\001" +
    "\001\000\002\001\001\000\006\007\064\013\262\001\001" +
    "\000\002\001\001\000\006\007\064\013\264\001\001\000" +
    "\002\001\001\000\006\007\064\013\266\001\001\000\002" +
    "\001\001\000\006\007\064\013\270\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\064\013\307\001\001\000\010\007\064\013\220" +
    "\027\310\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\322\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\064\013\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\004\331\005\016\006\013\007\024\010\022\012" +
    "\003\016\010\021\007\022\020\025\023\001\001\000\024" +
    "\005\036\006\013\007\024\010\022\012\003\016\010\021" +
    "\007\022\020\025\023\001\001\000\006\017\334\020\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\347\005\016\006\013\007\024\010\022" +
    "\012\003\016\010\021\007\022\020\025\023\001\001\000" +
    "\002\001\001\000\006\007\064\013\341\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\004\344\005\016\006" +
    "\013\007\024\010\022\012\003\016\010\021\007\022\020" +
    "\025\023\001\001\000\024\005\036\006\013\007\024\010" +
    "\022\012\003\016\010\021\007\022\020\025\023\001\001" +
    "\000\006\017\346\020\333\001\001\000\002\001\001\000" +
    "\024\005\036\006\013\007\024\010\022\012\003\016\010" +
    "\021\007\022\020\025\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\064\013\u018a\001\001\000\006\007\064\013\u0189\001" +
    "\001\000\006\007\064\013\u0188\001\001\000\006\007\064" +
    "\013\u0187\001\001\000\002\001\001\000\006\007\064\013" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\064\013\367\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\064" +
    "\013\u0107\001\001\000\002\001\001\000\006\007\064\013" +
    "\u0109\001\001\000\002\001\001\000\006\007\064\013\u010b" +
    "\001\001\000\002\001\001\000\006\007\064\013\u010d\001" +
    "\001\000\002\001\001\000\006\007\064\013\u010f\001\001" +
    "\000\002\001\001\000\006\007\064\013\u0111\001\001\000" +
    "\002\001\001\000\006\007\064\013\u0113\001\001\000\002" +
    "\001\001\000\006\007\064\013\u0115\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\064\013\u0118\001\001" +
    "\000\002\001\001\000\006\007\064\013\u011a\001\001\000" +
    "\002\001\001\000\006\007\064\013\u011c\001\001\000\002" +
    "\001\001\000\006\007\064\013\u011e\001\001\000\002\001" +
    "\001\000\006\007\064\013\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\064\013\u0132\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\064\013\u0131\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\064\013\u0134\001\001\000\002\001" +
    "\001\000\006\007\064\013\u0136\001\001\000\002\001\001" +
    "\000\006\007\064\013\u0138\001\001\000\002\001\001\000" +
    "\006\007\064\013\u013a\001\001\000\002\001\001\000\006" +
    "\007\064\013\u013c\001\001\000\002\001\001\000\006\007" +
    "\064\013\u013e\001\001\000\002\001\001\000\006\007\064" +
    "\013\u0140\001\001\000\002\001\001\000\006\007\064\013" +
    "\u0142\001\001\000\002\001\001\000\006\007\064\013\u0144" +
    "\001\001\000\002\001\001\000\006\007\064\013\u0146\001" +
    "\001\000\002\001\001\000\006\007\064\013\u0148\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\007\064\013\u014d\001\001\000\002" +
    "\001\001\000\006\007\064\013\u014f\001\001\000\002\001" +
    "\001\000\006\007\064\013\u0151\001\001\000\002\001\001" +
    "\000\006\007\064\013\u0153\001\001\000\002\001\001\000" +
    "\006\007\064\013\u0155\001\001\000\002\001\001\000\006" +
    "\007\064\013\u0157\001\001\000\002\001\001\000\006\007" +
    "\064\013\u0159\001\001\000\002\001\001\000\006\007\064" +
    "\013\u015b\001\001\000\002\001\001\000\006\007\064\013" +
    "\u015d\001\001\000\002\001\001\000\006\007\064\013\u015f" +
    "\001\001\000\002\001\001\000\006\007\064\013\u0161\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\064\013\u0168\001\001\000\002\001\001\000\006" +
    "\007\064\013\u016a\001\001\000\002\001\001\000\006\007" +
    "\064\013\u016c\001\001\000\002\001\001\000\006\007\064" +
    "\013\u016e\001\001\000\002\001\001\000\006\007\064\013" +
    "\u0170\001\001\000\002\001\001\000\006\007\064\013\u0172" +
    "\001\001\000\002\001\001\000\006\007\064\013\u0174\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\064" +
    "\013\u0177\001\001\000\002\001\001\000\006\007\064\013" +
    "\u0179\001\001\000\002\001\001\000\006\007\064\013\u017b" +
    "\001\001\000\002\001\001\000\006\007\064\013\u017d\001" +
    "\001\000\002\001\001\000\006\007\064\013\u017f\001\001" +
    "\000\002\001\001\000\006\007\064\013\u0181\001\001\000" +
    "\002\001\001\000\006\007\064\013\u0183\001\001\000\002" +
    "\001\001\000\006\007\064\013\u0185\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\064\013" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\064\013\u0190\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u0194\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\064\013\u0196\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\004\u0199" +
    "\005\016\006\013\007\024\010\022\012\003\016\010\021" +
    "\007\022\020\025\023\001\001\000\024\005\036\006\013" +
    "\007\024\010\022\012\003\016\010\021\007\022\020\025" +
    "\023\001\001\000\004\031\u019b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\u019f\005" +
    "\016\006\013\007\024\010\022\012\003\016\010\021\007" +
    "\022\020\025\023\001\001\000\024\005\036\006\013\007" +
    "\024\010\022\012\003\016\010\021\007\022\020\025\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= FALSO 
            {
              nodo RESULT =null;
		 RESULT = new bool(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= VERDADERO 
            {
              nodo RESULT =null;
		 RESULT = new bool(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= call_f 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= E DOT ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_getArr(e, i, Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= ID LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= E DOT ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= ID 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= ID DOT CREARBOTON LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo r = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo v = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Boton(i, f, t, c, x, y, r, v, h, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= ID DOT CREARCONTENEDOR LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo b = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Panel(i, h, w, c, b, x, y); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= CREARVENTANA LPAR E COMMA E COMMA E COMMA ID RPAR 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Ventana(c, h, w, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= E Q E COLON E 
            {
              nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new inline_if(c, t, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= E DOT ALGUNO LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Alguno(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E ::= E DOT TODOS LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Todos(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E ::= E DOT REDUCE LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Reduce(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= E DOT BUSCAR LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Buscar(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // E ::= E DOT FILTRAR LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Filtrar(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E ::= E DOT MAP LPAR ID RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Map(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E ::= E DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E ::= E DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= E DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E ::= E DOT MINIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Minimo(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= E DOT MAXIMO LPAR RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Maximo(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // E ::= E MINUSMINUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= E PLUSPLUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "u-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WIN_FN ::= ID DOT CREARIMAGEN LPAR E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo r = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imagen(i, r, x, y, h, w); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WIN_FN ::= ID DOT CREARDESPLEGABLE LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Desplegable(i, h, w, l, x, y, d, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WIN_FN ::= ID DOT CREARNUMERICO LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo max = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo min = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Numerico(i, h, w, max, min, x, y, d, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WIN_FN ::= ID DOT CREARAREA LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo name = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AreaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WIN_FN ::= ID DOT CREARCAJA LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-25)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		nodo h = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		nodo w = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo name = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CajaTexto(i, h, w, f, t, c, x, y, n, cur, d, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-25)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WIN_FN ::= ID DOT CREARTEXTO LPAR E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E COMMA E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		nodo t = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		nodo x = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nodo y = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo n = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int curleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int curright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nodo cur = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo v = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Texto(i, f, t, c, x, y, n, cur, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WIN_FN ::= ID DOT ALCARGAR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new AlCargar(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WIN_FN",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARR_FN ::= ID DOT ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARR_FN ::= ID DOT INVERTIR LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new INVERTIR(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARR_FN ::= ID DOT ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARR_FN ::= ID DOT ASCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new ASCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARR_FN ::= ID DOT ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(o, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARR_FN ::= ID DOT DESCENDENTE LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new DESCENDENTE(null, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARR_FN",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASE ::= DEFECTO COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(null, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASE ::= CASO E COLON LCURL A RCURL 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CASE ::= CASO E COLON LCURL A RCURL CASE 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> tmp = new LinkedList<>();
                                                                                   tmp.add(new CASE(e, a));
                                                                                   tmp.addAll(c);
                                                                                   RESULT = tmp;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH ::= SELECCIONA LPAR E RPAR LCURL CASE RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SWITCH(e, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELSE ::= SINO LCURL A RCURL 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ELSE(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELSE_IF ::= ELSE 
            {
              nodo RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo el = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF_ELSE(e, a, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELSE_IF ::= SINO SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSE_IF",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= SI LPAR E RPAR LCURL A RCURL ELSE_IF 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int efleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int efright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo ef = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IF_ELSE(e, a, ef); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= SI LPAR E RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IF(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IF",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Obj_a ::= ID COLON LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_a_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Obj_a ::= ID COLON LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new Obj_a_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Obj_a ::= ID COLON E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_a(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Obj_a",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // l_Obj_a ::= Obj_a 
            {
              LinkedList RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(o);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // l_Obj_a ::= l_Obj_a COMMA Obj_a 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo o = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(o);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_Obj_a",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Asign ::= ID DIVEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Asign ::= ID TIMESEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Asign ::= ID MINUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Asign ::= ID PLUSEQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_oper(i, e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Asign ::= ID MINUSMINUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(new getId(i), -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Asign ::= ID PLUSPLUS 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(new getId(i), 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Asign ::= ID DOT ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putArr(o, i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Asign ::= ID DOT ID EQ E 
            {
              nodo RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_putId(o, i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Asign ::= ID LBRACK NUM RBRACK EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign_arr(i, Integer.parseInt(p), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Asign ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new asign(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asign",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Dec_ ::= ID EQ LBRACK l_E RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new dec_arr(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Dec_ ::= ID EQ LBRACK RBRACK 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new dec_arr(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Dec_ ::= ID EQ LCURL l_Obj_a RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Dec_ ::= ID EQ E 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Dec_ ::= ID 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new dec(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec_",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Dec ::= VAR Dec_ 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Dec ::= Dec COMMA Dec_ 
            {
              nodo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new l_dec(l, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // l_para ::= VAR ID 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(i);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // l_para ::= l_para COMMA VAR ID 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(i);
                                                                                   RESULT = l; 
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_para",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // call_f ::= ID LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // call_f ::= ID LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Func ::= FUNCION ID LPAR RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, null, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Func ::= FUNCION ID LPAR l_para RPAR LCURL A RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Func(i, l, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Func",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // As ::= WIN_FN SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // As ::= ARR_FN SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // As ::= SWITCH 
            {
              nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo s = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // As ::= IF 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // As ::= call_f SEMI 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // As ::= Func 
            {
              nodo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo f = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // As ::= RETORNAR E SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new retornar(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // As ::= DETENER SEMI 
            {
              nodo RESULT =null;
		 RESULT = new detener(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // As ::= IMPRIMIR LPAR E RPAR SEMI 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new imprimir(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // As ::= Asign SEMI 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // As ::= Dec SEMI 
            {
              nodo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo d = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("As",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // A ::= As 
            {
              nodo RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // A ::= A As 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo as = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new a_l(a, as); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("A",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= A 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ambient(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

