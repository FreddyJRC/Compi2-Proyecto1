/* The following code was generated by JFlex 1.6.1 */

package grammar_fs;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\75"+
    "\1\60\1\0\1\6\1\0\1\76\1\0\1\63\1\64\1\5\1\67"+
    "\1\102\1\70\1\11\1\4\12\10\1\100\1\101\1\74\1\71\1\73"+
    "\1\103\1\0\1\34\1\56\1\53\1\36\1\47\1\23\1\44\1\6"+
    "\1\51\2\6\1\43\1\6\1\52\1\45\1\46\1\6\1\57\1\6"+
    "\1\54\1\6\1\16\4\6\1\65\1\104\1\66\1\72\1\6\1\0"+
    "\1\22\1\41\1\32\1\21\1\17\1\33\1\42\1\37\1\26\1\55"+
    "\1\6\1\14\1\27\1\12\1\15\1\30\1\50\1\20\1\24\1\31"+
    "\1\13\1\25\1\6\1\40\1\35\1\6\1\61\1\77\1\62\1\0"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6"+
    "\1\0\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6"+
    "\5\0\3\6\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7"+
    "\3\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7"+
    "\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0"+
    "\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7"+
    "\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6"+
    "\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7"+
    "\104\0\25\6\56\0\41\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6"+
    "\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\7\0\1\6\7\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\11\0\1\6\6\0\4\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\1\0\3\6\5\0\2\6\2\7\2\0"+
    "\12\7\21\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7"+
    "\1\0\2\6\16\0\3\7\1\0\10\6\1\0\3\6\1\0\51\6"+
    "\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7"+
    "\7\0\3\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0"+
    "\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0"+
    "\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0"+
    "\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7"+
    "\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0"+
    "\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0"+
    "\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7"+
    "\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6"+
    "\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7"+
    "\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6"+
    "\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7"+
    "\40\0\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6"+
    "\1\0\32\6\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6"+
    "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"+
    "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"+
    "\1\7\2\0\12\7\41\0\4\7\1\0\12\7\6\0\130\6\10\0"+
    "\51\6\1\7\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6"+
    "\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7"+
    "\2\0\13\7\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7"+
    "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"+
    "\15\7\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7"+
    "\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7"+
    "\4\6\3\7\2\6\1\0\2\7\6\0\300\6\66\7\6\0\4\7"+
    "\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0"+
    "\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0"+
    "\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0"+
    "\5\7\20\0\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0"+
    "\1\6\15\0\1\6\20\0\15\6\3\0\37\6\21\0\15\7\4\0"+
    "\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0"+
    "\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0"+
    "\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7"+
    "\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0"+
    "\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0"+
    "\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0"+
    "\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0"+
    "\20\6\u0200\0\u19b6\6\112\0\u51d6\6\52\0\u048d\6\103\0\56\6\2\0"+
    "\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7"+
    "\1\0\37\6\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\43\6\2\0\10\6\77\0\13\6\1\7\3\6\1\7\4\6\1\7"+
    "\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7"+
    "\13\0\12\7\6\0\22\7\6\6\3\0\1\6\1\0\1\6\2\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7"+
    "\5\6\1\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0"+
    "\12\7\6\0\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7"+
    "\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0"+
    "\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0"+
    "\6\6\11\0\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0"+
    "\163\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6"+
    "\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6"+
    "\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6"+
    "\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6"+
    "\2\0\66\6\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6"+
    "\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7"+
    "\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6"+
    "\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6"+
    "\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6"+
    "\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6"+
    "\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\17\0\1\7"+
    "\37\0\40\6\20\0\33\6\5\0\46\6\5\7\5\0\36\6\2\0"+
    "\44\6\4\0\10\6\1\0\5\6\52\0\236\6\2\0\12\7\126\0"+
    "\50\6\10\0\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0"+
    "\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0"+
    "\27\6\12\0\27\6\11\0\37\6\101\0\23\6\1\0\2\6\12\0"+
    "\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7"+
    "\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0"+
    "\3\7\4\0\1\7\40\0\35\6\3\0\35\6\43\0\10\6\1\0"+
    "\34\6\2\7\31\0\66\6\12\0\26\6\12\0\23\6\15\0\22\6"+
    "\156\0\111\6\67\0\63\6\15\0\63\6\u030d\0\3\7\65\6\17\7"+
    "\37\0\12\7\17\0\4\7\55\6\13\7\2\0\1\7\22\0\31\6"+
    "\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7\20\0\43\6"+
    "\1\7\2\0\1\6\11\0\3\7\60\6\16\7\4\6\5\0\3\7"+
    "\3\0\12\7\1\6\1\0\1\6\43\0\22\6\1\0\31\6\14\7"+
    "\110\0\7\6\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6"+
    "\7\0\57\6\14\7\5\0\12\7\6\0\4\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\2\0\1\6\6\0"+
    "\1\7\5\0\5\6\2\7\2\0\7\7\3\0\5\7\u010b\0\60\6"+
    "\24\7\2\6\1\0\1\6\10\0\12\7\246\0\57\6\7\7\2\0"+
    "\11\7\27\0\4\6\2\7\42\0\60\6\21\7\3\0\1\6\13\0"+
    "\12\7\46\0\53\6\15\7\10\0\12\7\66\0\32\6\3\0\17\7"+
    "\4\0\12\7\u0166\0\100\6\12\7\25\0\1\6\u01c0\0\71\6\u0507\0"+
    "\u039a\6\146\0\157\6\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0"+
    "\u0239\6\7\0\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0"+
    "\60\6\7\7\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6"+
    "\u0370\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6"+
    "\u0bfe\0\153\6\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7"+
    "\1\0\4\7\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7"+
    "\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6"+
    "\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6"+
    "\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6"+
    "\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6"+
    "\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\10\6\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7"+
    "\16\0\1\7\26\0\5\7\1\0\17\7\u0d50\0\305\6\13\0\7\7"+
    "\u0529\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6"+
    "\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6"+
    "\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6"+
    "\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6"+
    "\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6"+
    "\13\0\336\6\2\0\u1682\6\u295e\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\22\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\2"+
    "\1\0\1\35\1\36\1\0\10\5\1\37\17\5\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\0\1\6\14\5"+
    "\1\56\2\5\1\57\14\5\1\0\1\2\1\60\12\5"+
    "\1\61\7\5\1\62\21\5\1\63\6\5\1\64\13\5"+
    "\1\65\4\5\1\66\5\5\1\67\1\70\3\5\1\71"+
    "\2\5\1\72\15\5\1\73\1\74\6\5\1\75\1\76"+
    "\17\5\1\77\3\5\1\100\1\101\1\102\1\5\1\103"+
    "\1\104\1\105\13\5\1\106\20\5\1\107\1\110\3\5"+
    "\1\111\6\5\1\112\1\113\1\5\1\114\7\5\1\115"+
    "\6\5\1\116\1\5\1\117\22\5\1\120\3\5\1\121"+
    "\5\5\1\122\4\5\1\123\1\124\1\5\1\125\4\5"+
    "\1\126\4\5\1\127\1\5\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\212\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\212\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381"+
    "\0\u03c6\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9"+
    "\0\u05ee\0\u0633\0\u0678\0\u06bd\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\u0702\0\u0747\0\u078c\0\212\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\212\0\212\0\212\0\212"+
    "\0\u092a\0\212\0\u096f\0\u09b4\0\u09f9\0\212\0\212\0\u0a3e"+
    "\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u0c21\0\u0c66"+
    "\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e"+
    "\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\u10fb\0\u1140"+
    "\0\u0a3e\0\u1185\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u019e\0\u14c1\0\u1506"+
    "\0\u019e\0\u154b\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9"+
    "\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u10fb\0\u019e"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25\0\u1a6a\0\u1aaf"+
    "\0\u1af4\0\u1b39\0\u019e\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92"+
    "\0\u1cd7\0\u1d1c\0\u019e\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75"+
    "\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d"+
    "\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u019e\0\u21f6\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u019e\0\u2394\0\u23d9\0\u241e\0\u2463"+
    "\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601\0\u2646\0\u019e"+
    "\0\u268b\0\u26d0\0\u2715\0\u275a\0\u019e\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u019e\0\u019e\0\u28f8\0\u293d\0\u2982\0\u019e"+
    "\0\u29c7\0\u2a0c\0\u019e\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65"+
    "\0\u2baa\0\u2bef\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d"+
    "\0\u019e\0\u019e\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b"+
    "\0\u019e\0\u019e\0\u2f70\0\u2fb5\0\u2ffa\0\u303f\0\u3084\0\u30c9"+
    "\0\u310e\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1"+
    "\0\u3336\0\u019e\0\u337b\0\u33c0\0\u3405\0\u019e\0\u019e\0\u019e"+
    "\0\u344a\0\u019e\0\u019e\0\u019e\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u3741\0\u019e"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u389a\0\u38df\0\u3924\0\u3969"+
    "\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07\0\u3b4c\0\u3b91"+
    "\0\u019e\0\u019e\0\u3bd6\0\u3c1b\0\u3c60\0\u019e\0\u3ca5\0\u3cea"+
    "\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u019e\0\u019e\0\u3e43\0\u019e"+
    "\0\u3e88\0\u3ecd\0\u3f12\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u019e"+
    "\0\u406b\0\u40b0\0\u40f5\0\u413a\0\u417f\0\u41c4\0\u019e\0\u4209"+
    "\0\u019e\0\u424e\0\u4293\0\u42d8\0\u431d\0\u4362\0\u43a7\0\u43ec"+
    "\0\u4431\0\u4476\0\u44bb\0\u4500\0\u4545\0\u458a\0\u45cf\0\u4614"+
    "\0\u4659\0\u469e\0\u46e3\0\u019e\0\u4728\0\u476d\0\u47b2\0\u019e"+
    "\0\u47f7\0\u483c\0\u4881\0\u48c6\0\u490b\0\u019e\0\u4950\0\u4995"+
    "\0\u49da\0\u4a1f\0\u019e\0\u019e\0\u4a64\0\u019e\0\u4aa9\0\u4aee"+
    "\0\u4b33\0\u4b78\0\u019e\0\u4bbd\0\u4c02\0\u4c47\0\u4c8c\0\u019e"+
    "\0\u4cd1\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\3\10\1\14\1\10\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\10\1\25\1\26"+
    "\1\27\1\30\4\10\1\31\1\10\1\32\1\10\1\33"+
    "\5\10\1\34\4\10\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\3"+
    "\1\61\2\3\55\61\1\62\23\61\1\63\107\0\1\5"+
    "\106\0\1\64\1\65\63\0\1\66\104\0\1\67\21\0"+
    "\3\10\1\0\46\10\35\0\1\11\1\70\101\0\3\10"+
    "\1\0\1\10\1\71\44\10\33\0\3\10\1\0\5\10"+
    "\1\72\40\10\33\0\3\10\1\0\5\10\1\73\40\10"+
    "\33\0\3\10\1\0\5\10\1\74\40\10\33\0\3\10"+
    "\1\0\2\10\1\75\7\10\1\76\33\10\33\0\3\10"+
    "\1\0\10\10\1\77\35\10\33\0\3\10\1\0\5\10"+
    "\1\100\6\10\1\101\31\10\33\0\3\10\1\0\10\10"+
    "\1\102\35\10\33\0\3\10\1\0\1\103\14\10\1\104"+
    "\30\10\33\0\3\10\1\0\10\10\1\105\3\10\1\106"+
    "\31\10\33\0\3\10\1\0\3\10\1\107\42\10\33\0"+
    "\3\10\1\0\6\10\1\110\1\10\1\111\35\10\33\0"+
    "\3\10\1\0\1\10\1\112\12\10\1\113\31\10\33\0"+
    "\3\10\1\0\2\10\1\114\43\10\33\0\3\10\1\0"+
    "\1\10\1\115\44\10\33\0\3\10\1\0\5\10\1\116"+
    "\40\10\33\0\3\10\1\0\27\10\1\117\16\10\33\0"+
    "\3\10\1\0\6\10\1\120\37\10\114\0\1\121\1\0"+
    "\1\122\103\0\1\123\1\124\104\0\1\125\104\0\1\126"+
    "\104\0\1\127\104\0\1\130\111\0\1\131\105\0\1\132"+
    "\5\0\1\61\2\0\55\61\1\0\23\61\13\0\1\133"+
    "\5\0\1\134\10\0\1\135\26\0\1\136\24\0\1\64"+
    "\1\4\1\5\102\64\5\137\1\140\77\137\10\0\1\141"+
    "\102\0\3\10\1\0\2\10\1\142\43\10\33\0\3\10"+
    "\1\0\6\10\1\143\37\10\33\0\3\10\1\0\7\10"+
    "\1\144\7\10\1\145\26\10\33\0\3\10\1\0\12\10"+
    "\1\146\4\10\1\147\1\10\1\150\24\10\33\0\3\10"+
    "\1\0\30\10\1\151\15\10\33\0\3\10\1\0\20\10"+
    "\1\152\25\10\33\0\3\10\1\0\2\10\1\153\43\10"+
    "\33\0\3\10\1\0\2\10\1\154\43\10\33\0\3\10"+
    "\1\0\1\155\45\10\33\0\3\10\1\0\6\10\1\156"+
    "\37\10\33\0\3\10\1\0\13\10\1\157\32\10\33\0"+
    "\3\10\1\0\16\10\1\160\27\10\33\0\3\10\1\0"+
    "\16\10\1\161\7\10\1\162\17\10\33\0\3\10\1\0"+
    "\1\163\45\10\33\0\3\10\1\0\7\10\1\164\36\10"+
    "\33\0\3\10\1\0\5\10\1\165\40\10\33\0\3\10"+
    "\1\0\12\10\1\166\33\10\33\0\3\10\1\0\1\167"+
    "\45\10\33\0\3\10\1\0\2\10\1\170\43\10\33\0"+
    "\3\10\1\0\41\10\1\171\4\10\33\0\3\10\1\0"+
    "\12\10\1\172\33\10\33\0\3\10\1\0\5\10\1\173"+
    "\40\10\33\0\3\10\1\0\17\10\1\174\26\10\33\0"+
    "\3\10\1\0\5\10\1\175\40\10\25\0\5\137\1\176"+
    "\103\137\1\177\1\176\77\137\6\0\3\10\1\0\3\10"+
    "\1\200\42\10\33\0\3\10\1\0\7\10\1\201\36\10"+
    "\33\0\3\10\1\0\1\10\1\202\44\10\33\0\3\10"+
    "\1\0\3\10\1\203\42\10\33\0\3\10\1\0\20\10"+
    "\1\204\25\10\33\0\3\10\1\0\5\10\1\205\40\10"+
    "\33\0\3\10\1\0\5\10\1\206\40\10\33\0\3\10"+
    "\1\0\1\10\1\207\44\10\33\0\3\10\1\0\5\10"+
    "\1\210\40\10\33\0\3\10\1\0\12\10\1\211\33\10"+
    "\33\0\3\10\1\0\5\10\1\212\40\10\33\0\3\10"+
    "\1\0\3\10\1\213\42\10\33\0\3\10\1\0\5\10"+
    "\1\214\40\10\33\0\3\10\1\0\3\10\1\215\2\10"+
    "\1\216\37\10\33\0\3\10\1\0\14\10\1\217\31\10"+
    "\33\0\3\10\1\0\14\10\1\220\31\10\33\0\3\10"+
    "\1\0\3\10\1\221\42\10\33\0\3\10\1\0\10\10"+
    "\1\222\35\10\33\0\3\10\1\0\3\10\1\223\42\10"+
    "\33\0\3\10\1\0\20\10\1\224\25\10\33\0\3\10"+
    "\1\0\17\10\1\225\26\10\33\0\3\10\1\0\2\10"+
    "\1\226\2\10\1\227\2\10\1\230\35\10\33\0\3\10"+
    "\1\0\20\10\1\231\25\10\33\0\3\10\1\0\6\10"+
    "\1\232\37\10\33\0\3\10\1\0\5\10\1\233\40\10"+
    "\33\0\3\10\1\0\10\10\1\234\35\10\25\0\4\137"+
    "\1\5\1\176\77\137\6\0\3\10\1\0\10\10\1\235"+
    "\35\10\33\0\3\10\1\0\20\10\1\236\25\10\33\0"+
    "\3\10\1\0\6\10\1\237\37\10\33\0\3\10\1\0"+
    "\5\10\1\240\40\10\33\0\3\10\1\0\1\241\45\10"+
    "\33\0\3\10\1\0\20\10\1\242\25\10\33\0\3\10"+
    "\1\0\1\243\45\10\33\0\3\10\1\0\1\244\45\10"+
    "\33\0\3\10\1\0\3\10\1\245\42\10\33\0\3\10"+
    "\1\0\20\10\1\246\25\10\33\0\3\10\1\0\6\10"+
    "\1\247\37\10\33\0\3\10\1\0\6\10\1\250\37\10"+
    "\33\0\3\10\1\0\14\10\1\251\31\10\33\0\3\10"+
    "\1\0\15\10\1\252\30\10\33\0\3\10\1\0\15\10"+
    "\1\253\30\10\33\0\3\10\1\0\12\10\1\254\33\10"+
    "\33\0\3\10\1\0\6\10\1\255\37\10\33\0\3\10"+
    "\1\0\14\10\1\256\31\10\33\0\3\10\1\0\6\10"+
    "\1\257\37\10\33\0\3\10\1\0\14\10\1\260\31\10"+
    "\33\0\3\10\1\0\6\10\1\261\37\10\33\0\3\10"+
    "\1\0\6\10\1\262\37\10\33\0\3\10\1\0\10\10"+
    "\1\263\35\10\33\0\3\10\1\0\32\10\1\264\13\10"+
    "\33\0\3\10\1\0\1\265\45\10\33\0\3\10\1\0"+
    "\6\10\1\266\37\10\33\0\3\10\1\0\7\10\1\267"+
    "\36\10\33\0\3\10\1\0\5\10\1\270\40\10\33\0"+
    "\3\10\1\0\1\271\45\10\33\0\3\10\1\0\1\272"+
    "\45\10\33\0\3\10\1\0\5\10\1\273\40\10\33\0"+
    "\3\10\1\0\17\10\1\274\26\10\33\0\3\10\1\0"+
    "\3\10\1\275\42\10\33\0\3\10\1\0\7\10\1\276"+
    "\36\10\33\0\3\10\1\0\20\10\1\277\25\10\33\0"+
    "\3\10\1\0\17\10\1\300\26\10\33\0\3\10\1\0"+
    "\17\10\1\301\26\10\33\0\3\10\1\0\15\10\1\302"+
    "\30\10\33\0\3\10\1\0\3\10\1\303\42\10\33\0"+
    "\3\10\1\0\3\10\1\304\42\10\33\0\3\10\1\0"+
    "\22\10\1\305\23\10\33\0\3\10\1\0\3\10\1\306"+
    "\42\10\33\0\3\10\1\0\10\10\1\307\35\10\33\0"+
    "\3\10\1\0\20\10\1\310\25\10\33\0\3\10\1\0"+
    "\6\10\1\311\37\10\33\0\3\10\1\0\30\10\1\312"+
    "\15\10\33\0\3\10\1\0\6\10\1\313\37\10\33\0"+
    "\3\10\1\0\26\10\1\314\17\10\33\0\3\10\1\0"+
    "\5\10\1\315\40\10\33\0\3\10\1\0\4\10\1\316"+
    "\15\10\1\317\1\10\1\320\12\10\1\321\1\10\1\322"+
    "\1\323\1\10\1\324\1\325\33\0\3\10\1\0\5\10"+
    "\1\326\40\10\33\0\3\10\1\0\10\10\1\327\35\10"+
    "\33\0\3\10\1\0\7\10\1\330\36\10\33\0\3\10"+
    "\1\0\6\10\1\331\37\10\33\0\3\10\1\0\3\10"+
    "\1\332\42\10\33\0\3\10\1\0\5\10\1\333\40\10"+
    "\33\0\3\10\1\0\14\10\1\334\31\10\33\0\3\10"+
    "\1\0\14\10\1\335\31\10\33\0\3\10\1\0\10\10"+
    "\1\336\35\10\33\0\3\10\1\0\14\10\1\337\31\10"+
    "\33\0\3\10\1\0\6\10\1\340\37\10\33\0\3\10"+
    "\1\0\1\341\45\10\33\0\3\10\1\0\6\10\1\342"+
    "\37\10\33\0\3\10\1\0\10\10\1\343\35\10\33\0"+
    "\3\10\1\0\10\10\1\344\35\10\33\0\3\10\1\0"+
    "\15\10\1\345\30\10\33\0\3\10\1\0\6\10\1\346"+
    "\37\10\33\0\3\10\1\0\5\10\1\347\6\10\1\350"+
    "\31\10\33\0\3\10\1\0\6\10\1\351\37\10\33\0"+
    "\3\10\1\0\5\10\1\352\40\10\33\0\3\10\1\0"+
    "\15\10\1\353\30\10\33\0\3\10\1\0\3\10\1\354"+
    "\4\10\1\355\35\10\33\0\3\10\1\0\5\10\1\356"+
    "\40\10\33\0\3\10\1\0\3\10\1\357\42\10\33\0"+
    "\3\10\1\0\5\10\1\360\40\10\33\0\3\10\1\0"+
    "\6\10\1\361\37\10\33\0\3\10\1\0\6\10\1\362"+
    "\37\10\33\0\3\10\1\0\5\10\1\363\40\10\33\0"+
    "\3\10\1\0\1\364\45\10\33\0\3\10\1\0\3\10"+
    "\1\365\42\10\33\0\3\10\1\0\6\10\1\366\37\10"+
    "\33\0\3\10\1\0\6\10\1\367\37\10\33\0\3\10"+
    "\1\0\6\10\1\370\37\10\33\0\3\10\1\0\6\10"+
    "\1\371\37\10\33\0\3\10\1\0\6\10\1\372\37\10"+
    "\33\0\3\10\1\0\6\10\1\373\37\10\33\0\3\10"+
    "\1\0\2\10\1\374\43\10\33\0\3\10\1\0\34\10"+
    "\1\375\11\10\33\0\3\10\1\0\1\376\45\10\33\0"+
    "\3\10\1\0\7\10\1\377\36\10\33\0\3\10\1\0"+
    "\5\10\1\u0100\40\10\33\0\3\10\1\0\12\10\1\u0101"+
    "\33\10\33\0\3\10\1\0\10\10\1\u0102\35\10\33\0"+
    "\3\10\1\0\1\u0103\45\10\33\0\3\10\1\0\43\10"+
    "\1\u0104\2\10\33\0\3\10\1\0\26\10\1\u0105\17\10"+
    "\33\0\3\10\1\0\17\10\1\u0106\26\10\33\0\3\10"+
    "\1\0\16\10\1\u0107\27\10\33\0\3\10\1\0\3\10"+
    "\1\u0108\42\10\33\0\3\10\1\0\1\u0109\45\10\33\0"+
    "\3\10\1\0\17\10\1\u010a\26\10\33\0\3\10\1\0"+
    "\1\u010b\45\10\33\0\3\10\1\0\10\10\1\u010c\35\10"+
    "\33\0\3\10\1\0\3\10\1\u010d\42\10\33\0\3\10"+
    "\1\0\17\10\1\u010e\26\10\33\0\3\10\1\0\5\10"+
    "\1\u010f\40\10\33\0\3\10\1\0\10\10\1\u0110\35\10"+
    "\33\0\3\10\1\0\16\10\1\u0111\27\10\33\0\3\10"+
    "\1\0\30\10\1\u0112\15\10\33\0\3\10\1\0\17\10"+
    "\1\u0113\26\10\33\0\3\10\1\0\10\10\1\u0114\35\10"+
    "\33\0\3\10\1\0\17\10\1\u0115\26\10\33\0\3\10"+
    "\1\0\3\10\1\u0116\42\10\33\0\3\10\1\0\6\10"+
    "\1\u0117\37\10\33\0\3\10\1\0\17\10\1\u0118\26\10"+
    "\33\0\3\10\1\0\5\10\1\u0119\40\10\33\0\3\10"+
    "\1\0\10\10\1\u011a\35\10\33\0\3\10\1\0\23\10"+
    "\1\u011b\22\10\33\0\3\10\1\0\6\10\1\u011c\37\10"+
    "\33\0\3\10\1\0\10\10\1\u011d\35\10\33\0\3\10"+
    "\1\0\3\10\1\u011e\42\10\33\0\3\10\1\0\42\10"+
    "\1\u011f\3\10\33\0\3\10\1\0\2\10\1\u0120\43\10"+
    "\33\0\3\10\1\0\5\10\1\u0121\40\10\33\0\3\10"+
    "\1\0\5\10\1\u0122\1\u0123\37\10\33\0\3\10\1\0"+
    "\42\10\1\u0124\3\10\33\0\3\10\1\0\3\10\1\u0125"+
    "\42\10\33\0\3\10\1\0\1\u0126\45\10\33\0\3\10"+
    "\1\0\3\10\1\u0127\42\10\33\0\3\10\1\0\5\10"+
    "\1\u0128\40\10\33\0\3\10\1\0\24\10\1\u0129\21\10"+
    "\33\0\3\10\1\0\35\10\1\u012a\1\10\1\u012b\1\u012c"+
    "\5\10\33\0\3\10\1\0\1\u012d\45\10\33\0\3\10"+
    "\1\0\5\10\1\u012e\40\10\33\0\3\10\1\0\5\10"+
    "\1\u012f\40\10\33\0\3\10\1\0\1\u0130\45\10\33\0"+
    "\3\10\1\0\1\u0131\45\10\33\0\3\10\1\0\3\10"+
    "\1\u0132\42\10\33\0\3\10\1\0\5\10\1\u0133\40\10"+
    "\33\0\3\10\1\0\7\10\1\u0134\36\10\33\0\3\10"+
    "\1\0\5\10\1\u0135\40\10\33\0\3\10\1\0\17\10"+
    "\1\u0136\26\10\33\0\3\10\1\0\7\10\1\u0137\36\10"+
    "\33\0\3\10\1\0\3\10\1\u0138\42\10\33\0\3\10"+
    "\1\0\10\10\1\u0139\35\10\33\0\3\10\1\0\26\10"+
    "\1\u013a\17\10\33\0\3\10\1\0\30\10\1\u013b\15\10"+
    "\33\0\3\10\1\0\5\10\1\u013c\40\10\33\0\3\10"+
    "\1\0\2\10\1\u013d\43\10\33\0\3\10\1\0\26\10"+
    "\1\u013e\17\10\33\0\3\10\1\0\1\10\1\u013f\44\10"+
    "\33\0\3\10\1\0\12\10\1\u0140\33\10\33\0\3\10"+
    "\1\0\14\10\1\u0141\31\10\33\0\3\10\1\0\15\10"+
    "\1\u0142\30\10\33\0\3\10\1\0\17\10\1\u0143\26\10"+
    "\33\0\3\10\1\0\10\10\1\u0144\35\10\33\0\3\10"+
    "\1\0\7\10\1\u0145\36\10\33\0\3\10\1\0\40\10"+
    "\1\u0146\5\10\33\0\3\10\1\0\17\10\1\u0147\26\10"+
    "\33\0\3\10\1\0\20\10\1\u0148\25\10\33\0\3\10"+
    "\1\0\7\10\1\u0149\36\10\33\0\3\10\1\0\36\10"+
    "\1\u014a\7\10\33\0\3\10\1\0\27\10\1\u014b\16\10"+
    "\33\0\3\10\1\0\3\10\1\u014c\42\10\33\0\3\10"+
    "\1\0\27\10\1\u014d\16\10\33\0\3\10\1\0\3\10"+
    "\1\u014e\42\10\33\0\3\10\1\0\1\10\1\u014f\44\10"+
    "\33\0\3\10\1\0\3\10\1\u0150\42\10\33\0\3\10"+
    "\1\0\17\10\1\u0151\26\10\33\0\3\10\1\0\5\10"+
    "\1\u0152\40\10\33\0\3\10\1\0\1\10\1\u0153\44\10"+
    "\33\0\3\10\1\0\6\10\1\u0154\37\10\33\0\3\10"+
    "\1\0\2\10\1\u0155\43\10\33\0\3\10\1\0\6\10"+
    "\1\u0156\37\10\33\0\3\10\1\0\15\10\1\u0157\30\10"+
    "\33\0\3\10\1\0\3\10\1\u0158\42\10\33\0\3\10"+
    "\1\0\22\10\1\u0159\23\10\33\0\3\10\1\0\5\10"+
    "\1\u015a\40\10\33\0\3\10\1\0\5\10\1\u015b\40\10"+
    "\33\0\3\10\1\0\5\10\1\u015c\40\10\33\0\3\10"+
    "\1\0\5\10\1\u015d\40\10\33\0\3\10\1\0\6\10"+
    "\1\u015e\37\10\33\0\3\10\1\0\6\10\1\u015f\37\10"+
    "\33\0\3\10\1\0\17\10\1\u0160\26\10\33\0\3\10"+
    "\1\0\6\10\1\u0161\37\10\33\0\3\10\1\0\20\10"+
    "\1\u0162\25\10\33\0\3\10\1\0\10\10\1\u0163\35\10"+
    "\33\0\3\10\1\0\14\10\1\u0164\31\10\33\0\3\10"+
    "\1\0\25\10\1\u0165\20\10\33\0\3\10\1\0\20\10"+
    "\1\u0166\25\10\33\0\3\10\1\0\14\10\1\u0167\31\10"+
    "\33\0\3\10\1\0\3\10\1\u0168\42\10\33\0\3\10"+
    "\1\0\13\10\1\u0169\32\10\33\0\3\10\1\0\3\10"+
    "\1\u016a\42\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[19734];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\4\1\1\11\22\1\7\11"+
    "\3\1\1\11\5\1\4\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\0\30\1\16\11\2\0\35\1\1\0\354\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[362];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3292) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                        yytext()+">");
            }
          case 89: break;
          case 2: 
            { /* ignore */
            }
          case 90: break;
          case 3: 
            { return symbol(sym.DIV);
            }
          case 91: break;
          case 4: 
            { return symbol(sym.TIMES);
            }
          case 92: break;
          case 5: 
            { return symbol(sym.ID);
            }
          case 93: break;
          case 6: 
            { return symbol(sym.NUM, yytext());
            }
          case 94: break;
          case 7: 
            { return symbol(sym.DOT);
            }
          case 95: break;
          case 8: 
            { string.setLength(0); yybegin(STRING);
            }
          case 96: break;
          case 9: 
            { return symbol(sym.LCURL);
            }
          case 97: break;
          case 10: 
            { return symbol(sym.RCURL);
            }
          case 98: break;
          case 11: 
            { return symbol(sym.LPAR);
            }
          case 99: break;
          case 12: 
            { return symbol(sym.RPAR);
            }
          case 100: break;
          case 13: 
            { return symbol(sym.LBRACK);
            }
          case 101: break;
          case 14: 
            { return symbol(sym.RBRACK);
            }
          case 102: break;
          case 15: 
            { return symbol(sym.PLUS);
            }
          case 103: break;
          case 16: 
            { return symbol(sym.MINUS);
            }
          case 104: break;
          case 17: 
            { return symbol(sym.EQ);
            }
          case 105: break;
          case 18: 
            { return symbol(sym.POW);
            }
          case 106: break;
          case 19: 
            { return symbol(sym.MORETHAN);
            }
          case 107: break;
          case 20: 
            { return symbol(sym.LESSTHAN);
            }
          case 108: break;
          case 21: 
            { return symbol(sym.NOT);
            }
          case 109: break;
          case 22: 
            { return symbol(sym.COLON);
            }
          case 110: break;
          case 23: 
            { return symbol(sym.SEMI);
            }
          case 111: break;
          case 24: 
            { return symbol(sym.COMMA);
            }
          case 112: break;
          case 25: 
            { return symbol(sym.Q);
            }
          case 113: break;
          case 26: 
            { string.append( yytext() );
            }
          case 114: break;
          case 27: 
            { yybegin(YYINITIAL); 
                                         return symbol(sym.STRING, 
                                         string.toString());
            }
          case 115: break;
          case 28: 
            { string.append('\\');
            }
          case 116: break;
          case 29: 
            { return symbol(sym.DIVEQ);
            }
          case 117: break;
          case 30: 
            { return symbol(sym.TIMESEQ);
            }
          case 118: break;
          case 31: 
            { return symbol(sym.SI);
            }
          case 119: break;
          case 32: 
            { return symbol(sym.PLUSPLUS);
            }
          case 120: break;
          case 33: 
            { return symbol(sym.PLUSEQ);
            }
          case 121: break;
          case 34: 
            { return symbol(sym.MINUSMINUS);
            }
          case 122: break;
          case 35: 
            { return symbol(sym.MINUSEQ);
            }
          case 123: break;
          case 36: 
            { return symbol(sym.EQEQ);
            }
          case 124: break;
          case 37: 
            { return symbol(sym.MORETHANEQ);
            }
          case 125: break;
          case 38: 
            { return symbol(sym.LESSTHANEQ);
            }
          case 126: break;
          case 39: 
            { return symbol(sym.NOTEQ);
            }
          case 127: break;
          case 40: 
            { return symbol(sym.AND);
            }
          case 128: break;
          case 41: 
            { return symbol(sym.OR);
            }
          case 129: break;
          case 42: 
            { string.append('\n');
            }
          case 130: break;
          case 43: 
            { string.append('\r');
            }
          case 131: break;
          case 44: 
            { string.append('\t');
            }
          case 132: break;
          case 45: 
            { string.append('\"');
            }
          case 133: break;
          case 46: 
            { return symbol(sym.VAR);
            }
          case 134: break;
          case 47: 
            { return symbol(sym.MAP);
            }
          case 135: break;
          case 48: 
            { return symbol(sym.NULO);
            }
          case 136: break;
          case 49: 
            { return symbol(sym.SINO);
            }
          case 137: break;
          case 50: 
            { return symbol(sym.CASO);
            }
          case 138: break;
          case 51: 
            { return symbol(sym.FALSO);
            }
          case 139: break;
          case 52: 
            { return symbol(sym.TODOS);
            }
          case 140: break;
          case 53: 
            { return symbol(sym.REDUCE);
            }
          case 141: break;
          case 54: 
            { return symbol(sym.ALGUNO);
            }
          case 142: break;
          case 55: 
            { return symbol(sym.MAXIMO);
            }
          case 143: break;
          case 56: 
            { return symbol(sym.MINIMO);
            }
          case 144: break;
          case 57: 
            { return symbol(sym.ALCLIC);
            }
          case 145: break;
          case 58: 
            { return symbol(sym.BUSCAR);
            }
          case 146: break;
          case 59: 
            { return symbol(sym.DETENER);
            }
          case 147: break;
          case 60: 
            { return symbol(sym.DEFECTO);
            }
          case 148: break;
          case 61: 
            { return symbol(sym.FUNCION);
            }
          case 149: break;
          case 62: 
            { return symbol(sym.FILTRAR);
            }
          case 150: break;
          case 63: 
            { return symbol(sym.RETORNAR);
            }
          case 151: break;
          case 64: 
            { return symbol(sym.INVERTIR);
            }
          case 152: break;
          case 65: 
            { return symbol(sym.IMPORTAR);
            }
          case 153: break;
          case 66: 
            { return symbol(sym.IMPRIMIR);
            }
          case 154: break;
          case 67: 
            { return symbol(sym.ALCERRAR);
            }
          case 155: break;
          case 68: 
            { return symbol(sym.ALCARGAR);
            }
          case 156: break;
          case 69: 
            { return symbol(sym.LEERGXML);
            }
          case 157: break;
          case 70: 
            { return symbol(sym.VERDADERO);
            }
          case 158: break;
          case 71: 
            { return symbol(sym.ASCENDENTE);
            }
          case 159: break;
          case 72: 
            { return symbol(sym.SELECCIONA);
            }
          case 160: break;
          case 73: 
            { return symbol(sym.CREARVIDEO);
            }
          case 161: break;
          case 74: 
            { return symbol(sym.CREARTEXTO);
            }
          case 162: break;
          case 75: 
            { return symbol(sym.CREARBOTON);
            }
          case 163: break;
          case 76: 
            { return symbol(sym.DESCENDENTE);
            }
          case 164: break;
          case 77: 
            { return symbol(sym.CREARIMAGEN);
            }
          case 165: break;
          case 78: 
            { return symbol(sym.OPI);
            }
          case 166: break;
          case 79: 
            { return symbol(sym.CREARVENTANA);
            }
          case 167: break;
          case 80: 
            { return symbol(sym.CREARAREA);
            }
          case 168: break;
          case 81: 
            { return symbol(sym.CREARCAJA);
            }
          case 169: break;
          case 82: 
            { return symbol(sym.CREARCONTENEDOR);
            }
          case 170: break;
          case 83: 
            { return symbol(sym.OPN);
            }
          case 171: break;
          case 84: 
            { return symbol(sym.CREARDESPLEGABLE);
            }
          case 172: break;
          case 85: 
            { return symbol(sym.CREARREPRODUCTOR);
            }
          case 173: break;
          case 86: 
            { return symbol(sym.OPE);
            }
          case 174: break;
          case 87: 
            { return symbol(sym.CREARNUMERICO);
            }
          case 175: break;
          case 88: 
            { return symbol(sym.CADA);
            }
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
