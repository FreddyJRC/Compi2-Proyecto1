/* The following code was generated by JFlex 1.6.1 */

package grammar_fs;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\56"+
    "\1\41\1\0\1\6\1\0\1\57\1\0\1\44\1\45\1\5\1\50"+
    "\1\63\1\51\1\11\1\4\12\10\1\61\1\62\1\55\1\52\1\54"+
    "\1\64\1\0\1\22\1\35\1\31\1\21\1\17\1\23\1\36\1\33"+
    "\1\25\1\40\1\6\1\14\1\26\1\12\1\15\1\27\1\37\1\20"+
    "\1\24\1\30\1\13\1\16\1\6\1\34\1\32\1\6\1\46\1\65"+
    "\1\47\1\53\1\6\1\0\1\22\1\35\1\31\1\21\1\17\1\23"+
    "\1\36\1\33\1\25\1\40\1\6\1\14\1\26\1\12\1\15\1\27"+
    "\1\37\1\20\1\24\1\30\1\13\1\16\1\6\1\34\1\32\1\6"+
    "\1\42\1\60\1\43\1\0\41\7\2\0\4\6\4\0\1\6\2\0"+
    "\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6\1\0"+
    "\70\6\2\25\115\6\1\24\u0142\6\4\0\14\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6"+
    "\1\0\1\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\246\6\1\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\6\7\5\0\1\6\4\0\13\7\1\0\1\7\3\0\53\6"+
    "\37\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\25\6"+
    "\56\0\41\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7"+
    "\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\7\0\1\6\7\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0"+
    "\12\7\11\0\1\6\6\0\4\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\3\6\5\0\2\6\2\7\2\0\12\7\21\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\16\0\3\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\7\0\3\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\6\0\12\7\2\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\126\6\2\0\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6"+
    "\5\0\113\6\3\0\13\6\7\0\15\6\1\0\4\6\3\7\13\0"+
    "\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0"+
    "\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0"+
    "\12\7\41\0\4\7\1\0\12\7\6\0\130\6\10\0\51\6\1\7"+
    "\1\6\5\0\106\6\12\0\37\6\1\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\13\0\54\6\4\0\32\6\6\0\12\7"+
    "\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7"+
    "\6\0\12\7\15\0\1\6\10\0\16\7\102\0\5\7\57\6\21\7"+
    "\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6"+
    "\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6"+
    "\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7"+
    "\2\6\1\0\2\7\6\0\300\6\66\7\6\0\4\7\u0116\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7\20\0"+
    "\2\6\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6\15\0"+
    "\1\6\20\0\15\6\3\0\37\6\21\0\15\7\4\0\1\7\3\0"+
    "\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0"+
    "\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0"+
    "\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0"+
    "\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0"+
    "\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7"+
    "\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0"+
    "\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0"+
    "\u19b6\6\112\0\u51d6\6\52\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0"+
    "\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\37\6"+
    "\2\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0\43\6\2\0"+
    "\10\6\77\0\13\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7"+
    "\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7"+
    "\6\0\22\7\6\6\3\0\1\6\1\0\1\6\2\0\12\7\34\6"+
    "\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7"+
    "\16\0\1\6\12\7\6\0\5\6\1\7\12\6\12\7\5\6\1\0"+
    "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"+
    "\27\6\3\0\1\6\3\7\62\6\1\7\1\6\3\7\2\6\2\7"+
    "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7"+
    "\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\1\0\53\6\1\0\12\6\12\0\163\6\10\7"+
    "\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6"+
    "\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\20\7\3\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6"+
    "\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6"+
    "\210\0\1\7\202\0\35\6\3\0\61\6\17\0\1\7\37\0\40\6"+
    "\20\0\33\6\5\0\46\6\5\7\5\0\36\6\2\0\44\6\4\0"+
    "\10\6\1\0\5\6\52\0\236\6\2\0\12\7\126\0\50\6\10\0"+
    "\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6\230\0\6\6\2\0"+
    "\1\6\1\0\54\6\1\0\2\6\3\0\1\6\2\0\27\6\12\0"+
    "\27\6\11\0\37\6\101\0\23\6\1\0\2\6\12\0\26\6\12\0"+
    "\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7"+
    "\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0"+
    "\1\7\40\0\35\6\3\0\35\6\43\0\10\6\1\0\34\6\2\7"+
    "\31\0\66\6\12\0\26\6\12\0\23\6\15\0\22\6\156\0\111\6"+
    "\67\0\63\6\15\0\63\6\u030d\0\3\7\65\6\17\7\37\0\12\7"+
    "\17\0\4\7\55\6\13\7\2\0\1\7\22\0\31\6\7\0\12\7"+
    "\6\0\3\7\44\6\16\7\1\0\12\7\20\0\43\6\1\7\2\0"+
    "\1\6\11\0\3\7\60\6\16\7\4\6\5\0\3\7\3\0\12\7"+
    "\1\6\1\0\1\6\43\0\22\6\1\0\31\6\14\7\110\0\7\6"+
    "\1\0\1\6\1\0\4\6\1\0\17\6\1\0\12\6\7\0\57\6"+
    "\14\7\5\0\12\7\6\0\4\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\2\0\1\6\6\0\1\7\5\0"+
    "\5\6\2\7\2\0\7\7\3\0\5\7\u010b\0\60\6\24\7\2\6"+
    "\1\0\1\6\10\0\12\7\246\0\57\6\7\7\2\0\11\7\27\0"+
    "\4\6\2\7\42\0\60\6\21\7\3\0\1\6\13\0\12\7\46\0"+
    "\53\6\15\7\10\0\12\7\66\0\32\6\3\0\17\7\4\0\12\7"+
    "\u0166\0\100\6\12\7\25\0\1\6\u01c0\0\71\6\u0507\0\u039a\6\146\0"+
    "\157\6\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0"+
    "\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0\60\6\7\7"+
    "\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u0370\0\105\6"+
    "\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6\u0bfe\0\153\6"+
    "\5\0\15\6\3\0\11\6\7\0\12\6\3\0\2\7\1\0\4\7"+
    "\u14c1\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7"+
    "\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"+
    "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6"+
    "\2\0\62\7\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0\1\7"+
    "\26\0\5\7\1\0\17\7\u0d50\0\305\6\13\0\7\7\u0529\0\4\6"+
    "\1\0\33\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0\12\6"+
    "\1\0\4\6\1\0\1\6\1\0\1\6\6\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\3\6\1\0\2\6\1\0\1\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\2\6\1\0\1\6\2\0\4\6\1\0\7\6\1\0\4\6"+
    "\1\0\4\6\1\0\1\6\1\0\12\6\1\0\21\6\5\0\3\6"+
    "\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6"+
    "\2\0\u1682\6\u295e\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\16\5\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\2"+
    "\1\0\1\35\1\36\1\0\15\5\1\37\10\5\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\2\0\1\6\4\5"+
    "\1\56\17\5\1\57\6\5\1\0\1\2\1\60\21\5"+
    "\1\61\7\5\1\62\17\5\1\63\7\5\1\64\5\5"+
    "\1\65\4\5\1\66\2\5\1\67\7\5\1\70\1\71"+
    "\10\5\1\72\4\5\1\73\1\5\1\74\3\5\1\75"+
    "\1\76\16\5\1\77\2\5\1\100\1\5\1\101\1\102"+
    "\2\5\1\103\1\104\1\105\14\5\1\106\20\5\1\107"+
    "\1\110\1\5\1\111\5\5\1\112\3\5\1\113\3\5"+
    "\1\114\5\5\1\115\5\5\1\116\1\117\24\5\1\120"+
    "\3\5\1\121\5\5\1\122\1\5\1\123\1\5\1\124"+
    "\1\125\5\5\1\126\5\5\1\127\1\5\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\154\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\154\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\u04a4"+
    "\0\u04da\0\u0510\0\154\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\154\0\154\0\154\0\154\0\u0654\0\154\0\u068a\0\u06c0"+
    "\0\u06f6\0\154\0\154\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\154"+
    "\0\u0c06\0\u0c3c\0\u072c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0144"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u0144"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u0c06"+
    "\0\u0144\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac\0\u14e2"+
    "\0\u1518\0\u154e\0\u0144\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u0144\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u0144\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u0144\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a"+
    "\0\u0144\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u0144\0\u1d88\0\u1dbe"+
    "\0\u0144\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u0144\0\u0144\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u0144\0\u211e\0\u2154\0\u218a\0\u21c0\0\u0144"+
    "\0\u21f6\0\u0144\0\u222c\0\u2262\0\u2298\0\u0144\0\u0144\0\u22ce"+
    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e"+
    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u0144\0\u25c2\0\u25f8"+
    "\0\u0144\0\u262e\0\u0144\0\u0144\0\u2664\0\u269a\0\u0144\0\u0144"+
    "\0\u0144\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u0144\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e"+
    "\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u0144\0\u0144"+
    "\0\u2cb8\0\u0144\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u0144"+
    "\0\u2dfc\0\u2e32\0\u2e68\0\u0144\0\u2e9e\0\u2ed4\0\u2f0a\0\u0144"+
    "\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u0144\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u3126\0\u0144\0\u0144\0\u315c\0\u3192\0\u31c8"+
    "\0\u31fe\0\u3234\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378"+
    "\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u3528"+
    "\0\u355e\0\u0144\0\u3594\0\u35ca\0\u3600\0\u0144\0\u3636\0\u366c"+
    "\0\u36a2\0\u36d8\0\u370e\0\u0144\0\u3744\0\u0144\0\u377a\0\u0144"+
    "\0\u0144\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u0144\0\u38be"+
    "\0\u38f4\0\u392a\0\u3960\0\u3996\0\u0144\0\u39cc\0\u0144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\10\1\14\1\15\1\16\1\10\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\10\1\26"+
    "\1\27\3\10\1\30\3\10\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\3\1\55\2\3\36\55\1\56\23\55\1\57\70\0"+
    "\1\5\67\0\1\60\1\61\44\0\1\62\65\0\1\63"+
    "\21\0\3\10\1\0\27\10\35\0\1\11\1\64\62\0"+
    "\3\10\1\0\1\10\1\65\25\10\33\0\3\10\1\0"+
    "\5\10\1\66\21\10\33\0\3\10\1\0\23\10\1\67"+
    "\3\10\33\0\3\10\1\0\5\10\1\70\2\10\1\71"+
    "\16\10\33\0\3\10\1\0\5\10\1\72\21\10\33\0"+
    "\3\10\1\0\5\10\1\73\21\10\33\0\3\10\1\0"+
    "\2\10\1\74\7\10\1\75\14\10\33\0\3\10\1\0"+
    "\1\10\1\76\6\10\1\77\2\10\1\100\13\10\33\0"+
    "\3\10\1\0\5\10\1\101\5\10\1\102\13\10\33\0"+
    "\3\10\1\0\1\103\13\10\1\104\12\10\33\0\3\10"+
    "\1\0\10\10\1\105\2\10\1\106\13\10\33\0\3\10"+
    "\1\0\3\10\1\107\23\10\33\0\3\10\1\0\6\10"+
    "\1\110\1\10\1\111\16\10\33\0\3\10\1\0\1\10"+
    "\1\112\25\10\75\0\1\113\1\0\1\114\64\0\1\115"+
    "\1\116\65\0\1\117\65\0\1\120\65\0\1\121\65\0"+
    "\1\122\72\0\1\123\66\0\1\124\5\0\1\55\2\0"+
    "\36\55\1\0\23\55\13\0\1\125\5\0\1\126\7\0"+
    "\1\127\10\0\1\130\24\0\1\60\1\4\1\5\63\60"+
    "\5\131\1\132\60\131\10\0\1\133\63\0\3\10\1\0"+
    "\2\10\1\134\24\10\33\0\3\10\1\0\5\10\1\135"+
    "\21\10\33\0\3\10\1\0\16\10\1\136\10\10\33\0"+
    "\3\10\1\0\6\10\1\137\20\10\33\0\3\10\1\0"+
    "\6\10\1\140\20\10\33\0\3\10\1\0\7\10\1\141"+
    "\6\10\1\142\10\10\33\0\3\10\1\0\11\10\1\143"+
    "\1\144\3\10\1\145\10\10\33\0\3\10\1\0\17\10"+
    "\1\146\4\10\1\147\2\10\33\0\3\10\1\0\17\10"+
    "\1\150\7\10\33\0\3\10\1\0\1\151\26\10\33\0"+
    "\3\10\1\0\2\10\1\152\24\10\33\0\3\10\1\0"+
    "\2\10\1\153\24\10\33\0\3\10\1\0\2\10\1\154"+
    "\24\10\33\0\3\10\1\0\1\155\26\10\33\0\3\10"+
    "\1\0\4\10\1\156\22\10\33\0\3\10\1\0\15\10"+
    "\1\157\11\10\33\0\3\10\1\0\15\10\1\160\4\10"+
    "\1\161\4\10\33\0\3\10\1\0\1\162\26\10\33\0"+
    "\3\10\1\0\7\10\1\163\17\10\33\0\3\10\1\0"+
    "\5\10\1\164\21\10\33\0\3\10\1\0\12\10\1\165"+
    "\14\10\33\0\3\10\1\0\12\10\1\166\14\10\25\0"+
    "\5\131\1\167\64\131\1\170\1\167\60\131\6\0\3\10"+
    "\1\0\3\10\1\171\23\10\33\0\3\10\1\0\6\10"+
    "\1\172\20\10\33\0\3\10\1\0\5\10\1\173\21\10"+
    "\33\0\3\10\1\0\7\10\1\174\17\10\33\0\3\10"+
    "\1\0\1\10\1\175\25\10\33\0\3\10\1\0\3\10"+
    "\1\176\23\10\33\0\3\10\1\0\5\10\1\177\21\10"+
    "\33\0\3\10\1\0\17\10\1\200\7\10\33\0\3\10"+
    "\1\0\5\10\1\201\21\10\33\0\3\10\1\0\2\10"+
    "\1\202\2\10\1\203\2\10\1\204\16\10\33\0\3\10"+
    "\1\0\1\10\1\205\25\10\33\0\3\10\1\0\5\10"+
    "\1\206\21\10\33\0\3\10\1\0\17\10\1\207\7\10"+
    "\33\0\3\10\1\0\12\10\1\210\14\10\33\0\3\10"+
    "\1\0\16\10\1\211\10\10\33\0\3\10\1\0\5\10"+
    "\1\212\21\10\33\0\3\10\1\0\3\10\1\213\23\10"+
    "\33\0\3\10\1\0\5\10\1\214\21\10\33\0\3\10"+
    "\1\0\3\10\1\215\2\10\1\216\20\10\33\0\3\10"+
    "\1\0\13\10\1\217\13\10\33\0\3\10\1\0\13\10"+
    "\1\220\13\10\33\0\3\10\1\0\3\10\1\221\23\10"+
    "\33\0\3\10\1\0\10\10\1\222\16\10\33\0\3\10"+
    "\1\0\3\10\1\223\23\10\33\0\3\10\1\0\17\10"+
    "\1\224\7\10\25\0\4\131\1\5\1\167\60\131\6\0"+
    "\3\10\1\0\24\10\1\225\2\10\33\0\3\10\1\0"+
    "\1\226\26\10\33\0\3\10\1\0\10\10\1\227\16\10"+
    "\33\0\3\10\1\0\17\10\1\230\7\10\33\0\3\10"+
    "\1\0\6\10\1\231\20\10\33\0\3\10\1\0\17\10"+
    "\1\232\7\10\33\0\3\10\1\0\5\10\1\233\21\10"+
    "\33\0\3\10\1\0\1\234\26\10\33\0\3\10\1\0"+
    "\13\10\1\235\13\10\33\0\3\10\1\0\6\10\1\236"+
    "\20\10\33\0\3\10\1\0\6\10\1\237\20\10\33\0"+
    "\3\10\1\0\1\240\26\10\33\0\3\10\1\0\1\241"+
    "\26\10\33\0\3\10\1\0\13\10\1\242\13\10\33\0"+
    "\3\10\1\0\3\10\1\243\23\10\33\0\3\10\1\0"+
    "\6\10\1\244\20\10\33\0\3\10\1\0\17\10\1\245"+
    "\7\10\33\0\3\10\1\0\6\10\1\246\20\10\33\0"+
    "\3\10\1\0\6\10\1\247\20\10\33\0\3\10\1\0"+
    "\13\10\1\250\13\10\33\0\3\10\1\0\14\10\1\251"+
    "\12\10\33\0\3\10\1\0\14\10\1\252\12\10\33\0"+
    "\3\10\1\0\12\10\1\253\14\10\33\0\3\10\1\0"+
    "\6\10\1\254\20\10\33\0\3\10\1\0\10\10\1\255"+
    "\16\10\33\0\3\10\1\0\22\10\1\256\4\10\33\0"+
    "\3\10\1\0\5\10\1\257\21\10\33\0\3\10\1\0"+
    "\7\10\1\260\17\10\33\0\3\10\1\0\5\10\1\261"+
    "\21\10\33\0\3\10\1\0\1\262\26\10\33\0\3\10"+
    "\1\0\16\10\1\263\10\10\33\0\3\10\1\0\1\264"+
    "\26\10\33\0\3\10\1\0\5\10\1\265\21\10\33\0"+
    "\3\10\1\0\17\10\1\266\7\10\33\0\3\10\1\0"+
    "\6\10\1\267\20\10\33\0\3\10\1\0\24\10\1\270"+
    "\2\10\33\0\3\10\1\0\3\10\1\271\23\10\33\0"+
    "\3\10\1\0\7\10\1\272\17\10\33\0\3\10\1\0"+
    "\3\10\1\273\23\10\33\0\3\10\1\0\10\10\1\274"+
    "\16\10\33\0\3\10\1\0\17\10\1\275\7\10\33\0"+
    "\3\10\1\0\16\10\1\276\10\10\33\0\3\10\1\0"+
    "\16\10\1\277\10\10\33\0\3\10\1\0\14\10\1\300"+
    "\12\10\33\0\3\10\1\0\3\10\1\301\23\10\33\0"+
    "\3\10\1\0\3\10\1\302\23\10\33\0\3\10\1\0"+
    "\4\10\1\303\1\10\1\304\1\305\1\306\2\10\1\307"+
    "\2\10\1\310\1\311\3\10\1\312\3\10\33\0\3\10"+
    "\1\0\6\10\1\313\20\10\33\0\3\10\1\0\14\10"+
    "\1\314\12\10\33\0\3\10\1\0\6\10\1\315\20\10"+
    "\33\0\3\10\1\0\5\10\1\316\21\10\33\0\3\10"+
    "\1\0\10\10\1\317\16\10\33\0\3\10\1\0\3\10"+
    "\1\320\23\10\33\0\3\10\1\0\7\10\1\321\17\10"+
    "\33\0\3\10\1\0\6\10\1\322\20\10\33\0\3\10"+
    "\1\0\10\10\1\323\16\10\33\0\3\10\1\0\10\10"+
    "\1\324\16\10\33\0\3\10\1\0\5\10\1\325\21\10"+
    "\33\0\3\10\1\0\1\326\26\10\33\0\3\10\1\0"+
    "\6\10\1\327\20\10\33\0\3\10\1\0\13\10\1\330"+
    "\13\10\33\0\3\10\1\0\13\10\1\331\13\10\33\0"+
    "\3\10\1\0\10\10\1\332\16\10\33\0\3\10\1\0"+
    "\13\10\1\333\13\10\33\0\3\10\1\0\5\10\1\334"+
    "\5\10\1\335\13\10\33\0\3\10\1\0\5\10\1\336"+
    "\21\10\33\0\3\10\1\0\5\10\1\337\21\10\33\0"+
    "\3\10\1\0\6\10\1\340\20\10\33\0\3\10\1\0"+
    "\14\10\1\341\12\10\33\0\3\10\1\0\5\10\1\342"+
    "\21\10\33\0\3\10\1\0\3\10\1\343\4\10\1\344"+
    "\16\10\33\0\3\10\1\0\3\10\1\345\23\10\33\0"+
    "\3\10\1\0\2\10\1\346\24\10\33\0\3\10\1\0"+
    "\15\10\1\347\11\10\33\0\3\10\1\0\6\10\1\350"+
    "\20\10\33\0\3\10\1\0\6\10\1\351\20\10\33\0"+
    "\3\10\1\0\5\10\1\352\21\10\33\0\3\10\1\0"+
    "\6\10\1\353\20\10\33\0\3\10\1\0\6\10\1\354"+
    "\20\10\33\0\3\10\1\0\1\355\26\10\33\0\3\10"+
    "\1\0\3\10\1\356\23\10\33\0\3\10\1\0\6\10"+
    "\1\357\20\10\33\0\3\10\1\0\6\10\1\360\20\10"+
    "\33\0\3\10\1\0\6\10\1\361\20\10\33\0\3\10"+
    "\1\0\1\362\26\10\33\0\3\10\1\0\7\10\1\363"+
    "\17\10\33\0\3\10\1\0\15\10\1\364\11\10\33\0"+
    "\3\10\1\0\12\10\1\365\14\10\33\0\3\10\1\0"+
    "\5\10\1\366\1\367\20\10\33\0\3\10\1\0\10\10"+
    "\1\370\16\10\33\0\3\10\1\0\22\10\1\371\4\10"+
    "\33\0\3\10\1\0\1\372\26\10\33\0\3\10\1\0"+
    "\26\10\1\373\33\0\3\10\1\0\16\10\1\374\10\10"+
    "\33\0\3\10\1\0\3\10\1\375\23\10\33\0\3\10"+
    "\1\0\3\10\1\376\23\10\33\0\3\10\1\0\1\377"+
    "\26\10\33\0\3\10\1\0\16\10\1\u0100\10\10\33\0"+
    "\3\10\1\0\1\u0101\26\10\33\0\3\10\1\0\16\10"+
    "\1\u0102\10\10\33\0\3\10\1\0\5\10\1\u0103\21\10"+
    "\33\0\3\10\1\0\6\10\1\u0104\20\10\33\0\3\10"+
    "\1\0\15\10\1\u0105\11\10\33\0\3\10\1\0\10\10"+
    "\1\u0106\16\10\33\0\3\10\1\0\10\10\1\u0107\16\10"+
    "\33\0\3\10\1\0\24\10\1\u0108\2\10\33\0\3\10"+
    "\1\0\16\10\1\u0109\10\10\33\0\3\10\1\0\16\10"+
    "\1\u010a\10\10\33\0\3\10\1\0\10\10\1\u010b\16\10"+
    "\33\0\3\10\1\0\3\10\1\u010c\23\10\33\0\3\10"+
    "\1\0\6\10\1\u010d\20\10\33\0\3\10\1\0\16\10"+
    "\1\u010e\10\10\33\0\3\10\1\0\5\10\1\u010f\21\10"+
    "\33\0\3\10\1\0\10\10\1\u0110\16\10\33\0\3\10"+
    "\1\0\10\10\1\u0111\16\10\33\0\3\10\1\0\3\10"+
    "\1\u0112\23\10\33\0\3\10\1\0\3\10\1\u0113\23\10"+
    "\33\0\3\10\1\0\2\10\1\u0114\24\10\33\0\3\10"+
    "\1\0\16\10\1\u0115\10\10\33\0\3\10\1\0\20\10"+
    "\1\u0116\6\10\33\0\3\10\1\0\5\10\1\u0117\21\10"+
    "\33\0\3\10\1\0\3\10\1\u0118\23\10\33\0\3\10"+
    "\1\0\5\10\1\u0119\1\u011a\20\10\33\0\3\10\1\0"+
    "\16\10\1\u011b\10\10\33\0\3\10\1\0\1\u011c\26\10"+
    "\33\0\3\10\1\0\1\u011d\4\10\1\u011e\5\10\1\u011f"+
    "\13\10\33\0\3\10\1\0\5\10\1\u0120\21\10\33\0"+
    "\3\10\1\0\1\u0121\26\10\33\0\3\10\1\0\7\10"+
    "\1\u0122\17\10\33\0\3\10\1\0\5\10\1\u0123\21\10"+
    "\33\0\3\10\1\0\5\10\1\u0124\21\10\33\0\3\10"+
    "\1\0\7\10\1\u0125\17\10\33\0\3\10\1\0\1\u0126"+
    "\26\10\33\0\3\10\1\0\1\u0127\26\10\33\0\3\10"+
    "\1\0\3\10\1\u0128\23\10\33\0\3\10\1\0\5\10"+
    "\1\u0129\21\10\33\0\3\10\1\0\3\10\1\u012a\23\10"+
    "\33\0\3\10\1\0\16\10\1\u012b\10\10\33\0\3\10"+
    "\1\0\7\10\1\u012c\17\10\33\0\3\10\1\0\10\10"+
    "\1\u012d\16\10\33\0\3\10\1\0\1\10\1\u012e\25\10"+
    "\33\0\3\10\1\0\24\10\1\u012f\2\10\33\0\3\10"+
    "\1\0\22\10\1\u0130\4\10\33\0\3\10\1\0\5\10"+
    "\1\u0131\21\10\33\0\3\10\1\0\5\10\1\u0132\21\10"+
    "\33\0\3\10\1\0\2\10\1\u0133\24\10\33\0\3\10"+
    "\1\0\22\10\1\u0134\4\10\33\0\3\10\1\0\14\10"+
    "\1\u0135\12\10\33\0\3\10\1\0\13\10\1\u0136\13\10"+
    "\33\0\3\10\1\0\17\10\1\u0137\7\10\33\0\3\10"+
    "\1\0\10\10\1\u0138\16\10\33\0\3\10\1\0\16\10"+
    "\1\u0139\10\10\33\0\3\10\1\0\12\10\1\u013a\14\10"+
    "\33\0\3\10\1\0\7\10\1\u013b\17\10\33\0\3\10"+
    "\1\0\1\u013c\26\10\33\0\3\10\1\0\16\10\1\u013d"+
    "\10\10\33\0\3\10\1\0\23\10\1\u013e\3\10\33\0"+
    "\3\10\1\0\25\10\1\u013f\1\10\33\0\3\10\1\0"+
    "\16\10\1\u0140\10\10\33\0\3\10\1\0\23\10\1\u0141"+
    "\3\10\33\0\3\10\1\0\3\10\1\u0142\23\10\33\0"+
    "\3\10\1\0\7\10\1\u0143\17\10\33\0\3\10\1\0"+
    "\3\10\1\u0144\23\10\33\0\3\10\1\0\1\10\1\u0145"+
    "\25\10\33\0\3\10\1\0\3\10\1\u0146\23\10\33\0"+
    "\3\10\1\0\6\10\1\u0147\20\10\33\0\3\10\1\0"+
    "\1\10\1\u0148\25\10\33\0\3\10\1\0\3\10\1\u0149"+
    "\23\10\33\0\3\10\1\0\2\10\1\u014a\24\10\33\0"+
    "\3\10\1\0\5\10\1\u014b\21\10\33\0\3\10\1\0"+
    "\6\10\1\u014c\20\10\33\0\3\10\1\0\14\10\1\u014d"+
    "\12\10\33\0\3\10\1\0\5\10\1\u014e\21\10\33\0"+
    "\3\10\1\0\5\10\1\u014f\21\10\33\0\3\10\1\0"+
    "\6\10\1\u0150\20\10\33\0\3\10\1\0\5\10\1\u0151"+
    "\21\10\33\0\3\10\1\0\10\10\1\u0152\16\10\33\0"+
    "\3\10\1\0\5\10\1\u0153\21\10\33\0\3\10\1\0"+
    "\16\10\1\u0154\10\10\33\0\3\10\1\0\6\10\1\u0155"+
    "\20\10\33\0\3\10\1\0\6\10\1\u0156\20\10\33\0"+
    "\3\10\1\0\10\10\1\u0157\16\10\33\0\3\10\1\0"+
    "\17\10\1\u0158\7\10\33\0\3\10\1\0\13\10\1\u0159"+
    "\13\10\33\0\3\10\1\0\21\10\1\u015a\5\10\33\0"+
    "\3\10\1\0\17\10\1\u015b\7\10\33\0\3\10\1\0"+
    "\13\10\1\u015c\13\10\33\0\3\10\1\0\3\10\1\u015d"+
    "\23\10\33\0\3\10\1\0\4\10\1\u015e\22\10\33\0"+
    "\3\10\1\0\3\10\1\u015f\23\10\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\4\1\1\11\16\1\7\11"+
    "\3\1\1\11\5\1\4\11\1\1\1\11\2\1\1\0"+
    "\2\11\1\0\26\1\16\11\2\0\34\1\1\0\350\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3308) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                        yytext()+">");
            }
          case 89: break;
          case 2: 
            { /* ignore */
            }
          case 90: break;
          case 3: 
            { return symbol(sym.DIV);
            }
          case 91: break;
          case 4: 
            { return symbol(sym.TIMES);
            }
          case 92: break;
          case 5: 
            { return symbol(sym.ID, yytext());
            }
          case 93: break;
          case 6: 
            { return symbol(sym.NUM, yytext());
            }
          case 94: break;
          case 7: 
            { return symbol(sym.DOT);
            }
          case 95: break;
          case 8: 
            { string.setLength(0); yybegin(STRING);
            }
          case 96: break;
          case 9: 
            { return symbol(sym.LCURL);
            }
          case 97: break;
          case 10: 
            { return symbol(sym.RCURL);
            }
          case 98: break;
          case 11: 
            { return symbol(sym.LPAR);
            }
          case 99: break;
          case 12: 
            { return symbol(sym.RPAR);
            }
          case 100: break;
          case 13: 
            { return symbol(sym.LBRACK);
            }
          case 101: break;
          case 14: 
            { return symbol(sym.RBRACK);
            }
          case 102: break;
          case 15: 
            { return symbol(sym.PLUS);
            }
          case 103: break;
          case 16: 
            { return symbol(sym.MINUS);
            }
          case 104: break;
          case 17: 
            { return symbol(sym.EQ);
            }
          case 105: break;
          case 18: 
            { return symbol(sym.POW);
            }
          case 106: break;
          case 19: 
            { return symbol(sym.MORETHAN);
            }
          case 107: break;
          case 20: 
            { return symbol(sym.LESSTHAN);
            }
          case 108: break;
          case 21: 
            { return symbol(sym.NOT);
            }
          case 109: break;
          case 22: 
            { return symbol(sym.COLON);
            }
          case 110: break;
          case 23: 
            { return symbol(sym.SEMI);
            }
          case 111: break;
          case 24: 
            { return symbol(sym.COMMA);
            }
          case 112: break;
          case 25: 
            { return symbol(sym.Q);
            }
          case 113: break;
          case 26: 
            { string.append( yytext() );
            }
          case 114: break;
          case 27: 
            { yybegin(YYINITIAL); 
                                         return symbol(sym.STRING, 
                                         string.toString());
            }
          case 115: break;
          case 28: 
            { string.append('\\');
            }
          case 116: break;
          case 29: 
            { return symbol(sym.DIVEQ);
            }
          case 117: break;
          case 30: 
            { return symbol(sym.TIMESEQ);
            }
          case 118: break;
          case 31: 
            { return symbol(sym.SI);
            }
          case 119: break;
          case 32: 
            { return symbol(sym.PLUSPLUS);
            }
          case 120: break;
          case 33: 
            { return symbol(sym.PLUSEQ);
            }
          case 121: break;
          case 34: 
            { return symbol(sym.MINUSMINUS);
            }
          case 122: break;
          case 35: 
            { return symbol(sym.MINUSEQ);
            }
          case 123: break;
          case 36: 
            { return symbol(sym.EQEQ);
            }
          case 124: break;
          case 37: 
            { return symbol(sym.MORETHANEQ);
            }
          case 125: break;
          case 38: 
            { return symbol(sym.LESSTHANEQ);
            }
          case 126: break;
          case 39: 
            { return symbol(sym.NOTEQ);
            }
          case 127: break;
          case 40: 
            { return symbol(sym.AND);
            }
          case 128: break;
          case 41: 
            { return symbol(sym.OR);
            }
          case 129: break;
          case 42: 
            { string.append('\n');
            }
          case 130: break;
          case 43: 
            { string.append('\r');
            }
          case 131: break;
          case 44: 
            { string.append('\t');
            }
          case 132: break;
          case 45: 
            { string.append('\"');
            }
          case 133: break;
          case 46: 
            { return symbol(sym.VAR);
            }
          case 134: break;
          case 47: 
            { return symbol(sym.MAP);
            }
          case 135: break;
          case 48: 
            { return symbol(sym.NULO);
            }
          case 136: break;
          case 49: 
            { return symbol(sym.SINO);
            }
          case 137: break;
          case 50: 
            { return symbol(sym.CASO);
            }
          case 138: break;
          case 51: 
            { return symbol(sym.FALSO);
            }
          case 139: break;
          case 52: 
            { return symbol(sym.TODOS);
            }
          case 140: break;
          case 53: 
            { return symbol(sym.REDUCE);
            }
          case 141: break;
          case 54: 
            { return symbol(sym.ALCLIC);
            }
          case 142: break;
          case 55: 
            { return symbol(sym.ALGUNO);
            }
          case 143: break;
          case 56: 
            { return symbol(sym.MAXIMO);
            }
          case 144: break;
          case 57: 
            { return symbol(sym.MINIMO);
            }
          case 145: break;
          case 58: 
            { return symbol(sym.BUSCAR);
            }
          case 146: break;
          case 59: 
            { return symbol(sym.DEFECTO);
            }
          case 147: break;
          case 60: 
            { return symbol(sym.DETENER);
            }
          case 148: break;
          case 61: 
            { return symbol(sym.FUNCION);
            }
          case 149: break;
          case 62: 
            { return symbol(sym.FILTRAR);
            }
          case 150: break;
          case 63: 
            { return symbol(sym.LEERGXML);
            }
          case 151: break;
          case 64: 
            { return symbol(sym.RETORNAR);
            }
          case 152: break;
          case 65: 
            { return symbol(sym.ALCERRAR);
            }
          case 153: break;
          case 66: 
            { return symbol(sym.ALCARGAR);
            }
          case 154: break;
          case 67: 
            { return symbol(sym.INVERTIR);
            }
          case 155: break;
          case 68: 
            { return symbol(sym.IMPORTAR);
            }
          case 156: break;
          case 69: 
            { return symbol(sym.IMPRIMIR);
            }
          case 157: break;
          case 70: 
            { return symbol(sym.VERDADERO);
            }
          case 158: break;
          case 71: 
            { return symbol(sym.ASCENDENTE);
            }
          case 159: break;
          case 72: 
            { return symbol(sym.SELECCIONA);
            }
          case 160: break;
          case 73: 
            { return symbol(sym.CREARVIDEO);
            }
          case 161: break;
          case 74: 
            { return symbol(sym.CREARTEXTO);
            }
          case 162: break;
          case 75: 
            { return symbol(sym.CREARBOTON);
            }
          case 163: break;
          case 76: 
            { return symbol(sym.DESCENDENTE);
            }
          case 164: break;
          case 77: 
            { return symbol(sym.CREARIMAGEN);
            }
          case 165: break;
          case 78: 
            { return symbol(sym.OPI);
            }
          case 166: break;
          case 79: 
            { return symbol(sym.CREARVENTANA);
            }
          case 167: break;
          case 80: 
            { return symbol(sym.CREARAREA);
            }
          case 168: break;
          case 81: 
            { return symbol(sym.CREARCAJA);
            }
          case 169: break;
          case 82: 
            { return symbol(sym.CREARCONTENEDOR);
            }
          case 170: break;
          case 83: 
            { return symbol(sym.OPN);
            }
          case 171: break;
          case 84: 
            { return symbol(sym.CREARREPRODUCTOR);
            }
          case 172: break;
          case 85: 
            { return symbol(sym.CREARDESPLEGABLE);
            }
          case 173: break;
          case 86: 
            { return symbol(sym.OPE);
            }
          case 174: break;
          case 87: 
            { return symbol(sym.CREARNUMERICO);
            }
          case 175: break;
          case 88: 
            { return symbol(sym.CADA);
            }
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
