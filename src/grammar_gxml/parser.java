
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 20 10:24:38 CST 2019
//----------------------------------------------------

package grammar_gxml;

import interpreter_gxml.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 20 10:24:38 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\014\013\000\002\014\012" +
    "\000\002\013\014\000\002\013\013\000\002\015\004\000" +
    "\002\015\003\000\002\004\013\000\002\016\004\000\002" +
    "\016\003\000\002\005\013\000\002\005\012\000\002\005" +
    "\013\000\002\005\013\000\002\005\014\000\002\005\013" +
    "\000\002\005\023\000\002\005\013\000\002\005\023\000" +
    "\002\005\012\000\002\022\012\000\002\017\012\000\002" +
    "\020\013\000\002\020\012\000\002\012\004\000\002\012" +
    "\003\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\007\000\002\011\007\000\002\011\007\000\002\007" +
    "\006\000\002\007\005\000\002\021\005\000\002\021\003" +
    "\000\002\010\005\000\002\010\005\000\002\010\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\010\005\000\002" +
    "\010\006\000\002\010\010\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\004\004\006\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffe\004\u0118\001\002\000\006\007\u0122" +
    "\010\013\001\002\000\004\002\u0121\001\002\000\004\004" +
    "\012\001\002\000\006\002\uffff\004\u0118\001\002\000\006" +
    "\007\014\010\013\001\002\000\054\022\032\023\026\024" +
    "\044\025\051\026\024\027\023\030\036\031\035\032\033" +
    "\033\034\034\046\035\047\036\041\037\037\040\030\041" +
    "\042\042\045\043\040\044\043\045\025\117\031\001\002" +
    "\000\004\005\015\001\002\000\004\123\016\001\002\000" +
    "\004\004\017\001\002\000\004\006\020\001\002\000\004" +
    "\007\021\001\002\000\004\005\022\001\002\000\004\004" +
    "\ufffd\001\002\000\004\061\u0116\001\002\000\004\061\u0114" +
    "\001\002\000\004\061\u0110\001\002\000\004\061\u010e\001" +
    "\002\000\056\005\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034" +
    "\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\044\uffe5\045\uffe5\117\uffe5\001\002\000\004\061" +
    "\u010c\001\002\000\004\061\u010a\001\002\000\004\061\u0108" +
    "\001\002\000\004\061\u0105\001\002\000\004\061\u0103\001" +
    "\002\000\004\061\u0101\001\002\000\004\061\377\001\002" +
    "\000\004\061\374\001\002\000\004\061\371\001\002\000" +
    "\004\061\366\001\002\000\004\061\364\001\002\000\004" +
    "\061\362\001\002\000\004\061\356\001\002\000\004\061" +
    "\354\001\002\000\004\061\352\001\002\000\004\061\350" +
    "\001\002\000\056\005\150\022\032\023\026\024\044\025" +
    "\051\026\024\027\023\030\036\031\035\032\033\033\034" +
    "\034\046\035\047\036\041\037\037\040\030\041\042\042" +
    "\045\043\040\044\043\045\025\117\031\001\002\000\004" +
    "\061\052\001\002\000\004\062\053\001\002\000\004\121" +
    "\055\001\002\000\004\063\146\001\002\000\004\064\056" +
    "\001\002\000\026\056\067\057\061\064\063\065\070\077" +
    "\060\113\071\120\057\121\064\122\066\126\062\001\002" +
    "\000\046\065\uffb2\070\uffb2\071\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\104\uffb2\105\uffb2\106\uffb2" +
    "\107\uffb2\110\uffb2\111\uffb2\112\uffb2\114\uffb2\115\uffb2\001" +
    "\002\000\024\056\067\057\061\064\063\077\060\113\071" +
    "\120\057\121\064\122\066\126\062\001\002\000\046\065" +
    "\uffae\070\uffae\071\uffae\076\uffae\077\uffae\100\uffae\101\uffae" +
    "\102\uffae\103\uffae\104\uffae\105\uffae\106\uffae\107\uffae\110" +
    "\uffae\111\uffae\112\uffae\114\uffae\115\uffae\001\002\000\046" +
    "\065\uffb0\070\uffb0\071\uffb0\076\uffb0\077\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\104\uffb0\105\uffb0\106\uffb0\107\uffb0" +
    "\110\uffb0\111\uffb0\112\uffb0\114\uffb0\115\uffb0\001\002\000" +
    "\024\056\067\057\061\064\063\077\060\113\071\120\057" +
    "\121\064\122\066\126\062\001\002\000\050\065\uffb6\066" +
    "\140\070\uffb6\071\uffb6\076\uffb6\077\uffb6\100\uffb6\101\uffb6" +
    "\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6\110" +
    "\uffb6\111\uffb6\112\uffb6\114\uffb6\115\uffb6\001\002\000\006" +
    "\065\136\114\135\001\002\000\046\065\uffb1\070\uffb1\071" +
    "\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1" +
    "\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1\111\uffb1\112" +
    "\uffb1\114\uffb1\115\uffb1\001\002\000\046\065\uffaf\070\uffaf" +
    "\071\uffaf\076\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf\103" +
    "\uffaf\104\uffaf\105\uffaf\106\uffaf\107\uffaf\110\uffaf\111\uffaf" +
    "\112\uffaf\114\uffaf\115\uffaf\001\002\000\004\063\uffca\001" +
    "\002\000\024\056\067\057\061\064\063\077\060\113\071" +
    "\120\057\121\064\122\066\126\062\001\002\000\046\065" +
    "\uffc8\070\100\071\110\076\103\077\074\100\106\101\105" +
    "\102\077\103\102\104\075\105\076\106\101\107\111\110" +
    "\107\111\073\112\112\114\uffc8\115\104\001\002\000\024" +
    "\056\067\057\061\064\063\077\060\113\071\120\057\121" +
    "\064\122\066\126\062\001\002\000\024\056\067\057\061" +
    "\064\063\077\060\113\071\120\057\121\064\122\066\126" +
    "\062\001\002\000\024\056\067\057\061\064\063\077\060" +
    "\113\071\120\057\121\064\122\066\126\062\001\002\000" +
    "\024\056\067\057\061\064\063\077\060\113\071\120\057" +
    "\121\064\122\066\126\062\001\002\000\024\056\067\057" +
    "\061\064\063\077\060\113\071\120\057\121\064\122\066" +
    "\126\062\001\002\000\046\065\uffb8\070\uffb8\071\uffb8\076" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8" +
    "\105\uffb8\106\uffb8\107\uffb8\110\uffb8\111\uffb8\112\uffb8\114" +
    "\uffb8\115\uffb8\001\002\000\024\056\067\057\061\064\063" +
    "\077\060\113\071\120\057\121\064\122\066\126\062\001" +
    "\002\000\024\056\067\057\061\064\063\077\060\113\071" +
    "\120\057\121\064\122\066\126\062\001\002\000\024\056" +
    "\067\057\061\064\063\077\060\113\071\120\057\121\064" +
    "\122\066\126\062\001\002\000\004\121\120\001\002\000" +
    "\024\056\067\057\061\064\063\077\060\113\071\120\057" +
    "\121\064\122\066\126\062\001\002\000\024\056\067\057" +
    "\061\064\063\077\060\113\071\120\057\121\064\122\066" +
    "\126\062\001\002\000\024\056\067\057\061\064\063\077" +
    "\060\113\071\120\057\121\064\122\066\126\062\001\002" +
    "\000\046\065\uffb7\070\uffb7\071\uffb7\076\uffb7\077\uffb7\100" +
    "\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7" +
    "\107\uffb7\110\uffb7\111\uffb7\112\uffb7\114\uffb7\115\uffb7\001" +
    "\002\000\024\056\067\057\061\064\063\077\060\113\071" +
    "\120\057\121\064\122\066\126\062\001\002\000\024\056" +
    "\067\057\061\064\063\077\060\113\071\120\057\121\064" +
    "\122\066\126\062\001\002\000\046\065\uffc7\070\100\071" +
    "\110\076\103\077\074\100\106\101\105\102\077\103\102" +
    "\104\075\105\076\106\101\107\111\110\107\111\073\112" +
    "\uffc7\114\uffc7\115\104\001\002\000\046\065\uffc4\070\100" +
    "\071\110\076\103\077\074\100\106\101\105\102\077\103" +
    "\uffc4\104\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\111\uffc4" +
    "\112\uffc4\114\uffc4\115\104\001\002\000\046\065\uffc3\070" +
    "\100\071\110\076\103\077\074\100\106\101\105\102\077" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111" +
    "\uffc3\112\uffc3\114\uffc3\115\104\001\002\000\046\065\uffbc" +
    "\070\100\071\110\076\uffbc\077\uffbc\100\uffbc\101\uffbc\102" +
    "\077\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\114\uffbc\115\104\001\002\000\046\065" +
    "\uffbb\070\100\071\110\076\uffbb\077\uffbb\100\uffbb\101\uffbb" +
    "\102\077\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110" +
    "\uffbb\111\uffbb\112\uffbb\114\uffbb\115\104\001\002\000\050" +
    "\065\uffb5\066\121\070\uffb5\071\uffb5\076\uffb5\077\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\105\uffb5\106\uffb5" +
    "\107\uffb5\110\uffb5\111\uffb5\112\uffb5\114\uffb5\115\uffb5\001" +
    "\002\000\004\120\122\001\002\000\004\067\123\001\002" +
    "\000\046\065\uffb3\070\uffb3\071\uffb3\076\uffb3\077\uffb3\100" +
    "\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3" +
    "\107\uffb3\110\uffb3\111\uffb3\112\uffb3\114\uffb3\115\uffb3\001" +
    "\002\000\046\065\uffbe\070\100\071\110\076\uffbe\077\uffbe" +
    "\100\106\101\105\102\077\103\uffbe\104\uffbe\105\uffbe\106" +
    "\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\114\uffbe\115\104" +
    "\001\002\000\046\065\uffc2\070\100\071\110\076\103\077" +
    "\074\100\106\101\105\102\077\103\uffc2\104\uffc2\105\uffc2" +
    "\106\uffc2\107\uffc2\110\uffc2\111\uffc2\112\uffc2\114\uffc2\115" +
    "\104\001\002\000\046\065\uffbf\070\100\071\110\076\103" +
    "\077\074\100\106\101\105\102\077\103\102\104\075\105" +
    "\uffbf\106\uffbf\107\111\110\107\111\uffbf\112\uffbf\114\uffbf" +
    "\115\104\001\002\000\046\065\uffba\070\100\071\110\076" +
    "\uffba\077\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba" +
    "\105\uffba\106\uffba\107\uffba\110\uffba\111\uffba\112\uffba\114" +
    "\uffba\115\104\001\002\000\046\065\uffc0\070\100\071\110" +
    "\076\103\077\074\100\106\101\105\102\077\103\102\104" +
    "\075\105\uffc0\106\uffc0\107\111\110\107\111\uffc0\112\uffc0" +
    "\114\uffc0\115\104\001\002\000\046\065\uffc1\070\100\071" +
    "\110\076\103\077\074\100\106\101\105\102\077\103\uffc1" +
    "\104\uffc1\105\uffc1\106\uffc1\107\uffc1\110\uffc1\111\uffc1\112" +
    "\uffc1\114\uffc1\115\104\001\002\000\046\065\uffbd\070\100" +
    "\071\110\076\uffbd\077\uffbd\100\106\101\105\102\077\103" +
    "\uffbd\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd" +
    "\112\uffbd\114\uffbd\115\104\001\002\000\046\065\uffc6\070" +
    "\100\071\110\076\103\077\074\100\106\101\105\102\077" +
    "\103\102\104\075\105\076\106\101\107\111\110\107\111" +
    "\uffc6\112\uffc6\114\uffc6\115\104\001\002\000\046\065\uffc5" +
    "\070\100\071\110\076\103\077\074\100\106\101\105\102" +
    "\077\103\102\104\075\105\076\106\101\107\111\110\107" +
    "\111\uffc5\112\uffc5\114\uffc5\115\104\001\002\000\024\056" +
    "\067\057\061\064\063\077\060\113\071\120\057\121\064" +
    "\122\066\126\062\001\002\000\004\063\uffcb\001\002\000" +
    "\046\065\uffc9\070\100\071\110\076\103\077\074\100\106" +
    "\101\105\102\077\103\102\104\075\105\076\106\101\107" +
    "\111\110\107\111\073\112\112\114\uffc9\115\104\001\002" +
    "\000\004\120\141\001\002\000\004\067\142\001\002\000" +
    "\046\065\uffb4\070\uffb4\071\uffb4\076\uffb4\077\uffb4\100\uffb4" +
    "\101\uffb4\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107" +
    "\uffb4\110\uffb4\111\uffb4\112\uffb4\114\uffb4\115\uffb4\001\002" +
    "\000\044\065\144\070\100\071\110\076\103\077\074\100" +
    "\106\101\105\102\077\103\102\104\075\105\076\106\101" +
    "\107\111\110\107\111\073\112\112\115\104\001\002\000" +
    "\046\065\uffad\070\uffad\071\uffad\076\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\104\uffad\105\uffad\106\uffad\107" +
    "\uffad\110\uffad\111\uffad\112\uffad\114\uffad\115\uffad\001\002" +
    "\000\046\065\uffb9\070\uffb9\071\uffb9\076\uffb9\077\uffb9\100" +
    "\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9" +
    "\107\uffb9\110\uffb9\111\uffb9\112\uffb9\114\uffb9\115\104\001" +
    "\002\000\056\005\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\043\uffcd\044\uffcd\045\uffcd\117\uffcd\001\002\000\056\005" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\117\uffe6\001\002\000\004\004\151\001\002\000" +
    "\004\011\157\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\154\001\002\000\006\006\156\011\157\001\002\000" +
    "\004\004\ufff9\001\002\000\004\010\346\001\002\000\054" +
    "\022\032\023\026\024\044\025\051\026\024\027\023\030" +
    "\036\031\035\032\033\033\034\034\046\035\047\036\041" +
    "\037\037\040\030\041\042\042\045\043\040\044\043\045" +
    "\025\117\031\001\002\000\056\005\161\022\032\023\026" +
    "\024\044\025\051\026\024\027\023\030\036\031\035\032" +
    "\033\033\034\034\046\035\047\036\041\037\037\040\030" +
    "\041\042\042\045\043\040\044\043\045\025\117\031\001" +
    "\002\000\004\004\164\001\002\000\004\004\ufff5\001\002" +
    "\000\004\004\342\001\002\000\014\012\165\013\167\017" +
    "\171\020\166\021\170\001\002\000\054\022\032\023\026" +
    "\024\044\025\051\026\024\027\023\030\036\031\035\032" +
    "\033\033\034\034\046\035\047\036\041\037\037\040\030" +
    "\041\042\042\045\043\040\044\043\045\025\117\031\001" +
    "\002\000\054\022\032\023\026\024\044\025\051\026\024" +
    "\027\023\030\036\031\035\032\033\033\034\034\046\035" +
    "\047\036\041\037\037\040\030\041\042\042\045\043\040" +
    "\044\043\045\025\117\031\001\002\000\054\022\032\023" +
    "\026\024\044\025\051\026\024\027\023\030\036\031\035" +
    "\032\033\033\034\034\046\035\047\036\041\037\037\040" +
    "\030\041\042\042\045\043\040\044\043\045\025\117\031" +
    "\001\002\000\054\022\032\023\026\024\044\025\051\026" +
    "\024\027\023\030\036\031\035\032\033\033\034\034\046" +
    "\035\047\036\041\037\037\040\030\041\042\042\045\043" +
    "\040\044\043\045\025\117\031\001\002\000\054\022\032" +
    "\023\026\024\044\025\051\026\024\027\023\030\036\031" +
    "\035\032\033\033\034\034\046\035\047\036\041\037\037" +
    "\040\030\041\042\042\045\043\040\044\043\045\025\117" +
    "\031\001\002\000\056\005\173\022\032\023\026\024\044" +
    "\025\051\026\024\027\023\030\036\031\035\032\033\033" +
    "\034\034\046\035\047\036\041\037\037\040\030\041\042" +
    "\042\045\043\040\044\043\045\025\117\031\001\002\000" +
    "\004\004\174\001\002\000\004\006\175\001\002\000\004" +
    "\017\176\001\002\000\004\005\177\001\002\000\004\004" +
    "\uffeb\001\002\000\056\005\201\022\032\023\026\024\044" +
    "\025\051\026\024\027\023\030\036\031\035\032\033\033" +
    "\034\034\046\035\047\036\041\037\037\040\030\041\042" +
    "\042\045\043\040\044\043\045\025\117\031\001\002\000" +
    "\006\004\202\123\203\001\002\000\004\012\210\001\002" +
    "\000\004\004\204\001\002\000\004\006\205\001\002\000" +
    "\004\021\206\001\002\000\004\005\207\001\002\000\004" +
    "\004\uffed\001\002\000\054\022\032\023\026\024\044\025" +
    "\051\026\024\027\023\030\036\031\035\032\033\033\034" +
    "\034\046\035\047\036\041\037\037\040\030\041\042\042" +
    "\045\043\040\044\043\045\025\117\031\001\002\000\056" +
    "\005\212\022\032\023\026\024\044\025\051\026\024\027" +
    "\023\030\036\031\035\032\033\033\034\034\046\035\047" +
    "\036\041\037\037\040\030\041\042\042\045\043\040\044" +
    "\043\045\025\117\031\001\002\000\004\123\213\001\002" +
    "\000\004\004\214\001\002\000\004\006\215\001\002\000" +
    "\004\012\216\001\002\000\004\005\217\001\002\000\004" +
    "\004\220\001\002\000\004\006\221\001\002\000\004\021" +
    "\222\001\002\000\004\005\223\001\002\000\004\004\uffec" +
    "\001\002\000\056\005\225\022\032\023\026\024\044\025" +
    "\051\026\024\027\023\030\036\031\035\032\033\033\034" +
    "\034\046\035\047\036\041\037\037\040\030\041\042\042" +
    "\045\043\040\044\043\045\025\117\031\001\002\000\004" +
    "\004\226\001\002\000\010\006\255\014\256\016\240\001" +
    "\002\000\004\004\251\001\002\000\004\004\231\001\002" +
    "\000\006\006\237\016\240\001\002\000\004\004\233\001" +
    "\002\000\004\006\234\001\002\000\004\013\235\001\002" +
    "\000\004\005\236\001\002\000\004\004\ufff0\001\002\000" +
    "\004\013\247\001\002\000\004\005\241\001\002\000\004" +
    "\123\242\001\002\000\004\004\243\001\002\000\004\006" +
    "\244\001\002\000\004\016\245\001\002\000\004\005\246" +
    "\001\002\000\004\004\uffea\001\002\000\004\005\250\001" +
    "\002\000\004\004\ufff1\001\002\000\004\006\252\001\002" +
    "\000\004\013\253\001\002\000\004\005\254\001\002\000" +
    "\004\004\ufff2\001\002\000\004\013\304\001\002\000\004" +
    "\005\257\001\002\000\004\004\260\001\002\000\004\015" +
    "\275\001\002\000\004\004\262\001\002\000\006\006\263" +
    "\015\264\001\002\000\004\014\273\001\002\000\004\005" +
    "\265\001\002\000\004\123\266\001\002\000\004\004\267" +
    "\001\002\000\004\006\270\001\002\000\004\015\271\001" +
    "\002\000\004\005\272\001\002\000\004\004\uffe8\001\002" +
    "\000\004\005\274\001\002\000\004\004\uffe9\001\002\000" +
    "\004\005\276\001\002\000\004\123\277\001\002\000\004" +
    "\004\300\001\002\000\004\006\301\001\002\000\004\015" +
    "\302\001\002\000\004\005\303\001\002\000\004\004\uffe7" +
    "\001\002\000\004\005\305\001\002\000\004\004\ufff3\001" +
    "\002\000\056\005\307\022\032\023\026\024\044\025\051" +
    "\026\024\027\023\030\036\031\035\032\033\033\034\034" +
    "\046\035\047\036\041\037\037\040\030\041\042\042\045" +
    "\043\040\044\043\045\025\117\031\001\002\000\006\004" +
    "\310\123\311\001\002\000\004\012\316\001\002\000\004" +
    "\004\312\001\002\000\004\006\313\001\002\000\004\020" +
    "\314\001\002\000\004\005\315\001\002\000\004\004\uffef" +
    "\001\002\000\054\022\032\023\026\024\044\025\051\026" +
    "\024\027\023\030\036\031\035\032\033\033\034\034\046" +
    "\035\047\036\041\037\037\040\030\041\042\042\045\043" +
    "\040\044\043\045\025\117\031\001\002\000\056\005\320" +
    "\022\032\023\026\024\044\025\051\026\024\027\023\030" +
    "\036\031\035\032\033\033\034\034\046\035\047\036\041" +
    "\037\037\040\030\041\042\042\045\043\040\044\043\045" +
    "\025\117\031\001\002\000\004\123\321\001\002\000\004" +
    "\004\322\001\002\000\004\006\323\001\002\000\004\012" +
    "\324\001\002\000\004\005\325\001\002\000\004\004\326" +
    "\001\002\000\004\006\327\001\002\000\004\020\330\001" +
    "\002\000\004\005\331\001\002\000\004\004\uffee\001\002" +
    "\000\056\005\333\022\032\023\026\024\044\025\051\026" +
    "\024\027\023\030\036\031\035\032\033\033\034\034\046" +
    "\035\047\036\041\037\037\040\030\041\042\042\045\043" +
    "\040\044\043\045\025\117\031\001\002\000\004\123\334" +
    "\001\002\000\004\004\335\001\002\000\004\006\336\001" +
    "\002\000\004\012\337\001\002\000\004\005\340\001\002" +
    "\000\004\004\ufff4\001\002\000\004\004\ufff6\001\002\000" +
    "\016\006\343\012\165\013\167\017\171\020\166\021\170" +
    "\001\002\000\004\011\344\001\002\000\004\005\345\001" +
    "\002\000\004\004\ufff7\001\002\000\004\005\347\001\002" +
    "\000\006\002\ufffa\004\ufffa\001\002\000\004\120\351\001" +
    "\002\000\056\005\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\117\uffdb\001\002\000\004\125" +
    "\353\001\002\000\056\005\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\043\uffdc\044\uffdc\045\uffdc\117\uffdc\001\002\000" +
    "\004\125\355\001\002\000\056\005\uffd7\022\uffd7\023\uffd7" +
    "\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\117\uffd7\001" +
    "\002\000\004\062\357\001\002\000\004\121\055\001\002" +
    "\000\004\063\361\001\002\000\056\005\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\117\uffce" +
    "\001\002\000\004\125\363\001\002\000\056\005\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037" +
    "\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\117\uffd8\001\002\000\004\120\365\001\002\000\056\005" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\117\uffd9\001\002\000\006\056\370\057\367\001" +
    "\002\000\056\005\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\117\uffd3\001\002\000\056\005" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\117\uffd4\001\002\000\006\056\373\057\372\001" +
    "\002\000\056\005\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\045\uffcf\117\uffcf\001\002\000\056\005" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0" +
    "\045\uffd0\117\uffd0\001\002\000\006\056\376\057\375\001" +
    "\002\000\056\005\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1" +
    "\043\uffd1\044\uffd1\045\uffd1\117\uffd1\001\002\000\056\005" +
    "\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\117\uffd2\001\002\000\004\120\u0100\001\002\000" +
    "\056\005\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035" +
    "\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\117\uffdf\001\002\000\004\120\u0102\001" +
    "\002\000\056\005\uffde\022\uffde\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\044\uffde\045\uffde\117\uffde\001\002\000\004\125" +
    "\u0104\001\002\000\056\005\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\117\uffdd\001\002\000" +
    "\006\056\u0107\057\u0106\001\002\000\056\005\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\117" +
    "\uffd5\001\002\000\056\005\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033" +
    "\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\117\uffd6\001\002\000" +
    "\004\125\u0109\001\002\000\056\005\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3" +
    "\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\117\uffe3\001" +
    "\002\000\004\125\u010b\001\002\000\056\005\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\117" +
    "\uffe4\001\002\000\004\120\u010d\001\002\000\056\005\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\045" +
    "\uffda\117\uffda\001\002\000\004\124\u010f\001\002\000\056" +
    "\005\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044" +
    "\uffe2\045\uffe2\117\uffe2\001\002\000\004\062\u0111\001\002" +
    "\000\004\121\055\001\002\000\004\063\u0113\001\002\000" +
    "\056\005\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\117\uffcc\001\002\000\004\120\u0115\001" +
    "\002\000\056\005\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\044\uffe1\045\uffe1\117\uffe1\001\002\000\004\120" +
    "\u0117\001\002\000\056\005\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\117\uffe0\001\002\000" +
    "\004\010\u0119\001\002\000\054\022\032\023\026\024\044" +
    "\025\051\026\024\027\023\030\036\031\035\032\033\033" +
    "\034\034\046\035\047\036\041\037\037\040\030\041\042" +
    "\042\045\043\040\044\043\045\025\117\031\001\002\000" +
    "\056\005\u011b\022\032\023\026\024\044\025\051\026\024" +
    "\027\023\030\036\031\035\032\033\033\034\034\046\035" +
    "\047\036\041\037\037\040\030\041\042\042\045\043\040" +
    "\044\043\045\025\117\031\001\002\000\004\004\151\001" +
    "\002\000\004\004\u011d\001\002\000\006\006\u011e\011\157" +
    "\001\002\000\004\010\u011f\001\002\000\004\005\u0120\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\004\002\000" +
    "\001\002\000\004\005\u0123\001\002\000\004\123\u0124\001" +
    "\002\000\004\004\u0125\001\002\000\004\006\u0126\001\002" +
    "\000\004\007\u0127\001\002\000\004\005\u0128\001\002\000" +
    "\004\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0126\000\012\002\006\003\003\013\004\014\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\026\012\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\071\021\064\001\001\000\002\001\001\000\004\010\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\133\001\001\000\002\001\001\000\004\010\132\001\001" +
    "\000\004\010\131\001\001\000\004\010\130\001\001\000" +
    "\004\010\127\001\001\000\004\010\126\001\001\000\002" +
    "\001\001\000\004\010\125\001\001\000\004\010\124\001" +
    "\001\000\004\010\123\001\001\000\002\001\001\000\004" +
    "\010\116\001\001\000\004\010\115\001\001\000\004\010" +
    "\114\001\001\000\002\001\001\000\004\010\113\001\001" +
    "\000\004\010\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\151\015\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\026\012\157\001\001\000\004\011" +
    "\146\001\001\000\006\005\161\016\162\001\001\000\002" +
    "\001\001\000\004\005\340\001\001\000\002\001\001\000" +
    "\006\011\026\012\331\001\001\000\006\011\026\012\305" +
    "\001\001\000\006\011\026\012\223\001\001\000\006\011" +
    "\026\012\177\001\001\000\006\011\026\012\171\001\001" +
    "\000\004\011\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\026\012" +
    "\210\001\001\000\004\011\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\146\001\001\000\006\017\227\022\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\026\012\316" +
    "\001\001\000\004\011\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\357\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u0111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\026\012\u0119" +
    "\001\001\000\004\011\146\001\001\000\006\004\151\015" +
    "\u011b\001\001\000\004\004\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    //Metodo al que se llama automaticamente ante algún error sintáctico
    public void syntax_error(Symbol s)
    {        
        System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }
 

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido.");
        //Esemanticos e = new Esemanticos(String.valueOf(s.value),"Sintactico", s.left + 1, s.right, "No se esperaba ese valor");
        //ErroresSintacticos.add(e);
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // E ::= FALSO 
            {
              nodo RESULT =null;
		 RESULT = new bool(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= VERDADERO 
            {
              nodo RESULT =null;
		 RESULT = new bool(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= E DOT ID_L LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_getArr(e, i, Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= ID_L LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= E DOT ID_L 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= ID_L 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= E MINUSMINUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= E PLUSPLUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // call_f ::= ID_L LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // call_f ::= ID_L LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // AT ::= ACCION EQ LCURL call_f RCURL 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("AlClick", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // AT ::= ACCIONFINAL EQ LCURL call_f RCURL 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("AlCerrar", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AT ::= ACCIONINICIAL EQ LCURL call_f RCURL 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("AlCargar", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AT ::= AUTO_REPRODUCCION EQ FALSO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("auto-reproduccion", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AT ::= AUTO_REPRODUCCION EQ VERDADERO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("auto-reproduccion", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // AT ::= CURSIVA EQ FALSO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("cursiva", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AT ::= CURSIVA EQ VERDADERO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("cursiva", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AT ::= NEGRITA EQ FALSO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("negrita", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AT ::= NEGRITA EQ VERDADERO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("negrita", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AT ::= BORDE EQ FALSO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("borde", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AT ::= BORDE EQ VERDADERO 
            {
              Atributo RESULT =null;
		 RESULT = new Atributo("borde", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AT ::= PATH EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("Ruta", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AT ::= REFERENCIA EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("Referencia", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AT ::= MINIMO EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("min", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AT ::= MAXIMO EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("max", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AT ::= TAM EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("tam", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AT ::= FUENTE EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("fuente", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AT ::= NOMBRE EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("nombre", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AT ::= ANCHO EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("ancho", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AT ::= ALTO EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("alto", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AT ::= Y EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("y", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AT ::= X EQ NUM 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("x", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AT ::= COLOR EQ HEX 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("color", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AT ::= TIPO EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("tipo", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AT ::= ID EQ STRINGLIT 
            {
              Atributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("id", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATTR ::= AT 
            {
              HashMap RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo a = (Atributo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 HashMap<String, Object> list = new HashMap<>();
                                                                                   list.put(a.nombre, a.valor);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATTR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATTR ::= ATTR AT 
            {
              HashMap RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		HashMap t = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Atributo a = (Atributo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.put(a.nombre, a.valor);
                                                                                   RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATTR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DT ::= OPENTAG DATO CLOSETAG CONTENIDO OPENTAG SLASH DATO CLOSETAG 
            {
              LinkedList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(d);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DT ::= DT OPENTAG DATO CLOSETAG CONTENIDO OPENTAG SLASH DATO CLOSETAG 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 l.add(d); 
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DATOS ::= OPENTAG LISTADATOS CLOSETAG DT OPENTAG SLASH LISTADATOS CLOSETAG 
            {
              LinkedList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEF ::= OPENTAG DEFECTO CLOSETAG CONTENIDO OPENTAG SLASH DEFECTO CLOSETAG 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CTRL ::= OPENTAG MULTIMEDIA ATTR CLOSETAG OPENTAG SLASH MULTIMEDIA CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 RESULT = new Multimedia(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CTRL ::= OPENTAG ENVIAR ATTR CLOSETAG OPENTAG TEXTO ATTR CLOSETAG CONTENIDO OPENTAG SLASH TEXTO CLOSETAG OPENTAG SLASH ENVIAR CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 RESULT = new Enviar(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTRL ::= OPENTAG ENVIAR ATTR CLOSETAG CONTENIDO OPENTAG SLASH ENVIAR CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Enviar(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CTRL ::= OPENTAG BOTON ATTR CLOSETAG OPENTAG TEXTO ATTR CLOSETAG CONTENIDO OPENTAG SLASH TEXTO CLOSETAG OPENTAG SLASH BOTON CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 RESULT = new Boton(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTRL ::= OPENTAG BOTON ATTR CLOSETAG CONTENIDO OPENTAG SLASH BOTON CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Boton(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DATOS DEF OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, d, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DATOS OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, null, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DEF OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 RESULT = new Control(a, null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTRL ::= OPENTAG TEXTO ATTR CLOSETAG CONTENIDO OPENTAG SLASH TEXTO CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Texto(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTROLES ::= CTRL 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTROLES ::= CONTROLES CTRL 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.add(c);
                                                                                   RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT ::= OPENTAG CONTENEDOR ATTR CLOSETAG CONTROLES OPENTAG SLASH CONTENEDOR CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Contenedor(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENEDORES ::= CONT 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENEDORES ::= CONTENEDORES CONT 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.add(c);
                                                                                   RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // XML ::= OPENTAG VENTANA ATTR CLOSETAG CONTENEDORES OPENTAG SLASH VENTANA CLOSETAG 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(new Ventana(a, c));
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XML",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // XML ::= XML OPENTAG VENTANA ATTR CLOSETAG CONTENEDORES OPENTAG SLASH VENTANA CLOSETAG 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		HashMap a = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 x.add(new Ventana(a, c)); 
                                                                                   RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XML",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= OPENTAG IMPORTAR CLOSETAG CONTENIDO OPENTAG SLASH IMPORTAR CLOSETAG 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS OPENTAG IMPORTAR CLOSETAG CONTENIDO OPENTAG SLASH IMPORTAR CLOSETAG 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList i = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 i.add(c);
                                                                                   RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= XML 
            {
              nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Head(null, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= IMPORTS XML 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList i = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Head(i, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

