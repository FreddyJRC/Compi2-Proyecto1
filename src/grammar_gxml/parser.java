
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 14 21:29:38 CST 2019
//----------------------------------------------------

package grammar_gxml;

import interpreter_gxml.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 14 21:29:38 CST 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\013\013\000\002\013\012" +
    "\000\002\012\014\000\002\012\013\000\002\015\004\000" +
    "\002\015\003\000\002\004\013\000\002\016\004\000\002" +
    "\016\003\000\002\005\013\000\002\005\013\000\002\005" +
    "\013\000\002\005\014\000\002\022\012\000\002\017\012" +
    "\000\002\020\013\000\002\020\012\000\002\014\004\000" +
    "\002\014\003\000\002\007\005\000\002\007\005\000\002" +
    "\007\007\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\006\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\007\000\002\007\007\000\002\007\007\000\002\007\007" +
    "\000\002\007\007\000\002\007\007\000\002\007\007\000" +
    "\002\010\006\000\002\010\005\000\002\021\005\000\002" +
    "\021\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\004\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\011\005" +
    "\000\002\011\006\000\002\011\010\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\004\006\001\002\000\004\002\001\001" +
    "\002\000\006\002\ufffe\004\363\001\002\000\006\007\375" +
    "\010\013\001\002\000\004\002\374\001\002\000\004\004" +
    "\012\001\002\000\006\002\uffff\004\363\001\002\000\006" +
    "\007\014\010\013\001\002\000\054\022\032\023\026\024" +
    "\044\025\051\026\024\027\023\030\036\031\035\032\033" +
    "\033\034\034\046\035\047\036\042\037\037\040\030\041" +
    "\041\042\045\043\040\044\043\045\025\117\031\001\002" +
    "\000\004\005\015\001\002\000\004\123\016\001\002\000" +
    "\004\004\017\001\002\000\004\006\020\001\002\000\004" +
    "\007\021\001\002\000\004\005\022\001\002\000\004\004" +
    "\ufffd\001\002\000\004\061\361\001\002\000\004\061\357" +
    "\001\002\000\004\061\353\001\002\000\004\061\347\001" +
    "\002\000\056\005\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\045\uffeb\117\uffeb\001\002\000\004\061" +
    "\345\001\002\000\004\061\343\001\002\000\004\061\341" +
    "\001\002\000\004\061\333\001\002\000\004\061\331\001" +
    "\002\000\004\061\327\001\002\000\004\061\325\001\002" +
    "\000\004\061\317\001\002\000\004\061\311\001\002\000" +
    "\004\061\307\001\002\000\004\061\301\001\002\000\004" +
    "\061\277\001\002\000\004\061\273\001\002\000\004\061" +
    "\271\001\002\000\004\061\267\001\002\000\004\061\264" +
    "\001\002\000\056\005\150\022\032\023\026\024\044\025" +
    "\051\026\024\027\023\030\036\031\035\032\033\033\034" +
    "\034\046\035\047\036\042\037\037\040\030\041\041\042" +
    "\045\043\040\044\043\045\025\117\031\001\002\000\004" +
    "\061\052\001\002\000\004\062\053\001\002\000\004\121" +
    "\055\001\002\000\004\063\146\001\002\000\004\064\056" +
    "\001\002\000\026\056\067\057\061\064\064\065\071\077" +
    "\057\113\070\120\060\121\063\122\066\126\062\001\002" +
    "\000\024\056\067\057\061\064\064\077\057\113\070\120" +
    "\060\121\063\122\066\126\062\001\002\000\046\065\uffb8" +
    "\070\uffb8\071\uffb8\076\uffb8\077\uffb8\100\uffb8\101\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8" +
    "\111\uffb8\112\uffb8\114\uffb8\115\uffb8\001\002\000\046\065" +
    "\uffb4\070\uffb4\071\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\112\uffb4\114\uffb4\115\uffb4\001\002\000\046" +
    "\065\uffb6\070\uffb6\071\uffb6\076\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\111\uffb6\112\uffb6\114\uffb6\115\uffb6\001\002\000" +
    "\050\065\uffbc\066\142\070\uffbc\071\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc\106" +
    "\uffbc\107\uffbc\110\uffbc\111\uffbc\112\uffbc\114\uffbc\115\uffbc" +
    "\001\002\000\024\056\067\057\061\064\064\077\057\113" +
    "\070\120\060\121\063\122\066\126\062\001\002\000\006" +
    "\065\136\114\135\001\002\000\046\065\uffb7\070\uffb7\071" +
    "\uffb7\076\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7\111\uffb7\112" +
    "\uffb7\114\uffb7\115\uffb7\001\002\000\046\065\uffb5\070\uffb5" +
    "\071\uffb5\076\uffb5\077\uffb5\100\uffb5\101\uffb5\102\uffb5\103" +
    "\uffb5\104\uffb5\105\uffb5\106\uffb5\107\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\114\uffb5\115\uffb5\001\002\000\024\056\067\057" +
    "\061\064\064\077\057\113\070\120\060\121\063\122\066" +
    "\126\062\001\002\000\004\063\uffd0\001\002\000\046\065" +
    "\uffce\070\100\071\110\076\103\077\073\100\107\101\104" +
    "\102\077\103\102\104\076\105\075\106\101\107\112\110" +
    "\106\111\074\112\111\114\uffce\115\105\001\002\000\024" +
    "\056\067\057\061\064\064\077\057\113\070\120\060\121" +
    "\063\122\066\126\062\001\002\000\024\056\067\057\061" +
    "\064\064\077\057\113\070\120\060\121\063\122\066\126" +
    "\062\001\002\000\024\056\067\057\061\064\064\077\057" +
    "\113\070\120\060\121\063\122\066\126\062\001\002\000" +
    "\024\056\067\057\061\064\064\077\057\113\070\120\060" +
    "\121\063\122\066\126\062\001\002\000\024\056\067\057" +
    "\061\064\064\077\057\113\070\120\060\121\063\122\066" +
    "\126\062\001\002\000\046\065\uffbe\070\uffbe\071\uffbe\076" +
    "\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe" +
    "\105\uffbe\106\uffbe\107\uffbe\110\uffbe\111\uffbe\112\uffbe\114" +
    "\uffbe\115\uffbe\001\002\000\024\056\067\057\061\064\064" +
    "\077\057\113\070\120\060\121\063\122\066\126\062\001" +
    "\002\000\024\056\067\057\061\064\064\077\057\113\070" +
    "\120\060\121\063\122\066\126\062\001\002\000\024\056" +
    "\067\057\061\064\064\077\057\113\070\120\060\121\063" +
    "\122\066\126\062\001\002\000\024\056\067\057\061\064" +
    "\064\077\057\113\070\120\060\121\063\122\066\126\062" +
    "\001\002\000\004\121\117\001\002\000\024\056\067\057" +
    "\061\064\064\077\057\113\070\120\060\121\063\122\066" +
    "\126\062\001\002\000\024\056\067\057\061\064\064\077" +
    "\057\113\070\120\060\121\063\122\066\126\062\001\002" +
    "\000\046\065\uffbd\070\uffbd\071\uffbd\076\uffbd\077\uffbd\100" +
    "\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd\106\uffbd" +
    "\107\uffbd\110\uffbd\111\uffbd\112\uffbd\114\uffbd\115\uffbd\001" +
    "\002\000\024\056\067\057\061\064\064\077\057\113\070" +
    "\120\060\121\063\122\066\126\062\001\002\000\024\056" +
    "\067\057\061\064\064\077\057\113\070\120\060\121\063" +
    "\122\066\126\062\001\002\000\046\065\uffca\070\100\071" +
    "\110\076\103\077\073\100\107\101\104\102\077\103\uffca" +
    "\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\111\uffca\112" +
    "\uffca\114\uffca\115\105\001\002\000\046\065\uffcd\070\100" +
    "\071\110\076\103\077\073\100\107\101\104\102\077\103" +
    "\102\104\076\105\075\106\101\107\112\110\106\111\074" +
    "\112\uffcd\114\uffcd\115\105\001\002\000\046\065\uffc2\070" +
    "\100\071\110\076\uffc2\077\uffc2\100\uffc2\101\uffc2\102\077" +
    "\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110\uffc2\111" +
    "\uffc2\112\uffc2\114\uffc2\115\105\001\002\000\046\065\uffc9" +
    "\070\100\071\110\076\103\077\073\100\107\101\104\102" +
    "\077\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9" +
    "\111\uffc9\112\uffc9\114\uffc9\115\105\001\002\000\050\065" +
    "\uffbb\066\120\070\uffbb\071\uffbb\076\uffbb\077\uffbb\100\uffbb" +
    "\101\uffbb\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107" +
    "\uffbb\110\uffbb\111\uffbb\112\uffbb\114\uffbb\115\uffbb\001\002" +
    "\000\004\120\121\001\002\000\004\067\122\001\002\000" +
    "\046\065\uffb9\070\uffb9\071\uffb9\076\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107" +
    "\uffb9\110\uffb9\111\uffb9\112\uffb9\114\uffb9\115\uffb9\001\002" +
    "\000\046\065\uffc1\070\100\071\110\076\uffc1\077\uffc1\100" +
    "\uffc1\101\uffc1\102\077\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\110\uffc1\111\uffc1\112\uffc1\114\uffc1\115\105\001" +
    "\002\000\046\065\uffc4\070\100\071\110\076\uffc4\077\uffc4" +
    "\100\107\101\104\102\077\103\uffc4\104\uffc4\105\uffc4\106" +
    "\uffc4\107\uffc4\110\uffc4\111\uffc4\112\uffc4\114\uffc4\115\105" +
    "\001\002\000\046\065\uffc8\070\100\071\110\076\103\077" +
    "\073\100\107\101\104\102\077\103\uffc8\104\uffc8\105\uffc8" +
    "\106\uffc8\107\uffc8\110\uffc8\111\uffc8\112\uffc8\114\uffc8\115" +
    "\105\001\002\000\046\065\uffc5\070\100\071\110\076\103" +
    "\077\073\100\107\101\104\102\077\103\102\104\076\105" +
    "\uffc5\106\uffc5\107\112\110\106\111\uffc5\112\uffc5\114\uffc5" +
    "\115\105\001\002\000\046\065\uffc0\070\100\071\110\076" +
    "\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0" +
    "\105\uffc0\106\uffc0\107\uffc0\110\uffc0\111\uffc0\112\uffc0\114" +
    "\uffc0\115\105\001\002\000\046\065\uffc7\070\100\071\110" +
    "\076\103\077\073\100\107\101\104\102\077\103\uffc7\104" +
    "\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7\111\uffc7\112\uffc7" +
    "\114\uffc7\115\105\001\002\000\046\065\uffc6\070\100\071" +
    "\110\076\103\077\073\100\107\101\104\102\077\103\102" +
    "\104\076\105\uffc6\106\uffc6\107\112\110\106\111\uffc6\112" +
    "\uffc6\114\uffc6\115\105\001\002\000\046\065\uffcc\070\100" +
    "\071\110\076\103\077\073\100\107\101\104\102\077\103" +
    "\102\104\076\105\075\106\101\107\112\110\106\111\uffcc" +
    "\112\uffcc\114\uffcc\115\105\001\002\000\046\065\uffc3\070" +
    "\100\071\110\076\uffc3\077\uffc3\100\107\101\104\102\077" +
    "\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110\uffc3\111" +
    "\uffc3\112\uffc3\114\uffc3\115\105\001\002\000\046\065\uffcb" +
    "\070\100\071\110\076\103\077\073\100\107\101\104\102" +
    "\077\103\102\104\076\105\075\106\101\107\112\110\106" +
    "\111\uffcb\112\uffcb\114\uffcb\115\105\001\002\000\024\056" +
    "\067\057\061\064\064\077\057\113\070\120\060\121\063" +
    "\122\066\126\062\001\002\000\004\063\uffd1\001\002\000" +
    "\046\065\uffcf\070\100\071\110\076\103\077\073\100\107" +
    "\101\104\102\077\103\102\104\076\105\075\106\101\107" +
    "\112\110\106\111\074\112\111\114\uffcf\115\105\001\002" +
    "\000\044\065\141\070\100\071\110\076\103\077\073\100" +
    "\107\101\104\102\077\103\102\104\076\105\075\106\101" +
    "\107\112\110\106\111\074\112\111\115\105\001\002\000" +
    "\046\065\uffb3\070\uffb3\071\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107" +
    "\uffb3\110\uffb3\111\uffb3\112\uffb3\114\uffb3\115\uffb3\001\002" +
    "\000\004\120\143\001\002\000\004\067\144\001\002\000" +
    "\046\065\uffba\070\uffba\071\uffba\076\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\110\uffba\111\uffba\112\uffba\114\uffba\115\uffba\001\002" +
    "\000\046\065\uffbf\070\uffbf\071\uffbf\076\uffbf\077\uffbf\100" +
    "\uffbf\101\uffbf\102\uffbf\103\uffbf\104\uffbf\105\uffbf\106\uffbf" +
    "\107\uffbf\110\uffbf\111\uffbf\112\uffbf\114\uffbf\115\105\001" +
    "\002\000\056\005\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\044\uffd3\045\uffd3\117\uffd3\001\002\000\056\005" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\117\uffec\001\002\000\004\004\151\001\002\000" +
    "\004\011\157\001\002\000\004\004\ufff8\001\002\000\004" +
    "\004\154\001\002\000\006\006\156\011\157\001\002\000" +
    "\004\004\ufff9\001\002\000\004\010\262\001\002\000\054" +
    "\022\032\023\026\024\044\025\051\026\024\027\023\030" +
    "\036\031\035\032\033\033\034\034\046\035\047\036\042" +
    "\037\037\040\030\041\041\042\045\043\040\044\043\045" +
    "\025\117\031\001\002\000\056\005\161\022\032\023\026" +
    "\024\044\025\051\026\024\027\023\030\036\031\035\032" +
    "\033\033\034\034\046\035\047\036\042\037\037\040\030" +
    "\041\041\042\045\043\040\044\043\045\025\117\031\001" +
    "\002\000\004\004\164\001\002\000\004\004\ufff5\001\002" +
    "\000\004\004\256\001\002\000\006\012\165\013\166\001" +
    "\002\000\054\022\032\023\026\024\044\025\051\026\024" +
    "\027\023\030\036\031\035\032\033\033\034\034\046\035" +
    "\047\036\042\037\037\040\030\041\041\042\045\043\040" +
    "\044\043\045\025\117\031\001\002\000\054\022\032\023" +
    "\026\024\044\025\051\026\024\027\023\030\036\031\035" +
    "\032\033\033\034\034\046\035\047\036\042\037\037\040" +
    "\030\041\041\042\045\043\040\044\043\045\025\117\031" +
    "\001\002\000\056\005\170\022\032\023\026\024\044\025" +
    "\051\026\024\027\023\030\036\031\035\032\033\033\034" +
    "\034\046\035\047\036\042\037\037\040\030\041\041\042" +
    "\045\043\040\044\043\045\025\117\031\001\002\000\004" +
    "\004\171\001\002\000\006\014\220\016\203\001\002\000" +
    "\004\004\214\001\002\000\004\004\174\001\002\000\006" +
    "\006\202\016\203\001\002\000\004\004\176\001\002\000" +
    "\004\006\177\001\002\000\004\013\200\001\002\000\004" +
    "\005\201\001\002\000\004\004\ufff1\001\002\000\004\013" +
    "\212\001\002\000\004\005\204\001\002\000\004\123\205" +
    "\001\002\000\004\004\206\001\002\000\004\006\207\001" +
    "\002\000\004\016\210\001\002\000\004\005\211\001\002" +
    "\000\004\004\ufff0\001\002\000\004\005\213\001\002\000" +
    "\004\004\ufff2\001\002\000\004\006\215\001\002\000\004" +
    "\013\216\001\002\000\004\005\217\001\002\000\004\004" +
    "\ufff3\001\002\000\004\005\221\001\002\000\004\004\222" +
    "\001\002\000\004\015\237\001\002\000\004\004\224\001" +
    "\002\000\006\006\225\015\226\001\002\000\004\014\235" +
    "\001\002\000\004\005\227\001\002\000\004\123\230\001" +
    "\002\000\004\004\231\001\002\000\004\006\232\001\002" +
    "\000\004\015\233\001\002\000\004\005\234\001\002\000" +
    "\004\004\uffee\001\002\000\004\005\236\001\002\000\004" +
    "\004\uffef\001\002\000\004\005\240\001\002\000\004\123" +
    "\241\001\002\000\004\004\242\001\002\000\004\006\243" +
    "\001\002\000\004\015\244\001\002\000\004\005\245\001" +
    "\002\000\004\004\uffed\001\002\000\056\005\247\022\032" +
    "\023\026\024\044\025\051\026\024\027\023\030\036\031" +
    "\035\032\033\033\034\034\046\035\047\036\042\037\037" +
    "\040\030\041\041\042\045\043\040\044\043\045\025\117" +
    "\031\001\002\000\004\123\250\001\002\000\004\004\251" +
    "\001\002\000\004\006\252\001\002\000\004\012\253\001" +
    "\002\000\004\005\254\001\002\000\004\004\ufff4\001\002" +
    "\000\004\004\ufff6\001\002\000\010\006\257\012\165\013" +
    "\166\001\002\000\004\011\260\001\002\000\004\005\261" +
    "\001\002\000\004\004\ufff7\001\002\000\004\005\263\001" +
    "\002\000\006\002\ufffa\004\ufffa\001\002\000\004\061\265" +
    "\001\002\000\004\120\266\001\002\000\056\005\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1" +
    "\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1" +
    "\117\uffe1\001\002\000\004\125\270\001\002\000\056\005" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\117\uffe2\001\002\000\004\125\272\001\002\000" +
    "\056\005\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\117\uffdd\001\002\000\004\062\274\001" +
    "\002\000\004\121\055\001\002\000\004\063\276\001\002" +
    "\000\056\005\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\117\uffd4\001\002\000\004\125\300" +
    "\001\002\000\056\005\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\043\uffde\044\uffde\045\uffde\117\uffde\001\002\000\004" +
    "\060\302\001\002\000\006\056\304\057\303\001\002\000" +
    "\004\060\306\001\002\000\004\060\305\001\002\000\056" +
    "\005\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\117\uffda\001\002\000\056\005\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\117" +
    "\uffd9\001\002\000\004\120\310\001\002\000\056\005\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\117\uffdf\001\002\000\004\060\312\001\002\000\006" +
    "\056\314\057\313\001\002\000\004\060\316\001\002\000" +
    "\004\060\315\001\002\000\056\005\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\117\uffd6\001" +
    "\002\000\056\005\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\117\uffd5\001\002\000\004\060" +
    "\320\001\002\000\006\056\322\057\321\001\002\000\004" +
    "\060\324\001\002\000\004\060\323\001\002\000\056\005" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\117\uffd8\001\002\000\056\005\uffd7\022\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7\117\uffd7" +
    "\001\002\000\004\120\326\001\002\000\056\005\uffe5\022" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5" +
    "\117\uffe5\001\002\000\004\120\330\001\002\000\056\005" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036" +
    "\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\117\uffe4\001\002\000\004\125\332\001\002\000" +
    "\056\005\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\117\uffe3\001\002\000\004\060\334\001" +
    "\002\000\006\056\336\057\335\001\002\000\004\060\340" +
    "\001\002\000\004\060\337\001\002\000\056\005\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\117\uffdc\001\002\000\056\005\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\117\uffdb\001\002" +
    "\000\004\125\342\001\002\000\056\005\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9" +
    "\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\117\uffe9" +
    "\001\002\000\004\125\344\001\002\000\056\005\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037" +
    "\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea" +
    "\117\uffea\001\002\000\004\120\346\001\002\000\056\005" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0" +
    "\045\uffe0\117\uffe0\001\002\000\004\060\350\001\002\000" +
    "\004\124\351\001\002\000\004\060\352\001\002\000\056" +
    "\005\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\045\uffe8\117\uffe8\001\002\000\004\062\354\001\002" +
    "\000\004\121\055\001\002\000\004\063\356\001\002\000" +
    "\056\005\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\117\uffd2\001\002\000\004\120\360\001" +
    "\002\000\056\005\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\117\uffe7\001\002\000\004\120" +
    "\362\001\002\000\056\005\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\033" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6\041\uffe6" +
    "\042\uffe6\043\uffe6\044\uffe6\045\uffe6\117\uffe6\001\002\000" +
    "\004\010\364\001\002\000\054\022\032\023\026\024\044" +
    "\025\051\026\024\027\023\030\036\031\035\032\033\033" +
    "\034\034\046\035\047\036\042\037\037\040\030\041\041" +
    "\042\045\043\040\044\043\045\025\117\031\001\002\000" +
    "\056\005\366\022\032\023\026\024\044\025\051\026\024" +
    "\027\023\030\036\031\035\032\033\033\034\034\046\035" +
    "\047\036\042\037\037\040\030\041\041\042\045\043\040" +
    "\044\043\045\025\117\031\001\002\000\004\004\151\001" +
    "\002\000\004\004\370\001\002\000\006\006\371\011\157" +
    "\001\002\000\004\010\372\001\002\000\004\005\373\001" +
    "\002\000\006\002\ufffb\004\ufffb\001\002\000\004\002\000" +
    "\001\002\000\004\005\376\001\002\000\004\123\377\001" +
    "\002\000\004\004\u0100\001\002\000\004\006\u0101\001\002" +
    "\000\004\007\u0102\001\002\000\004\005\u0103\001\002\000" +
    "\004\004\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\012\002\006\003\003\012\004\013\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\026\014\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\071\021\064\001\001\000\004\011\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\132\001\001" +
    "\000\004\011\131\001\001\000\004\011\130\001\001\000" +
    "\004\011\127\001\001\000\004\011\126\001\001\000\002" +
    "\001\001\000\004\011\125\001\001\000\004\011\124\001" +
    "\001\000\004\011\123\001\001\000\004\011\122\001\001" +
    "\000\002\001\001\000\004\011\115\001\001\000\004\011" +
    "\114\001\001\000\002\001\001\000\004\011\113\001\001" +
    "\000\004\011\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\151\015\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\026\014\157\001\001\000\004\007" +
    "\146\001\001\000\006\005\161\016\162\001\001\000\002" +
    "\001\001\000\004\005\254\001\001\000\002\001\001\000" +
    "\006\007\026\014\245\001\001\000\006\007\026\014\166" +
    "\001\001\000\004\007\146\001\001\000\006\017\172\022" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\222\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\354\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\026\014\364\001\001\000\004\007\146\001\001\000" +
    "\006\004\151\015\366\001\001\000\004\004\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    return lexer.next_token();

    }


    private Yylex lexer;
    private File file;
    
    public parser( String in ) {
        this();
        
        lexer = new Yylex( new StringReader( in ) );
    }

    public nodo root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E ::= LPAR E RPAR 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E ::= FALSO 
            {
              nodo RESULT =null;
		 RESULT = new bool(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= VERDADERO 
            {
              nodo RESULT =null;
		 RESULT = new bool(1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= NULO 
            {
              nodo RESULT =null;
		 RESULT = new nulo(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= STRING 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new str(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= NUM 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new num(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= E DOT ID_L LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Obj_getArr(e, i, Integer.parseInt(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= ID_L LBRACK NUM RBRACK 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new getArr(e, Integer.parseInt(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E DOT ID_L 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Obj_getId(e, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= ID_L 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new getId(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E MINUSMINUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, -1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E PLUSPLUS 
            {
              nodo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new aumento(e, 1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, null, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E POW E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "^"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E DIV E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E TIMES E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= E MINUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= E PLUS E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new arm_exp(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= E NOTEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "!="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E EQEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E LESSTHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E MORETHANEQ E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E LESSTHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E MORETHAN E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rel_exp(e1, e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= NOT E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, null, "!"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= E AND E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "&&"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= E OR E 
            {
              nodo RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nodo e1 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e2 = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new log_exp(e1, e2, "||"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // l_E ::= E 
            {
              LinkedList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(e);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // l_E ::= l_E COMMA E 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo e = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e);
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("l_E",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // call_f ::= ID_L LPAR RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new call_f(i, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // call_f ::= ID_L LPAR l_E RPAR 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList e = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new call_f(i, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call_f",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // AT ::= ACCION EQ LCURL call_f RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("accion", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AT ::= ACCIONFINAL EQ LCURL call_f RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("final", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AT ::= ACCIONINICIAL EQ LCURL call_f RCURL 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nodo i = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("inicial", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AT ::= AUTO_REPRODUCCION EQ DQ FALSO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("auto", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AT ::= AUTO_REPRODUCCION EQ DQ VERDADERO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("auto", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AT ::= CURSIVA EQ DQ FALSO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("cursiva", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AT ::= CURSIVA EQ DQ VERDADERO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("cursiva", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AT ::= NEGRITA EQ DQ FALSO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("negrita", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AT ::= NEGRITA EQ DQ VERDADERO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("negrita", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AT ::= BORDE EQ DQ FALSO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("borde", false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AT ::= BORDE EQ DQ VERDADERO DQ 
            {
              nodo RESULT =null;
		 RESULT = new Atributo("borde", true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AT ::= PATH EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("path", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AT ::= REFERENCIA EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("ref", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AT ::= MINIMO EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("min", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AT ::= MAXIMO EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("max", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AT ::= TAM EQ EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("tam", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AT ::= FUENTE EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("fuente", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AT ::= NOMBRE EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("nombre", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AT ::= ANCHO EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("ancho", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AT ::= ALTO EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("alto", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AT ::= Y EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("y", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AT ::= X EQ NUM 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("x", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AT ::= COLOR EQ DQ HEX DQ 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Atributo("color", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AT ::= TIPO EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("tipo", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AT ::= ID EQ STRINGLIT 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Atributo("id", i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AT",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATTR ::= AT 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(a);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATTR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATTR ::= ATTR AT 
            {
              LinkedList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList t = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo a = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 t.add(a);
                                                                                   RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ATTR",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DT ::= OPENTAG DATO CLOSETAG CONTENIDO OPENTAG SLASH DATO CLOSETAG 
            {
              LinkedList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(d);
                                                                                   RESULT = list; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DT ::= DT OPENTAG DATO CLOSETAG CONTENIDO OPENTAG SLASH DATO CLOSETAG 
            {
              LinkedList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 l.add(d); 
                                                                                   RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DT",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DATOS ::= OPENTAG LISTADATOS CLOSETAG DT OPENTAG SLASH LISTADATOS CLOSETAG 
            {
              LinkedList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DATOS",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEF ::= OPENTAG DEFECTO CLOSETAG CONTENIDO OPENTAG SLASH DEFECTO CLOSETAG 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEF",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DATOS DEF OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DATOS OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, null, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CTRL ::= OPENTAG CONTROL ATTR CLOSETAG DEF OPENTAG SLASH CONTROL CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Control(a, d, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CTRL ::= OPENTAG TEXTO ATTR CLOSETAG CONTENIDO OPENTAG SLASH TEXTO CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Texto(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTRL",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONTROLES ::= CTRL 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONTROLES ::= CONTROLES CTRL 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.add(c);
                                                                                   RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONT ::= OPENTAG CONTENEDOR ATTR CLOSETAG CONTROLES OPENTAG SLASH CONTENEDOR CLOSETAG 
            {
              nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new Contenedor(a, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONTENEDORES ::= CONT 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONTENEDORES ::= CONTENEDORES CONT 
            {
              LinkedList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo c = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 s.add(c);
                                                                                   RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTENEDORES",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // XML ::= OPENTAG VENTANA ATTR CLOSETAG CONTENEDORES OPENTAG SLASH VENTANA CLOSETAG 
            {
              LinkedList RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<nodo> list = new LinkedList<>();
                                                                                   list.add(new Ventana(a, c));
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XML",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // XML ::= XML OPENTAG VENTANA ATTR CLOSETAG CONTENEDORES OPENTAG SLASH VENTANA CLOSETAG 
            {
              LinkedList RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList a = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList c = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 x.add(new Ventana(a, c)); 
                                                                                   RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("XML",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= OPENTAG IMPORTAR CLOSETAG CONTENIDO OPENTAG SLASH IMPORTAR CLOSETAG 
            {
              LinkedList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 LinkedList<String> list = new LinkedList<>();
                                                                                   list.add(c);
                                                                                   RESULT = list;
                                                                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= IMPORTS OPENTAG IMPORTAR CLOSETAG CONTENIDO OPENTAG SLASH IMPORTAR CLOSETAG 
            {
              LinkedList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList i = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 i.add(c);
                                                                                   RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L ::= XML 
            {
              nodo RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Head(null, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L ::= IMPORTS XML 
            {
              nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList i = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList x = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Head(i, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // S ::= L 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		nodo l = (nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.root = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

