/* The following code was generated by JFlex 1.6.1 */

package grammar_gxml;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int TAG = 4;
  public static final int F_CALL = 6;
  public static final int CONTENIDO = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\4\1\0\1\1\1\0\1\0\1\1\16\4\4\0\1\0\1\52"+
    "\1\40\1\0\1\2\1\0\1\53\1\0\1\44\1\45\1\3\1\50"+
    "\1\55\1\37\1\6\1\11\12\5\2\0\1\7\1\41\1\10\1\56"+
    "\1\0\1\20\1\33\1\24\1\25\1\22\1\31\1\36\1\35\1\12"+
    "\2\2\1\27\1\13\1\23\1\15\1\14\1\2\1\16\1\30\1\17"+
    "\1\32\1\21\1\2\1\26\1\34\1\2\1\46\1\57\1\47\1\51"+
    "\1\2\1\0\1\20\1\33\1\24\1\25\1\22\1\31\1\36\1\35"+
    "\1\12\2\2\1\27\1\13\1\23\1\15\1\14\1\2\1\16\1\30"+
    "\1\17\1\32\1\21\1\2\1\26\1\34\1\2\1\42\1\54\1\43"+
    "\1\0\41\4\2\0\4\2\4\0\1\2\2\0\1\4\7\0\1\2"+
    "\4\0\1\2\5\0\27\2\1\0\37\2\1\0\70\2\2\12\115\2"+
    "\1\30\u0142\2\4\0\14\2\16\0\5\2\7\0\1\2\1\0\1\2"+
    "\21\0\160\4\5\2\1\0\2\2\2\0\4\2\1\0\1\2\6\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\123\2\1\0"+
    "\213\2\1\0\5\4\2\0\246\2\1\0\46\2\2\0\1\2\7\0"+
    "\47\2\7\0\1\2\1\0\55\4\1\0\1\4\1\0\2\4\1\0"+
    "\2\4\1\0\1\4\10\0\33\2\5\0\3\2\15\0\6\4\5\0"+
    "\1\2\4\0\13\4\1\0\1\4\3\0\53\2\37\4\4\0\2\2"+
    "\1\4\143\2\1\0\1\2\10\4\1\0\6\4\2\2\2\4\1\0"+
    "\4\4\2\2\12\4\3\2\2\0\1\2\17\0\1\4\1\2\1\4"+
    "\36\2\33\4\2\0\131\2\13\4\1\2\16\0\12\4\41\2\11\4"+
    "\2\2\4\0\1\2\5\0\26\2\4\4\1\2\11\4\1\2\3\4"+
    "\1\2\5\4\22\0\31\2\3\4\104\0\25\2\56\0\41\4\66\2"+
    "\3\4\1\2\22\4\1\2\7\4\12\2\2\4\2\0\12\4\1\0"+
    "\20\2\3\4\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\1\2\3\0\4\2\2\0\1\4\1\2\7\4\2\0\2\4"+
    "\2\0\3\4\1\2\10\0\1\4\4\0\2\2\1\0\3\2\2\4"+
    "\2\0\12\4\4\2\7\0\1\2\5\0\3\4\1\0\6\2\4\0"+
    "\2\2\2\0\26\2\1\0\7\2\1\0\2\2\1\0\2\2\1\0"+
    "\2\2\2\0\1\4\1\0\5\4\4\0\2\4\2\0\3\4\3\0"+
    "\1\4\7\0\4\2\1\0\1\2\7\0\14\4\3\2\1\4\13\0"+
    "\3\4\1\0\11\2\1\0\3\2\1\0\26\2\1\0\7\2\1\0"+
    "\2\2\1\0\5\2\2\0\1\4\1\2\10\4\1\0\3\4\1\0"+
    "\3\4\2\0\1\2\17\0\2\2\2\4\2\0\12\4\1\0\1\2"+
    "\7\0\1\2\7\0\3\4\1\0\10\2\2\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\5\2\2\0\1\4\1\2\7\4"+
    "\2\0\2\4\2\0\3\4\10\0\2\4\4\0\2\2\1\0\3\2"+
    "\2\4\2\0\12\4\1\0\1\2\20\0\1\4\1\2\1\0\6\2"+
    "\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2\1\0\2\2"+
    "\3\0\2\2\3\0\3\2\3\0\14\2\4\0\5\4\3\0\3\4"+
    "\1\0\4\4\2\0\1\2\6\0\1\4\16\0\12\4\11\0\1\2"+
    "\6\0\4\4\1\0\10\2\1\0\3\2\1\0\27\2\1\0\20\2"+
    "\3\0\1\2\7\4\1\0\3\4\1\0\4\4\7\0\2\4\1\0"+
    "\3\2\5\0\2\2\2\4\2\0\12\4\21\0\3\4\1\0\10\2"+
    "\1\0\3\2\1\0\27\2\1\0\12\2\1\0\5\2\2\0\1\4"+
    "\1\2\7\4\1\0\3\4\1\0\4\4\7\0\2\4\7\0\1\2"+
    "\1\0\2\2\2\4\2\0\12\4\1\0\2\2\16\0\3\4\1\0"+
    "\10\2\1\0\3\2\1\0\51\2\2\0\1\2\7\4\1\0\3\4"+
    "\1\0\4\4\1\2\10\0\1\4\7\0\3\2\2\4\2\0\12\4"+
    "\12\0\6\2\2\0\2\4\1\0\22\2\3\0\30\2\1\0\11\2"+
    "\1\0\1\2\2\0\7\2\3\0\1\4\4\0\6\4\1\0\1\4"+
    "\1\0\10\4\6\0\12\4\2\0\2\4\15\0\60\2\1\4\2\2"+
    "\7\4\4\0\10\2\10\4\1\0\12\4\47\0\2\2\1\0\1\2"+
    "\2\0\2\2\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2"+
    "\1\0\3\2\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2"+
    "\1\4\2\2\6\4\1\0\2\4\1\2\2\0\5\2\1\0\1\2"+
    "\1\0\6\4\2\0\12\4\2\0\4\2\40\0\1\2\27\0\2\4"+
    "\6\0\12\4\13\0\1\4\1\0\1\4\1\0\1\4\4\0\2\4"+
    "\10\2\1\0\44\2\4\0\24\4\1\0\2\4\5\2\13\4\1\0"+
    "\44\4\11\0\1\4\71\0\53\2\24\4\1\2\12\4\6\0\6\2"+
    "\4\4\4\2\3\4\1\2\3\4\2\2\7\4\3\2\4\4\15\2"+
    "\14\4\1\2\17\4\2\0\46\2\1\0\1\2\5\0\1\2\2\0"+
    "\53\2\1\0\u014d\2\1\0\4\2\2\0\7\2\1\0\1\2\1\0"+
    "\4\2\2\0\51\2\1\0\4\2\2\0\41\2\1\0\4\2\2\0"+
    "\7\2\1\0\1\2\1\0\4\2\2\0\17\2\1\0\71\2\1\0"+
    "\4\2\2\0\103\2\2\0\3\4\40\0\20\2\20\0\126\2\2\0"+
    "\6\2\3\0\u026c\2\2\0\21\2\1\0\32\2\5\0\113\2\3\0"+
    "\13\2\7\0\15\2\1\0\4\2\3\4\13\0\22\2\3\4\13\0"+
    "\22\2\2\4\14\0\15\2\1\0\3\2\1\0\2\4\14\0\64\2"+
    "\40\4\3\0\1\2\3\0\2\2\1\4\2\0\12\4\41\0\4\4"+
    "\1\0\12\4\6\0\130\2\10\0\51\2\1\4\1\2\5\0\106\2"+
    "\12\0\37\2\1\0\14\4\4\0\14\4\12\0\12\4\36\2\2\0"+
    "\5\2\13\0\54\2\4\0\32\2\6\0\12\4\46\0\27\2\5\4"+
    "\4\0\65\2\12\4\1\0\35\4\2\0\13\4\6\0\12\4\15\0"+
    "\1\2\10\0\16\4\102\0\5\4\57\2\21\4\7\2\4\0\12\4"+
    "\21\0\11\4\14\0\3\4\36\2\15\4\2\2\12\4\54\2\16\4"+
    "\14\0\44\2\24\4\10\0\12\4\3\0\3\2\12\4\44\2\122\0"+
    "\3\4\1\0\25\4\4\2\1\4\4\2\3\4\2\2\1\0\2\4"+
    "\6\0\300\2\66\4\6\0\4\4\u0116\2\2\0\6\2\2\0\46\2"+
    "\2\0\6\2\2\0\10\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\0\37\2\2\0\65\2\1\0\7\2\1\0\1\2\3\0\3\2"+
    "\1\0\7\2\3\0\4\2\2\0\6\2\4\0\15\2\5\0\3\2"+
    "\1\0\7\2\16\0\5\4\32\0\5\4\20\0\2\2\23\0\1\2"+
    "\13\0\5\4\1\0\12\4\1\0\1\2\15\0\1\2\20\0\15\2"+
    "\3\0\37\2\21\0\15\4\4\0\1\4\3\0\14\4\21\0\1\2"+
    "\4\0\1\2\2\0\12\2\1\0\1\2\3\0\5\2\6\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\4\2\1\0\13\2\2\0\4\2"+
    "\5\0\5\2\4\0\1\2\21\0\51\2\u0a77\0\57\2\1\0\57\2"+
    "\1\0\205\2\6\0\4\2\3\4\2\2\14\0\46\2\1\0\1\2"+
    "\5\0\1\2\2\0\70\2\7\0\1\2\17\0\1\4\27\2\11\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0\7\2\1\0"+
    "\7\2\1\0\7\2\1\0\7\2\1\0\40\4\57\0\1\2\u01d5\0"+
    "\3\2\31\0\11\2\6\4\1\0\5\2\2\0\5\2\4\0\126\2"+
    "\2\0\2\4\2\0\3\2\1\0\132\2\1\0\4\2\5\0\51\2"+
    "\3\0\136\2\21\0\33\2\65\0\20\2\u0200\0\u19b6\2\112\0\u51d6\2"+
    "\52\0\u048d\2\103\0\56\2\2\0\u010d\2\3\0\20\2\12\4\2\2"+
    "\24\0\57\2\1\4\4\0\12\4\1\0\37\2\2\4\120\2\2\4"+
    "\45\0\11\2\2\0\147\2\2\0\43\2\2\0\10\2\77\0\13\2"+
    "\1\4\3\2\1\4\4\2\1\4\27\2\5\4\20\0\1\2\7\0"+
    "\64\2\14\0\2\4\62\2\21\4\13\0\12\4\6\0\22\4\6\2"+
    "\3\0\1\2\1\0\1\2\2\0\12\4\34\2\10\4\2\0\27\2"+
    "\15\4\14\0\35\2\3\0\4\4\57\2\16\4\16\0\1\2\12\4"+
    "\6\0\5\2\1\4\12\2\12\4\5\2\1\0\51\2\16\4\11\0"+
    "\3\2\1\4\10\2\2\4\2\0\12\4\6\0\27\2\3\0\1\2"+
    "\3\4\62\2\1\4\1\2\3\4\2\2\2\4\5\2\2\4\1\2"+
    "\1\4\1\2\30\0\3\2\2\0\13\2\5\4\2\0\3\2\2\4"+
    "\12\0\6\2\2\0\6\2\2\0\6\2\11\0\7\2\1\0\7\2"+
    "\1\0\53\2\1\0\12\2\12\0\163\2\10\4\1\0\2\4\2\0"+
    "\12\4\6\0\u2ba4\2\14\0\27\2\4\0\61\2\u2104\0\u016e\2\2\0"+
    "\152\2\46\0\7\2\14\0\5\2\5\0\1\2\1\4\12\2\1\0"+
    "\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0\2\2\1\0"+
    "\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0\15\2\3\0"+
    "\20\4\20\0\20\4\3\0\2\2\30\0\3\2\31\0\1\2\6\0"+
    "\5\2\1\0\207\2\2\0\1\4\4\0\1\2\13\0\12\4\7\0"+
    "\32\2\4\0\1\2\1\0\32\2\13\0\131\2\3\0\6\2\2\0"+
    "\6\2\2\0\6\2\2\0\3\2\3\0\2\2\3\0\2\2\22\0"+
    "\3\4\4\0\14\2\1\0\32\2\1\0\23\2\1\0\2\2\1\0"+
    "\17\2\2\0\16\2\42\0\173\2\105\0\65\2\210\0\1\4\202\0"+
    "\35\2\3\0\61\2\17\0\1\4\37\0\40\2\20\0\33\2\5\0"+
    "\46\2\5\4\5\0\36\2\2\0\44\2\4\0\10\2\1\0\5\2"+
    "\52\0\236\2\2\0\12\4\126\0\50\2\10\0\64\2\234\0\u0137\2"+
    "\11\0\26\2\12\0\10\2\230\0\6\2\2\0\1\2\1\0\54\2"+
    "\1\0\2\2\3\0\1\2\2\0\27\2\12\0\27\2\11\0\37\2"+
    "\101\0\23\2\1\0\2\2\12\0\26\2\12\0\32\2\106\0\70\2"+
    "\6\0\2\2\100\0\1\2\3\4\1\0\2\4\5\0\4\4\4\2"+
    "\1\0\3\2\1\0\33\2\4\0\3\4\4\0\1\4\40\0\35\2"+
    "\3\0\35\2\43\0\10\2\1\0\34\2\2\4\31\0\66\2\12\0"+
    "\26\2\12\0\23\2\15\0\22\2\156\0\111\2\67\0\63\2\15\0"+
    "\63\2\u030d\0\3\4\65\2\17\4\37\0\12\4\17\0\4\4\55\2"+
    "\13\4\2\0\1\4\22\0\31\2\7\0\12\4\6\0\3\4\44\2"+
    "\16\4\1\0\12\4\20\0\43\2\1\4\2\0\1\2\11\0\3\4"+
    "\60\2\16\4\4\2\5\0\3\4\3\0\12\4\1\2\1\0\1\2"+
    "\43\0\22\2\1\0\31\2\14\4\110\0\7\2\1\0\1\2\1\0"+
    "\4\2\1\0\17\2\1\0\12\2\7\0\57\2\14\4\5\0\12\4"+
    "\6\0\4\4\1\0\10\2\2\0\2\2\2\0\26\2\1\0\7\2"+
    "\1\0\2\2\1\0\5\2\2\0\1\4\1\2\7\4\2\0\2\4"+
    "\2\0\3\4\2\0\1\2\6\0\1\4\5\0\5\2\2\4\2\0"+
    "\7\4\3\0\5\4\u010b\0\60\2\24\4\2\2\1\0\1\2\10\0"+
    "\12\4\246\0\57\2\7\4\2\0\11\4\27\0\4\2\2\4\42\0"+
    "\60\2\21\4\3\0\1\2\13\0\12\4\46\0\53\2\15\4\10\0"+
    "\12\4\66\0\32\2\3\0\17\4\4\0\12\4\u0166\0\100\2\12\4"+
    "\25\0\1\2\u01c0\0\71\2\u0507\0\u039a\2\146\0\157\2\21\0\304\2"+
    "\u0abc\0\u042f\2\u0fd1\0\u0247\2\u21b9\0\u0239\2\7\0\37\2\1\0\12\4"+
    "\146\0\36\2\2\0\5\4\13\0\60\2\7\4\11\0\4\2\14\0"+
    "\12\4\11\0\25\2\5\0\23\2\u0370\0\105\2\13\0\1\2\56\4"+
    "\20\0\4\4\15\2\u4060\0\2\2\u0bfe\0\153\2\5\0\15\2\3\0"+
    "\11\2\7\0\12\2\3\0\2\4\1\0\4\4\u14c1\0\5\4\3\0"+
    "\26\4\2\0\7\4\36\0\4\4\224\0\3\4\u01bb\0\125\2\1\0"+
    "\107\2\1\0\2\2\2\0\1\2\2\0\2\2\2\0\4\2\1\0"+
    "\14\2\1\0\1\2\1\0\7\2\1\0\101\2\1\0\4\2\2\0"+
    "\10\2\1\0\7\2\1\0\34\2\1\0\4\2\1\0\5\2\1\0"+
    "\1\2\3\0\7\2\1\0\u0154\2\2\0\31\2\1\0\31\2\1\0"+
    "\37\2\1\0\31\2\1\0\37\2\1\0\31\2\1\0\37\2\1\0"+
    "\31\2\1\0\37\2\1\0\31\2\1\0\10\2\2\0\62\4\u0200\0"+
    "\67\4\4\0\62\4\10\0\1\4\16\0\1\4\26\0\5\4\1\0"+
    "\17\4\u0d50\0\305\2\13\0\7\4\u0529\0\4\2\1\0\33\2\1\0"+
    "\2\2\1\0\1\2\2\0\1\2\1\0\12\2\1\0\4\2\1\0"+
    "\1\2\1\0\1\2\6\0\1\2\4\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\3\2\1\0\2\2\1\0\1\2\2\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2\1\0"+
    "\1\2\2\0\4\2\1\0\7\2\1\0\4\2\1\0\4\2\1\0"+
    "\1\2\1\0\12\2\1\0\21\2\5\0\3\2\1\0\5\2\1\0"+
    "\21\2\u1144\0\ua6d7\2\51\0\u1035\2\13\0\336\2\2\0\u1682\2\u295e\0"+
    "\u021e\2\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\4\36\0\140\4\200\0\360\4\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\13\6\1\12\4\6\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\0\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\6\1\44\34\6\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\7\12\6\1\61\37\6\1\62\1\6\1\63\3\6"+
    "\1\64\13\6\1\65\20\6\1\66\1\67\1\6\1\0"+
    "\1\70\10\6\1\71\5\6\1\72\1\6\1\73\1\74"+
    "\1\6\1\75\1\76\1\77\1\6\1\100\3\6\1\101"+
    "\1\0\2\6\1\102\1\103\11\6\1\104\7\6\1\0"+
    "\1\6\1\105\1\106\1\6\1\107\1\6\1\110\1\6"+
    "\1\111\2\6\1\112\6\6\1\0\1\6\1\113\5\6"+
    "\1\114\1\6\1\115\2\6\1\0\1\116\4\6\1\117"+
    "\1\120\2\6\1\0\1\121\1\6\1\122\1\123\1\6"+
    "\1\124\1\0\1\125\1\6\1\0\1\126\4\0\1\127";

  private static int [] zzUnpackAction() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\300\0\u0120"+
    "\0\300\0\u0150\0\u0180\0\u01b0\0\300\0\300\0\u01e0\0\u0210"+
    "\0\u0240\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390"+
    "\0\u03c0\0\u0180\0\u03f0\0\u0420\0\u0450\0\u0480\0\u0180\0\300"+
    "\0\300\0\300\0\u04b0\0\300\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\300\0\u05a0\0\300\0\300\0\300\0\300\0\300\0\u05d0"+
    "\0\300\0\u0600\0\u0630\0\u0660\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\u0690\0\u06c0\0\u0180\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0"+
    "\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\300\0\300\0\300\0\300\0\300\0\300\0\300"+
    "\0\300\0\300\0\300\0\300\0\300\0\u0690\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0"+
    "\0\u0180\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0"+
    "\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230"+
    "\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u0180\0\u13e0\0\u0180\0\u1410\0\u1440\0\u1470\0\u0180\0\u14a0"+
    "\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\u1650\0\u1680\0\u0180\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770"+
    "\0\u17a0\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0"+
    "\0\u1920\0\u1950\0\u1980\0\u19b0\0\u0180\0\u19e0\0\u1a10\0\u0180"+
    "\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\u1b90"+
    "\0\u0180\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u0180\0\u1cb0"+
    "\0\u0180\0\u0180\0\u1ce0\0\u0180\0\u0180\0\u0180\0\u1d10\0\u0180"+
    "\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\u1e60\0\u0180"+
    "\0\u0180\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u0180\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100"+
    "\0\u2130\0\u2160\0\u2190\0\u21c0\0\u0180\0\u0180\0\u21f0\0\u0180"+
    "\0\u2220\0\u0180\0\u2250\0\u0180\0\u2280\0\u22b0\0\u0180\0\u22e0"+
    "\0\u2310\0\u2340\0\u2370\0\u23a0\0\u23d0\0\u2400\0\u2430\0\u0180"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u0180\0\u2550\0\u0180"+
    "\0\u2580\0\u25b0\0\u25e0\0\u0180\0\u2610\0\u2640\0\u2670\0\u26a0"+
    "\0\u0180\0\u0180\0\u26d0\0\u2700\0\u2730\0\u0180\0\u2760\0\u0180"+
    "\0\u0180\0\u2790\0\u0180\0\u27c0\0\u0180\0\u27f0\0\u2820\0\u0180"+
    "\0\u2850\0\u2880\0\u28b0\0\u28e0\0\300";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\0\5\6\1\7\50\6\1\10\1\0\36\10"+
    "\1\11\16\10\1\12\2\0\1\13\2\0\1\14\2\0"+
    "\1\15\1\16\1\17\1\20\1\21\1\13\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\13\1\36\1\37\2\13\1\0\1\40"+
    "\1\41\1\42\17\0\1\13\1\43\1\0\1\14\1\44"+
    "\1\45\1\46\1\47\25\13\1\50\1\51\1\52\1\0"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\61\0\1\6\1\0\5\6"+
    "\1\0\50\6\1\10\1\0\36\10\1\0\16\10\17\0"+
    "\1\67\1\70\3\0\1\71\14\0\1\72\21\0\1\13"+
    "\1\0\2\13\4\0\25\13\26\0\1\14\1\73\53\0"+
    "\1\13\1\0\2\13\4\0\1\13\1\74\11\13\1\75"+
    "\11\13\23\0\1\13\1\0\2\13\4\0\1\76\5\13"+
    "\1\77\11\13\1\100\4\13\23\0\1\13\1\0\2\13"+
    "\4\0\4\13\1\101\1\13\1\102\16\13\23\0\1\13"+
    "\1\0\2\13\4\0\10\13\1\103\14\13\23\0\1\13"+
    "\1\0\2\13\4\0\1\104\5\13\1\105\1\13\1\106"+
    "\14\13\23\0\1\13\1\0\2\13\4\0\11\13\1\107"+
    "\1\110\2\13\1\111\2\13\1\112\4\13\23\0\1\13"+
    "\1\0\2\13\4\0\1\113\7\13\1\114\14\13\23\0"+
    "\1\13\1\0\2\13\4\0\11\13\1\115\13\13\23\0"+
    "\1\13\1\0\2\13\4\0\3\13\1\116\4\13\1\117"+
    "\7\13\1\120\4\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\121\14\13\1\122\4\13\23\0\1\13\1\0"+
    "\2\13\4\0\6\13\1\123\1\13\1\124\14\13\23\0"+
    "\1\13\1\0\2\13\4\0\1\125\24\13\23\0\1\13"+
    "\1\0\2\13\4\0\10\13\1\126\14\13\23\0\1\13"+
    "\1\0\2\13\4\0\6\13\1\127\11\13\1\130\4\13"+
    "\23\0\1\13\1\0\2\13\4\0\3\13\1\131\21\13"+
    "\62\0\1\132\57\0\1\133\57\0\1\134\57\0\1\135"+
    "\55\0\1\136\1\0\1\137\57\0\1\140\57\0\1\141"+
    "\6\0\1\142\50\0\1\143\71\0\1\144\60\0\1\145"+
    "\10\0\1\146\54\0\1\13\1\0\2\13\4\0\2\13"+
    "\1\147\3\13\1\150\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\11\13\1\151\13\13\23\0\1\13\1\0\2\13"+
    "\4\0\14\13\1\152\10\13\23\0\1\13\1\0\2\13"+
    "\4\0\15\13\1\153\1\154\6\13\23\0\1\13\1\0"+
    "\2\13\4\0\1\155\24\13\23\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\156\17\13\23\0\1\13\1\0\2\13"+
    "\4\0\17\13\1\157\5\13\23\0\1\13\1\0\2\13"+
    "\4\0\2\13\1\160\22\13\23\0\1\13\1\0\2\13"+
    "\4\0\1\13\1\161\23\13\23\0\1\13\1\0\2\13"+
    "\4\0\14\13\1\162\10\13\23\0\1\13\1\0\2\13"+
    "\4\0\12\13\1\163\12\13\23\0\1\13\1\0\2\13"+
    "\4\0\12\13\1\164\12\13\23\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\165\17\13\23\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\166\17\13\23\0\1\13\1\0\2\13"+
    "\4\0\13\13\1\167\11\13\23\0\1\13\1\0\2\13"+
    "\4\0\4\13\1\170\4\13\1\171\13\13\23\0\1\13"+
    "\1\0\2\13\4\0\7\13\1\172\15\13\23\0\1\13"+
    "\1\0\2\13\4\0\1\13\1\173\23\13\23\0\1\13"+
    "\1\0\2\13\4\0\24\13\1\174\23\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\175\23\13\23\0\1\13\1\0"+
    "\2\13\4\0\11\13\1\176\3\13\1\177\7\13\23\0"+
    "\1\13\1\0\2\13\4\0\4\13\1\200\20\13\23\0"+
    "\1\13\1\0\2\13\4\0\5\13\1\201\17\13\23\0"+
    "\1\13\1\0\2\13\4\0\16\13\1\202\1\203\5\13"+
    "\23\0\1\13\1\0\2\13\4\0\16\13\1\204\6\13"+
    "\23\0\1\13\1\0\2\13\4\0\12\13\1\205\12\13"+
    "\23\0\1\13\1\0\2\13\4\0\15\13\1\206\7\13"+
    "\23\0\1\13\1\0\2\13\4\0\10\13\1\207\14\13"+
    "\23\0\1\13\1\0\2\13\4\0\4\13\1\210\1\211"+
    "\17\13\23\0\1\13\1\0\2\13\4\0\3\13\1\212"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\24\13\1\213"+
    "\23\0\1\13\1\0\2\13\4\0\1\214\24\13\23\0"+
    "\1\13\1\0\2\13\4\0\1\215\24\13\23\0\1\13"+
    "\1\0\2\13\4\0\5\13\1\216\17\13\23\0\1\13"+
    "\1\0\2\13\4\0\1\217\24\13\23\0\1\13\1\0"+
    "\2\13\4\0\11\13\1\220\13\13\23\0\1\13\1\0"+
    "\2\13\4\0\23\13\1\221\1\13\23\0\1\13\1\0"+
    "\2\13\4\0\10\13\1\222\14\13\23\0\1\13\1\0"+
    "\2\13\4\0\3\13\1\223\21\13\23\0\1\13\1\0"+
    "\2\13\4\0\5\13\1\224\17\13\23\0\1\13\1\0"+
    "\2\13\4\0\23\13\1\225\1\13\23\0\1\13\1\0"+
    "\2\13\4\0\1\226\24\13\23\0\1\13\1\0\2\13"+
    "\4\0\3\13\1\227\21\13\23\0\1\13\1\0\2\13"+
    "\4\0\3\13\1\230\21\13\23\0\1\13\1\0\2\13"+
    "\4\0\10\13\1\231\14\13\23\0\1\13\1\0\2\13"+
    "\4\0\13\13\1\232\11\13\23\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\233\17\13\23\0\1\13\1\0\2\13"+
    "\4\0\1\234\24\13\23\0\1\13\1\0\2\13\4\0"+
    "\21\13\1\235\3\13\23\0\1\13\1\0\2\13\4\0"+
    "\4\13\1\236\20\13\23\0\1\13\1\0\2\13\4\0"+
    "\10\13\1\237\14\13\23\0\1\13\1\0\2\13\4\0"+
    "\5\13\1\240\17\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\241\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\16\13\1\242\6\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\243\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\2\13\1\244\22\13\23\0\1\13\1\0\2\13\4\0"+
    "\10\13\1\245\14\13\23\0\1\13\1\0\2\13\4\0"+
    "\5\13\1\246\17\13\23\0\1\13\1\0\2\13\4\0"+
    "\20\13\1\247\4\13\23\0\1\13\1\0\2\13\4\0"+
    "\16\13\1\250\6\13\23\0\1\13\1\0\2\13\4\0"+
    "\11\13\1\251\13\13\23\0\1\13\1\0\2\13\4\0"+
    "\13\13\1\252\11\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\253\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\4\13\1\254\20\13\23\0\1\13\1\0\2\13\4\0"+
    "\10\13\1\255\14\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\13\1\256\23\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\13\1\257\23\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\260\24\13\23\0\1\13\1\0\2\13\4\0\12\13"+
    "\1\261\12\13\23\0\1\13\1\0\2\13\4\0\12\13"+
    "\1\262\12\13\23\0\1\13\1\0\2\13\4\0\4\13"+
    "\1\263\20\13\23\0\1\13\1\0\2\13\4\0\3\13"+
    "\1\264\21\13\23\0\1\13\1\0\2\13\4\0\3\13"+
    "\1\265\21\13\23\0\1\13\1\0\2\13\4\0\3\13"+
    "\1\266\21\13\23\0\1\13\1\0\2\13\4\0\25\13"+
    "\1\267\22\0\1\13\1\0\2\13\4\0\3\13\1\270"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\6\13\1\271"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\6\13\1\272"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\6\13\1\273"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\4\13\1\274"+
    "\20\13\23\0\1\13\1\0\2\13\4\0\1\275\24\13"+
    "\23\0\1\13\1\0\2\13\4\0\4\13\1\276\20\13"+
    "\23\0\1\13\1\0\2\13\4\0\4\13\1\277\3\13"+
    "\1\300\14\13\23\0\1\13\1\0\2\13\4\0\4\13"+
    "\1\301\20\13\23\0\1\13\1\0\2\13\4\0\1\302"+
    "\24\13\23\0\1\13\1\0\2\13\4\0\15\13\1\303"+
    "\7\13\23\0\1\13\1\0\2\13\4\0\12\13\1\304"+
    "\12\13\23\0\1\13\1\0\2\13\4\0\6\13\1\305"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\11\13\1\306"+
    "\13\13\23\0\1\13\1\0\2\13\4\0\3\13\1\307"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\5\13\1\310"+
    "\17\13\23\0\1\13\1\0\2\13\4\0\10\13\1\311"+
    "\14\13\23\0\1\13\1\0\2\13\4\0\11\13\1\312"+
    "\13\13\23\0\1\13\1\0\2\13\4\0\5\13\1\313"+
    "\17\13\23\0\1\13\1\0\2\13\4\0\11\13\1\314"+
    "\13\13\23\0\1\13\1\0\2\13\4\0\3\13\1\315"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\3\13\1\316"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\1\13\1\317"+
    "\23\13\23\0\1\13\1\0\2\13\4\0\6\13\1\320"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\1\321\24\13"+
    "\23\0\1\13\1\0\2\13\4\0\10\13\1\322\14\13"+
    "\23\0\1\13\1\0\2\13\4\0\6\13\1\323\16\13"+
    "\23\0\1\13\1\0\2\13\4\0\11\13\1\324\13\13"+
    "\37\0\1\325\43\0\1\13\1\0\2\13\4\0\13\13"+
    "\1\326\11\13\23\0\1\13\1\0\2\13\4\0\11\13"+
    "\1\327\13\13\23\0\1\13\1\0\2\13\4\0\4\13"+
    "\1\330\20\13\23\0\1\13\1\0\2\13\4\0\10\13"+
    "\1\331\14\13\23\0\1\13\1\0\2\13\4\0\5\13"+
    "\1\332\17\13\23\0\1\13\1\0\2\13\4\0\1\333"+
    "\24\13\23\0\1\13\1\0\2\13\4\0\3\13\1\334"+
    "\21\13\23\0\1\13\1\0\2\13\4\0\11\13\1\335"+
    "\13\13\23\0\1\13\1\0\2\13\4\0\7\13\1\336"+
    "\15\13\23\0\1\13\1\0\2\13\4\0\10\13\1\337"+
    "\14\13\23\0\1\13\1\0\2\13\4\0\5\13\1\340"+
    "\17\13\23\0\1\13\1\0\2\13\4\0\13\13\1\341"+
    "\11\13\23\0\1\13\1\0\2\13\4\0\13\13\1\342"+
    "\11\13\23\0\1\13\1\0\2\13\4\0\10\13\1\343"+
    "\14\13\23\0\1\13\1\0\2\13\4\0\6\13\1\344"+
    "\16\13\23\0\1\13\1\0\2\13\4\0\10\13\1\345"+
    "\14\13\23\0\1\13\1\0\2\13\4\0\2\13\1\346"+
    "\22\13\23\0\1\13\1\0\2\13\4\0\11\13\1\347"+
    "\13\13\23\0\1\13\1\0\2\13\4\0\4\13\1\350"+
    "\20\13\23\0\1\13\1\0\2\13\4\0\1\351\16\13"+
    "\1\352\5\13\43\0\1\353\37\0\1\13\1\0\2\13"+
    "\4\0\10\13\1\354\14\13\23\0\1\13\1\0\2\13"+
    "\4\0\6\13\1\355\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\6\13\1\356\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\12\13\1\357\12\13\23\0\1\13\1\0\2\13"+
    "\4\0\15\13\1\360\7\13\23\0\1\13\1\0\2\13"+
    "\4\0\10\13\1\361\14\13\23\0\1\13\1\0\2\13"+
    "\4\0\6\13\1\362\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\24\13\1\363\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\364\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\6\13\1\365\16\13\23\0\1\13\1\0\2\13\4\0"+
    "\6\13\1\366\16\13\23\0\1\13\1\0\2\13\4\0"+
    "\4\13\1\367\20\13\23\0\1\13\1\0\2\13\4\0"+
    "\13\13\1\370\11\13\23\0\1\13\1\0\2\13\4\0"+
    "\6\13\1\371\16\13\23\0\1\13\1\0\2\13\4\0"+
    "\12\13\1\372\12\13\23\0\1\13\1\0\2\13\4\0"+
    "\10\13\1\373\14\13\23\0\1\13\1\0\2\13\4\0"+
    "\11\13\1\374\13\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\375\24\13\35\0\1\376\45\0\1\13\1\0\2\13"+
    "\4\0\4\13\1\377\20\13\23\0\1\13\1\0\2\13"+
    "\4\0\3\13\1\u0100\21\13\23\0\1\13\1\0\2\13"+
    "\4\0\13\13\1\u0101\11\13\23\0\1\13\1\0\2\13"+
    "\4\0\6\13\1\u0102\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\u0103\17\13\23\0\1\13\1\0\2\13"+
    "\4\0\4\13\1\u0104\20\13\23\0\1\13\1\0\2\13"+
    "\4\0\1\u0105\24\13\23\0\1\13\1\0\2\13\4\0"+
    "\15\13\1\u0106\7\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\u0107\24\13\23\0\1\13\1\0\2\13\4\0\6\13"+
    "\1\u0108\16\13\23\0\1\13\1\0\2\13\4\0\1\u0109"+
    "\24\13\23\0\1\13\1\0\2\13\4\0\11\13\1\u010a"+
    "\13\13\37\0\1\u010b\43\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\u010c\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\u010d\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\21\13\1\u010e\3\13\23\0\1\13\1\0\2\13\4\0"+
    "\3\13\1\u010f\21\13\23\0\1\13\1\0\2\13\4\0"+
    "\1\u0110\24\13\23\0\1\13\1\0\2\13\4\0\6\13"+
    "\1\u0111\16\13\23\0\1\13\1\0\2\13\4\0\6\13"+
    "\1\u0112\16\13\23\0\1\13\1\0\2\13\4\0\12\13"+
    "\1\u0113\12\13\23\0\1\13\1\0\2\13\4\0\6\13"+
    "\1\u0114\16\13\36\0\1\u0115\44\0\1\13\1\0\2\13"+
    "\4\0\4\13\1\u0116\20\13\23\0\1\13\1\0\2\13"+
    "\4\0\15\13\1\u0117\7\13\23\0\1\13\1\0\2\13"+
    "\4\0\16\13\1\u0118\6\13\23\0\1\13\1\0\2\13"+
    "\4\0\6\13\1\u0119\16\13\23\0\1\13\1\0\2\13"+
    "\4\0\1\u011a\24\13\23\0\1\13\1\0\2\13\4\0"+
    "\15\13\1\u011b\7\13\46\0\1\u011c\34\0\1\13\1\0"+
    "\2\13\4\0\10\13\1\u011d\14\13\23\0\1\13\1\0"+
    "\2\13\4\0\6\13\1\u011e\16\13\53\0\1\u011f\27\0"+
    "\1\13\1\0\2\13\4\0\15\13\1\u0120\7\13\45\0"+
    "\1\u0121\57\0\1\u0122\45\0\1\u0123\62\0\1\u0124\65\0"+
    "\1\u0125\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\10\1\1\1\11\1\1\1\11\3\1\2\11"+
    "\21\1\3\11\1\1\1\11\4\1\1\11\1\0\5\11"+
    "\1\1\1\11\1\1\2\0\6\11\1\0\36\1\14\11"+
    "\121\1\1\0\35\1\1\0\25\1\1\0\22\1\1\0"+
    "\14\1\1\0\11\1\1\0\6\1\1\0\2\1\1\0"+
    "\1\1\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[293];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3302) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.CONTENIDO, yytext());
            }
          case 88: break;
          case 2: 
            { yybegin(TAG); return symbol(sym.OPENTAG);
            }
          case 89: break;
          case 3: 
            { string.append( yytext() );
            }
          case 90: break;
          case 4: 
            { yybegin(F_CALL); 
                                         return symbol(sym.STRING, 
                                         string.toString());
            }
          case 91: break;
          case 5: 
            { string.append('\\');
            }
          case 92: break;
          case 6: 
            { return symbol(sym.ID, yytext());
            }
          case 93: break;
          case 7: 
            { return symbol(sym.NUM, yytext());
            }
          case 94: break;
          case 8: 
            { yybegin(YYINITIAL); return symbol(sym.CLOSETAG);
            }
          case 95: break;
          case 9: 
            { return symbol(sym.SLASH);
            }
          case 96: break;
          case 10: 
            { return symbol(sym.X);
            }
          case 97: break;
          case 11: 
            { return symbol(sym.Y);
            }
          case 98: break;
          case 12: 
            { return symbol(sym.DQ);
            }
          case 99: break;
          case 13: 
            { return symbol(sym.EQ);
            }
          case 100: break;
          case 14: 
            { yybegin(F_CALL); return symbol(sym.LCURL);
            }
          case 101: break;
          case 15: 
            { return symbol(sym.TIMES);
            }
          case 102: break;
          case 16: 
            { return symbol(sym.DOT);
            }
          case 103: break;
          case 17: 
            { return symbol(sym.LESSTHAN);
            }
          case 104: break;
          case 18: 
            { return symbol(sym.MORETHAN);
            }
          case 105: break;
          case 19: 
            { return symbol(sym.DIV);
            }
          case 106: break;
          case 20: 
            { return symbol(sym.MINUS);
            }
          case 107: break;
          case 21: 
            { string.setLength(0); yybegin(STRING);
            }
          case 108: break;
          case 22: 
            { yybegin(TAG); return symbol(sym.RCURL);
            }
          case 109: break;
          case 23: 
            { return symbol(sym.LPAR);
            }
          case 110: break;
          case 24: 
            { return symbol(sym.RPAR);
            }
          case 111: break;
          case 25: 
            { return symbol(sym.LBRACK);
            }
          case 112: break;
          case 26: 
            { return symbol(sym.RBRACK);
            }
          case 113: break;
          case 27: 
            { return symbol(sym.PLUS);
            }
          case 114: break;
          case 28: 
            { return symbol(sym.POW);
            }
          case 115: break;
          case 29: 
            { return symbol(sym.NOT);
            }
          case 116: break;
          case 30: 
            { return symbol(sym.COMMA);
            }
          case 117: break;
          case 31: 
            { return symbol(sym.Q);
            }
          case 118: break;
          case 32: 
            { string.append('\r');
            }
          case 119: break;
          case 33: 
            { string.append('\t');
            }
          case 120: break;
          case 34: 
            { string.append('\n');
            }
          case 121: break;
          case 35: 
            { string.append('\"');
            }
          case 122: break;
          case 36: 
            { return symbol(sym.ID);
            }
          case 123: break;
          case 37: 
            { return symbol(sym.TIMESEQ);
            }
          case 124: break;
          case 38: 
            { return symbol(sym.LESSTHANEQ);
            }
          case 125: break;
          case 39: 
            { return symbol(sym.MORETHANEQ);
            }
          case 126: break;
          case 40: 
            { return symbol(sym.DIVEQ);
            }
          case 127: break;
          case 41: 
            { return symbol(sym.MINUSMINUS);
            }
          case 128: break;
          case 42: 
            { return symbol(sym.MINUSEQ);
            }
          case 129: break;
          case 43: 
            { return symbol(sym.EQEQ);
            }
          case 130: break;
          case 44: 
            { return symbol(sym.PLUSEQ);
            }
          case 131: break;
          case 45: 
            { return symbol(sym.PLUSPLUS);
            }
          case 132: break;
          case 46: 
            { return symbol(sym.NOTEQ);
            }
          case 133: break;
          case 47: 
            { return symbol(sym.AND);
            }
          case 134: break;
          case 48: 
            { return symbol(sym.OR);
            }
          case 135: break;
          case 49: 
            { return symbol(sym.TAM);
            }
          case 136: break;
          case 50: 
            { return symbol(sym.PATH);
            }
          case 137: break;
          case 51: 
            { return symbol(sym.TIPO);
            }
          case 138: break;
          case 52: 
            { return symbol(sym.ALTO);
            }
          case 139: break;
          case 53: 
            { return symbol(sym.DATO);
            }
          case 140: break;
          case 54: 
            { return symbol(sym.TEXTO);
            }
          case 141: break;
          case 55: 
            { return symbol(sym.ANCHO);
            }
          case 142: break;
          case 56: 
            { return symbol(sym.VIDEO);
            }
          case 143: break;
          case 57: 
            { return symbol(sym.COLOR);
            }
          case 144: break;
          case 58: 
            { return symbol(sym.FALSO);
            }
          case 145: break;
          case 59: 
            { return symbol(sym.BORDE);
            }
          case 146: break;
          case 60: 
            { return symbol(sym.BOTON);
            }
          case 147: break;
          case 61: 
            { return symbol(sym.IMAGEN);
            }
          case 148: break;
          case 62: 
            { return symbol(sym.MINIMO);
            }
          case 149: break;
          case 63: 
            { return symbol(sym.MAXIMO);
            }
          case 150: break;
          case 64: 
            { return symbol(sym.MUSICA);
            }
          case 151: break;
          case 65: 
            { return symbol(sym.ACCION);
            }
          case 152: break;
          case 66: 
            { return symbol(sym.ENVIAR);
            }
          case 153: break;
          case 67: 
            { return symbol(sym.NOMBRE);
            }
          case 154: break;
          case 68: 
            { return symbol(sym.FUENTE);
            }
          case 155: break;
          case 69: 
            { return symbol(sym.VENTANA);
            }
          case 156: break;
          case 70: 
            { return symbol(sym.NEGRITA);
            }
          case 157: break;
          case 71: 
            { return symbol(sym.CONTROL);
            }
          case 158: break;
          case 72: 
            { return symbol(sym.CURSIVA);
            }
          case 159: break;
          case 73: 
            { return symbol(sym.DEFECTO);
            }
          case 160: break;
          case 74: 
            { return symbol(sym.IMPORTAR);
            }
          case 161: break;
          case 75: 
            { return symbol(sym.NUMERICO);
            }
          case 162: break;
          case 76: 
            { return symbol(sym.PRINCIPAL);
            }
          case 163: break;
          case 77: 
            { return symbol(sym.TEXTOAREA);
            }
          case 164: break;
          case 78: 
            { return symbol(sym.VERDADERO);
            }
          case 165: break;
          case 79: 
            { return symbol(sym.MULTIMEDIA);
            }
          case 166: break;
          case 80: 
            { return symbol(sym.REFERENCIA);
            }
          case 167: break;
          case 81: 
            { return symbol(sym.CONTENEDOR);
            }
          case 168: break;
          case 82: 
            { return symbol(sym.LISTADATOS);
            }
          case 169: break;
          case 83: 
            { return symbol(sym.SECUNDARIA);
            }
          case 170: break;
          case 84: 
            { return symbol(sym.ACCIONFINAL);
            }
          case 171: break;
          case 85: 
            { return symbol(sym.DESPLEGABLE);
            }
          case 172: break;
          case 86: 
            { return symbol(sym.ACCIONINICIAL);
            }
          case 173: break;
          case 87: 
            { return symbol(sym.AUTO-REPRODUCCION);
            }
          case 174: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
