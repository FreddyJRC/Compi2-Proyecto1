/* The following code was generated by JFlex 1.6.1 */

package grammar_gxml;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>lexer.flex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int TAG = 4;
  public static final int F_CALL = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\65"+
    "\1\13\1\4\1\5\1\0\1\66\1\15\1\57\1\60\1\63\1\20"+
    "\1\70\1\53\1\11\1\23\12\10\2\0\1\21\1\54\1\22\1\71"+
    "\1\0\1\34\1\12\1\40\1\41\1\36\1\45\1\52\1\51\1\24"+
    "\2\6\1\43\1\25\1\37\1\27\1\26\1\6\1\30\1\44\1\32"+
    "\1\47\1\35\1\6\1\42\1\50\1\6\1\61\1\14\1\62\1\64"+
    "\1\6\1\0\1\34\1\17\1\40\1\41\1\36\1\46\1\52\1\51"+
    "\1\24\2\6\1\43\1\25\1\16\1\27\1\26\1\6\1\31\1\44"+
    "\1\33\1\47\1\35\1\6\1\42\1\50\1\6\1\55\1\67\1\56"+
    "\1\0\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\70\6\2\24\115\6"+
    "\1\44\u0142\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\246\6\1\0\46\6\2\0\1\6\7\0"+
    "\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\6\7\5\0"+
    "\1\6\4\0\13\7\1\0\1\7\3\0\53\6\37\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7"+
    "\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7"+
    "\1\6\5\7\22\0\31\6\3\7\104\0\25\6\56\0\41\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\20\6\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0"+
    "\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6"+
    "\7\0\1\6\7\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6"+
    "\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6"+
    "\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6"+
    "\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7"+
    "\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6"+
    "\6\0\4\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6"+
    "\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\3\6\5\0\2\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7"+
    "\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6"+
    "\1\0\2\6\2\7\2\0\12\7\1\0\2\6\16\0\3\7\1\0"+
    "\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\1\6\10\0\1\7\7\0\3\6\2\7\2\0\12\7"+
    "\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6"+
    "\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\6\0\12\7\2\0\2\7\15\0\60\6\1\7\2\6"+
    "\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6"+
    "\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6"+
    "\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6"+
    "\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6"+
    "\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7"+
    "\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7"+
    "\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0"+
    "\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6"+
    "\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6"+
    "\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6\1\0"+
    "\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\126\6\2\0"+
    "\6\6\3\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0"+
    "\13\6\7\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0"+
    "\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6"+
    "\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\4\7"+
    "\1\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6"+
    "\12\0\37\6\1\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0"+
    "\5\6\13\0\54\6\4\0\32\6\6\0\12\7\46\0\27\6\5\7"+
    "\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0"+
    "\1\6\10\0\16\7\102\0\5\7\57\6\21\7\7\6\4\0\12\7"+
    "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\1\0\2\7"+
    "\6\0\300\6\66\7\6\0\4\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6"+
    "\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6\20\0\15\6"+
    "\3\0\37\6\21\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6"+
    "\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6"+
    "\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0"+
    "\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6"+
    "\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6"+
    "\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51d6\6"+
    "\52\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6"+
    "\24\0\57\6\1\7\4\0\12\7\1\0\37\6\2\7\120\6\2\7"+
    "\45\0\11\6\2\0\147\6\2\0\43\6\2\0\10\6\77\0\13\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\1\0\1\6\2\0\12\7\34\6\10\7\2\0\27\6"+
    "\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7"+
    "\6\0\5\6\1\7\12\6\12\7\5\6\1\0\51\6\16\7\11\0"+
    "\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6"+
    "\3\7\62\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7"+
    "\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\1\0\53\6\1\0\12\6\12\0\163\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\20\7\3\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0\2\6\1\0"+
    "\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0\1\7\202\0"+
    "\35\6\3\0\61\6\17\0\1\7\37\0\40\6\20\0\33\6\5\0"+
    "\46\6\5\7\5\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6"+
    "\52\0\236\6\2\0\12\7\126\0\50\6\10\0\64\6\234\0\u0137\6"+
    "\11\0\26\6\12\0\10\6\230\0\6\6\2\0\1\6\1\0\54\6"+
    "\1\0\2\6\3\0\1\6\2\0\27\6\12\0\27\6\11\0\37\6"+
    "\101\0\23\6\1\0\2\6\12\0\26\6\12\0\32\6\106\0\70\6"+
    "\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6"+
    "\1\0\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6"+
    "\3\0\35\6\43\0\10\6\1\0\34\6\2\7\31\0\66\6\12\0"+
    "\26\6\12\0\23\6\15\0\22\6\156\0\111\6\67\0\63\6\15\0"+
    "\63\6\u030d\0\3\7\65\6\17\7\37\0\12\7\17\0\4\7\55\6"+
    "\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6"+
    "\16\7\1\0\12\7\20\0\43\6\1\7\2\0\1\6\11\0\3\7"+
    "\60\6\16\7\4\6\5\0\3\7\3\0\12\7\1\6\1\0\1\6"+
    "\43\0\22\6\1\0\31\6\14\7\110\0\7\6\1\0\1\6\1\0"+
    "\4\6\1\0\17\6\1\0\12\6\7\0\57\6\14\7\5\0\12\7"+
    "\6\0\4\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\2\0\1\6\6\0\1\7\5\0\5\6\2\7\2\0"+
    "\7\7\3\0\5\7\u010b\0\60\6\24\7\2\6\1\0\1\6\10\0"+
    "\12\7\246\0\57\6\7\7\2\0\11\7\27\0\4\6\2\7\42\0"+
    "\60\6\21\7\3\0\1\6\13\0\12\7\46\0\53\6\15\7\10\0"+
    "\12\7\66\0\32\6\3\0\17\7\4\0\12\7\u0166\0\100\6\12\7"+
    "\25\0\1\6\u01c0\0\71\6\u0507\0\u039a\6\146\0\157\6\21\0\304\6"+
    "\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0\37\6\1\0\12\7"+
    "\146\0\36\6\2\0\5\7\13\0\60\6\7\7\11\0\4\6\14\0"+
    "\12\7\11\0\25\6\5\0\23\6\u0370\0\105\6\13\0\1\6\56\7"+
    "\20\0\4\7\15\6\u4060\0\2\6\u0bfe\0\153\6\5\0\15\6\3\0"+
    "\11\6\7\0\12\6\3\0\2\7\1\0\4\7\u14c1\0\5\7\3\0"+
    "\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6\1\0"+
    "\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6\1\0"+
    "\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6\2\0"+
    "\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6\1\0"+
    "\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7\u0200\0"+
    "\67\7\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7\1\0"+
    "\17\7\u0d50\0\305\6\13\0\7\7\u0529\0\4\6\1\0\33\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\2\0\u1682\6\u295e\0"+
    "\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\2\3\1\4\1\5\1\6\1\7"+
    "\2\2\1\10\1\3\1\11\1\3\1\12\1\13\12\3"+
    "\1\14\3\3\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\20\1\23\1\24\1\25\1\26\2\20\1\27\1\3"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\2\3\1\40\1\41\1\2\1\0\1\42\1\43\1\44"+
    "\1\45\4\0\1\46\5\0\1\47\30\0\1\20\1\50"+
    "\1\51\1\52\1\53\1\54\2\20\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\2\0\1\10\20\0\1\64"+
    "\23\0\3\20\16\0\1\65\1\0\1\66\3\0\1\67"+
    "\10\0\1\70\6\0\1\71\2\20\1\72\1\73\14\0"+
    "\1\74\1\75\2\0\1\76\5\0\1\77\5\0\1\100"+
    "\1\0\1\20\1\100\1\0\1\101\3\0\1\102\1\103"+
    "\1\104\1\0\1\105\3\0\1\106\3\0\1\107\7\0"+
    "\1\110\1\20\1\0\1\111\11\0\1\112\1\0\1\113"+
    "\1\0\1\114\1\0\1\115\2\0\1\20\1\0\1\116"+
    "\1\117\14\0\1\20\1\120\1\0\1\121\1\0\1\122"+
    "\3\0\1\123\4\0\1\123\1\124\1\125\3\0\1\126"+
    "\1\0\1\127\1\130\1\0\1\131\1\0\1\132\2\0"+
    "\1\133\4\0\1\134";

  private static int [] zzUnpackAction() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u01d0\0\u020a\0\u01d0\0\u0244\0\u027e\0\u01d0\0\u02b8"+
    "\0\u02f2\0\u032c\0\u0366\0\u01d0\0\u01d0\0\u03a0\0\u03da\0\u0414"+
    "\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u01d0"+
    "\0\u05e4\0\u061e\0\u0658\0\u01d0\0\u01d0\0\u01d0\0\u0692\0\u01d0"+
    "\0\u01d0\0\u06cc\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828"+
    "\0\u0862\0\u089c\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u08d6"+
    "\0\u01d0\0\u0910\0\u094a\0\u0984\0\u01d0\0\u01d0\0\u09be\0\u09f8"+
    "\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0"+
    "\0\u01d0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u01d0\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c"+
    "\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc"+
    "\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac"+
    "\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u11e6\0\u1220\0\u01d0"+
    "\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u01d0\0\u125a\0\u1294"+
    "\0\u0a32\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a"+
    "\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c\0\u1586\0\u15c0\0\u15fa"+
    "\0\u1634\0\u01d0\0\u166e\0\u16a8\0\u16e2\0\u171c\0\u1756\0\u1790"+
    "\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec\0\u1926\0\u1960"+
    "\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc\0\u1af6\0\u1b30"+
    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u1d00"+
    "\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u01d0\0\u1e96"+
    "\0\u01d0\0\u1ed0\0\u1f0a\0\u1f44\0\u01d0\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u01d0\0\u214e\0\u2188"+
    "\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u0692\0\u22aa\0\u22e4\0\u01d0"+
    "\0\u01d0\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u01d0\0\u2610"+
    "\0\u264a\0\u01d0\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u01d0"+
    "\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u01d0\0\u28c8\0\u2902"+
    "\0\u0692\0\u293c\0\u01d0\0\u2976\0\u29b0\0\u29ea\0\u01d0\0\u01d0"+
    "\0\u01d0\0\u2a24\0\u01d0\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u01d0\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc"+
    "\0\u2d16\0\u2d50\0\u01d0\0\u2d8a\0\u2dc4\0\u01d0\0\u2dfe\0\u2e38"+
    "\0\u2e72\0\u2eac\0\u2ee6\0\u2f20\0\u2f5a\0\u2f94\0\u2fce\0\u01d0"+
    "\0\u3008\0\u01d0\0\u3042\0\u01d0\0\u307c\0\u01d0\0\u30b6\0\u30f0"+
    "\0\u312a\0\u3164\0\u01d0\0\u01d0\0\u319e\0\u31d8\0\u3212\0\u324c"+
    "\0\u3286\0\u32c0\0\u32fa\0\u3334\0\u336e\0\u33a8\0\u33e2\0\u341c"+
    "\0\u3456\0\u01d0\0\u3490\0\u01d0\0\u34ca\0\u01d0\0\u3504\0\u353e"+
    "\0\u3578\0\u01d0\0\u35b2\0\u35ec\0\u3626\0\u3660\0\u0692\0\u01d0"+
    "\0\u01d0\0\u369a\0\u36d4\0\u370e\0\u01d0\0\u3748\0\u01d0\0\u01d0"+
    "\0\u3782\0\u01d0\0\u37bc\0\u01d0\0\u37f6\0\u3830\0\u01d0\0\u386a"+
    "\0\u38a4\0\u38de\0\u3918\0\u01d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\13\5\1\11\1\12\35\5"+
    "\2\11\11\5\1\13\2\11\10\13\1\14\1\15\55\13"+
    "\1\11\1\16\2\17\4\11\1\20\1\11\1\21\1\22"+
    "\2\11\1\23\1\21\2\11\1\24\1\25\1\26\1\27"+
    "\1\30\1\11\2\31\2\32\1\33\1\34\1\35\1\23"+
    "\1\36\1\37\1\40\1\41\1\42\2\43\1\11\1\44"+
    "\3\11\1\45\1\46\15\11\1\16\2\17\1\11\2\47"+
    "\1\11\1\20\1\50\1\47\1\51\2\11\1\52\1\47"+
    "\1\53\1\54\1\55\1\56\11\47\1\57\1\47\1\52"+
    "\5\47\2\60\4\47\1\61\1\62\1\11\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\5\2\0\1\5\1\0\13\5\2\0"+
    "\35\5\2\0\11\5\1\0\3\6\66\0\1\5\2\6"+
    "\1\7\1\0\13\5\2\0\35\5\2\0\11\5\4\0"+
    "\1\77\1\100\156\0\1\13\2\0\10\13\2\0\55\13"+
    "\13\0\1\101\2\0\1\102\11\0\2\103\2\104\3\0"+
    "\1\102\34\0\1\17\77\0\1\20\1\105\107\0\1\106"+
    "\42\0\1\107\2\0\1\107\1\110\6\107\1\111\1\112"+
    "\55\107\27\0\1\113\6\0\1\114\10\0\1\115\47\0"+
    "\1\116\13\0\1\117\54\0\1\120\7\0\1\121\12\0"+
    "\1\122\52\0\2\123\2\0\1\124\73\0\1\125\57\0"+
    "\1\126\7\0\1\127\1\0\1\130\51\0\1\131\20\0"+
    "\1\131\1\132\2\0\1\133\3\0\1\134\46\0\1\135"+
    "\11\0\1\136\51\0\1\137\20\0\1\137\61\0\1\140"+
    "\17\0\1\141\56\0\1\142\1\0\1\143\57\0\1\144"+
    "\103\0\1\145\67\0\1\146\12\0\1\147\27\0\4\47"+
    "\1\0\1\47\3\0\2\47\4\0\27\47\24\0\4\47"+
    "\1\0\1\47\3\0\2\47\4\0\23\47\1\150\3\47"+
    "\37\0\1\151\33\0\1\152\71\0\1\153\71\0\1\154"+
    "\71\0\1\155\22\0\4\47\1\0\1\47\3\0\2\47"+
    "\4\0\12\47\1\156\14\47\24\0\4\47\1\0\1\47"+
    "\3\0\2\47\4\0\10\47\1\157\16\47\72\0\1\160"+
    "\1\161\71\0\1\162\71\0\1\163\71\0\1\164\103\0"+
    "\1\165\72\0\1\166\2\0\1\77\1\16\1\17\67\77"+
    "\5\167\1\170\64\167\10\0\1\171\111\0\2\172\2\173"+
    "\36\0\1\107\2\0\10\107\1\111\1\112\56\107\2\0"+
    "\5\107\1\174\1\107\1\174\1\111\1\112\2\107\1\174"+
    "\14\107\1\174\1\107\1\174\1\107\2\174\3\107\2\174"+
    "\23\107\13\0\5\107\11\0\1\107\1\0\1\107\12\0"+
    "\1\107\50\0\1\175\116\0\1\176\44\0\1\177\72\0"+
    "\1\200\5\0\1\201\53\0\1\202\20\0\1\202\74\0"+
    "\1\203\72\0\1\204\1\205\51\0\1\206\77\0\2\207"+
    "\103\0\2\210\51\0\1\211\70\0\1\212\106\0\1\213"+
    "\67\0\1\214\71\0\1\215\63\0\2\216\70\0\2\217"+
    "\77\0\1\220\46\0\1\221\11\0\2\222\5\0\1\221"+
    "\67\0\1\223\52\0\1\224\20\0\1\224\3\0\1\225"+
    "\56\0\2\226\72\0\2\227\102\0\1\230\2\231\67\0"+
    "\1\232\65\0\1\233\74\0\1\234\64\0\1\235\40\0"+
    "\4\47\1\0\1\47\3\0\2\47\4\0\17\47\1\236"+
    "\7\47\24\0\4\47\1\0\1\47\3\0\2\47\4\0"+
    "\4\47\2\237\21\47\24\0\4\47\1\0\1\47\3\0"+
    "\2\47\4\0\17\47\1\240\7\47\17\0\5\167\1\241"+
    "\64\167\4\0\1\17\1\170\125\0\1\242\57\0\1\243"+
    "\42\0\1\107\2\0\5\107\1\244\1\107\1\244\1\111"+
    "\1\112\2\107\1\244\14\107\1\244\1\107\1\244\1\107"+
    "\2\244\3\107\2\244\23\107\12\0\1\245\4\0\1\245"+
    "\102\0\2\246\76\0\1\247\62\0\1\250\114\0\1\251"+
    "\43\0\1\252\71\0\1\253\77\0\2\254\62\0\1\255"+
    "\63\0\1\256\20\0\1\256\103\0\1\257\56\0\1\260"+
    "\62\0\1\261\74\0\2\262\107\0\1\263\44\0\1\264"+
    "\74\0\1\265\71\0\1\266\100\0\1\267\65\0\2\270"+
    "\77\0\1\271\54\0\1\272\77\0\2\273\65\0\1\274"+
    "\106\0\1\275\54\0\1\276\70\0\1\277\101\0\1\300"+
    "\65\0\2\301\105\0\1\302\66\0\1\303\43\0\1\304"+
    "\20\0\1\304\37\0\4\47\1\0\1\47\3\0\2\47"+
    "\4\0\3\47\1\305\23\47\24\0\4\47\1\0\1\47"+
    "\3\0\2\47\4\0\15\47\1\306\11\47\24\0\4\47"+
    "\1\0\1\47\3\0\2\47\4\0\20\47\1\307\6\47"+
    "\17\0\4\167\1\17\1\241\64\167\36\0\1\310\51\0"+
    "\1\311\20\0\1\311\32\0\1\107\2\0\5\107\1\312"+
    "\1\107\1\312\1\111\1\112\2\107\1\312\14\107\1\312"+
    "\1\107\1\312\1\107\2\312\3\107\2\312\23\107\30\0"+
    "\2\313\64\0\1\314\75\0\2\315\70\0\2\316\76\0"+
    "\1\317\60\0\1\320\71\0\1\321\70\0\1\322\105\0"+
    "\1\323\71\0\1\324\61\0\2\325\67\0\1\326\71\0"+
    "\1\327\71\0\1\330\115\0\1\331\45\0\1\332\76\0"+
    "\1\333\71\0\1\334\71\0\1\335\65\0\2\336\4\0"+
    "\1\337\63\0\2\340\64\0\1\341\110\0\1\342\66\0"+
    "\1\343\65\0\1\344\53\0\1\345\20\0\1\345\61\0"+
    "\1\346\74\0\2\347\43\0\4\47\1\0\1\47\3\0"+
    "\2\47\4\0\10\47\1\350\16\47\24\0\4\47\1\0"+
    "\1\47\3\0\2\47\4\0\3\47\1\351\23\47\17\0"+
    "\1\107\2\0\5\107\1\352\1\107\1\352\1\111\1\112"+
    "\2\107\1\352\14\107\1\352\1\107\1\352\1\107\2\352"+
    "\3\107\2\352\23\107\36\0\1\353\65\0\2\354\62\0"+
    "\1\355\77\0\2\356\54\0\1\357\20\0\1\357\61\0"+
    "\1\360\71\0\1\361\67\0\1\362\100\0\1\363\61\0"+
    "\1\364\103\0\1\365\67\0\1\366\53\0\1\367\20\0"+
    "\1\367\62\0\2\370\56\0\1\371\20\0\1\371\73\0"+
    "\1\372\60\0\2\373\67\0\1\374\60\0\1\375\20\0"+
    "\1\375\67\0\1\376\72\0\1\377\65\0\2\u0100\77\0"+
    "\1\u0101\71\0\1\u0102\66\0\1\u0103\40\0\4\47\1\0"+
    "\1\47\3\0\2\47\4\0\15\47\1\u0104\11\47\17\0"+
    "\1\107\2\0\5\107\1\u0105\1\107\1\u0105\1\111\1\112"+
    "\2\107\1\u0105\14\107\1\u0105\1\107\1\u0105\1\107\2\u0105"+
    "\3\107\2\u0105\23\107\34\0\1\u0106\75\0\1\u0107\65\0"+
    "\1\u0108\73\0\1\u0109\61\0\1\u010a\61\0\1\u010b\20\0"+
    "\1\u010b\62\0\2\u010c\64\0\1\u010d\20\0\2\u010e\61\0"+
    "\1\u010f\67\0\1\u0110\73\0\1\u0111\76\0\1\u0112\64\0"+
    "\1\u0113\67\0\1\u0114\107\0\1\u0115\46\0\1\u0116\76\0"+
    "\1\u0117\71\0\1\u0118\42\0\4\47\1\0\1\47\3\0"+
    "\2\47\4\0\12\47\1\u0119\14\47\17\0\1\107\2\0"+
    "\5\107\1\u011a\1\107\1\u011a\1\111\1\112\2\107\1\u011a"+
    "\14\107\1\u011a\1\107\1\u011a\1\107\2\u011a\3\107\2\u011a"+
    "\23\107\27\0\1\u011b\72\0\2\u011c\101\0\1\u011d\64\0"+
    "\1\u011e\75\0\1\u011f\67\0\1\u0120\51\0\1\u0121\20\0"+
    "\1\u0121\56\0\1\u0122\73\0\1\u0123\73\0\2\u0124\101\0"+
    "\1\u0125\64\0\1\u0126\67\0\2\u0127\66\0\2\u0128\45\0"+
    "\4\47\1\0\1\47\3\0\2\47\4\0\4\47\2\u0129"+
    "\21\47\17\0\1\107\2\0\10\107\1\u012a\1\112\55\107"+
    "\24\0\1\u012b\110\0\1\u012c\52\0\1\u012d\101\0\1\u012e"+
    "\61\0\1\u012f\63\0\1\u0130\20\0\1\u0130\62\0\2\u0131"+
    "\67\0\1\u0132\71\0\1\u0133\54\0\1\u0134\4\0\1\u0134"+
    "\101\0\1\u0135\66\0\1\u0136\52\0\4\47\1\0\1\47"+
    "\3\0\2\47\4\0\3\47\1\u0137\23\47\53\0\1\u0138"+
    "\71\0\1\u0139\75\0\1\u013a\65\0\1\u013b\64\0\1\u013c"+
    "\72\0\2\u013d\103\0\1\u013e\72\0\1\u013f\61\0\1\u0140"+
    "\61\0\1\u0141\110\0\1\u0142\67\0\1\u0143\66\0\1\u0144"+
    "\67\0\1\u0145\104\0\1\u0146\65\0\1\u0147\66\0\1\u0148"+
    "\71\0\1\u0149\55\0\1\u014a\74\0\1\u014b\60\0\1\u014c"+
    "\20\0\1\u014c\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14674];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\4\1\2\11\1\1\1\11\2\1\1\11\4\1"+
    "\2\11\12\1\1\11\3\1\3\11\1\1\2\11\11\1"+
    "\5\11\1\1\1\11\3\1\2\11\1\1\1\0\4\11"+
    "\4\0\1\11\5\0\1\11\30\0\1\1\5\11\2\1"+
    "\7\11\2\0\1\1\20\0\1\11\23\0\3\1\16\0"+
    "\1\11\1\0\1\11\3\0\1\11\10\0\1\11\6\0"+
    "\3\1\2\11\14\0\1\1\1\11\2\0\1\11\5\0"+
    "\1\11\5\0\1\11\1\0\2\1\1\0\1\11\3\0"+
    "\3\11\1\0\1\11\3\0\1\1\3\0\1\11\7\0"+
    "\1\11\1\1\1\0\1\11\11\0\1\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\1\1\0\2\11"+
    "\14\0\1\1\1\11\1\0\1\11\1\0\1\11\3\0"+
    "\1\11\4\0\1\1\2\11\3\0\1\11\1\0\2\11"+
    "\1\0\1\11\1\0\1\11\2\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[332];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3302) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.CONTENIDO, yytext());
            }
          case 93: break;
          case 2: 
            { /* ignore */
            }
          case 94: break;
          case 3: 
            { throw new Error("Illegal character <"+
                                                        yytext()+">");
            }
          case 95: break;
          case 4: 
            { yybegin(TAG); return symbol(sym.OPENTAG);
            }
          case 96: break;
          case 5: 
            { string.append( yytext() );
            }
          case 97: break;
          case 6: 
            { yybegin(F_CALL); 
                                         return symbol(sym.STRING, 
                                         string.toString());
            }
          case 98: break;
          case 7: 
            { string.append('\\');
            }
          case 99: break;
          case 8: 
            { return symbol(sym.NUM, yytext());
            }
          case 100: break;
          case 9: 
            { return symbol(sym.DQ);
            }
          case 101: break;
          case 10: 
            { yybegin(YYINITIAL); return symbol(sym.CLOSETAG);
            }
          case 102: break;
          case 11: 
            { return symbol(sym.SLASH);
            }
          case 103: break;
          case 12: 
            { return symbol(sym.X);
            }
          case 104: break;
          case 13: 
            { return symbol(sym.Y);
            }
          case 105: break;
          case 14: 
            { return symbol(sym.EQ);
            }
          case 106: break;
          case 15: 
            { yybegin(F_CALL); return symbol(sym.LCURL);
            }
          case 107: break;
          case 16: 
            { return symbol(sym.ID_L, yytext());
            }
          case 108: break;
          case 17: 
            { return symbol(sym.DOT);
            }
          case 109: break;
          case 18: 
            { string.setLength(0); yybegin(STRING);
            }
          case 110: break;
          case 19: 
            { return symbol(sym.PLUS);
            }
          case 111: break;
          case 20: 
            { return symbol(sym.LESSTHAN);
            }
          case 112: break;
          case 21: 
            { return symbol(sym.MORETHAN);
            }
          case 113: break;
          case 22: 
            { return symbol(sym.DIV);
            }
          case 114: break;
          case 23: 
            { return symbol(sym.MINUS);
            }
          case 115: break;
          case 24: 
            { yybegin(TAG); return symbol(sym.RCURL);
            }
          case 116: break;
          case 25: 
            { return symbol(sym.LPAR);
            }
          case 117: break;
          case 26: 
            { return symbol(sym.RPAR);
            }
          case 118: break;
          case 27: 
            { return symbol(sym.LBRACK);
            }
          case 119: break;
          case 28: 
            { return symbol(sym.RBRACK);
            }
          case 120: break;
          case 29: 
            { return symbol(sym.TIMES);
            }
          case 121: break;
          case 30: 
            { return symbol(sym.POW);
            }
          case 122: break;
          case 31: 
            { return symbol(sym.NOT);
            }
          case 123: break;
          case 32: 
            { return symbol(sym.COMMA);
            }
          case 124: break;
          case 33: 
            { return symbol(sym.Q);
            }
          case 125: break;
          case 34: 
            { string.append('\"');
            }
          case 126: break;
          case 35: 
            { string.append('\n');
            }
          case 127: break;
          case 36: 
            { string.append('\r');
            }
          case 128: break;
          case 37: 
            { string.append('\t');
            }
          case 129: break;
          case 38: 
            { return symbol(sym.STRINGLIT, yytext());
            }
          case 130: break;
          case 39: 
            { return symbol(sym.ID);
            }
          case 131: break;
          case 40: 
            { return symbol(sym.PLUSPLUS);
            }
          case 132: break;
          case 41: 
            { return symbol(sym.PLUSEQ);
            }
          case 133: break;
          case 42: 
            { return symbol(sym.LESSTHANEQ);
            }
          case 134: break;
          case 43: 
            { return symbol(sym.MORETHANEQ);
            }
          case 135: break;
          case 44: 
            { return symbol(sym.DIVEQ);
            }
          case 136: break;
          case 45: 
            { return symbol(sym.MINUSMINUS);
            }
          case 137: break;
          case 46: 
            { return symbol(sym.MINUSEQ);
            }
          case 138: break;
          case 47: 
            { return symbol(sym.EQEQ);
            }
          case 139: break;
          case 48: 
            { return symbol(sym.TIMESEQ);
            }
          case 140: break;
          case 49: 
            { return symbol(sym.NOTEQ);
            }
          case 141: break;
          case 50: 
            { return symbol(sym.AND);
            }
          case 142: break;
          case 51: 
            { return symbol(sym.OR);
            }
          case 143: break;
          case 52: 
            { return symbol(sym.TAM);
            }
          case 144: break;
          case 53: 
            { return symbol(sym.PATH);
            }
          case 145: break;
          case 54: 
            { return symbol(sym.TIPO);
            }
          case 146: break;
          case 55: 
            { return symbol(sym.ALTO);
            }
          case 147: break;
          case 56: 
            { return symbol(sym.DATO);
            }
          case 148: break;
          case 57: 
            { return symbol(sym.NULO);
            }
          case 149: break;
          case 58: 
            { return symbol(sym.BORDE);
            }
          case 150: break;
          case 59: 
            { return symbol(sym.BOTON);
            }
          case 151: break;
          case 60: 
            { return symbol(sym.TEXTO);
            }
          case 152: break;
          case 61: 
            { return symbol(sym.ANCHO);
            }
          case 153: break;
          case 62: 
            { return symbol(sym.VIDEO);
            }
          case 154: break;
          case 63: 
            { return symbol(sym.COLOR);
            }
          case 155: break;
          case 64: 
            { return symbol(sym.FALSO);
            }
          case 156: break;
          case 65: 
            { return symbol(sym.NOMBRE);
            }
          case 157: break;
          case 66: 
            { return symbol(sym.IMAGEN);
            }
          case 158: break;
          case 67: 
            { return symbol(sym.MINIMO);
            }
          case 159: break;
          case 68: 
            { return symbol(sym.MAXIMO);
            }
          case 160: break;
          case 69: 
            { return symbol(sym.MUSICA);
            }
          case 161: break;
          case 70: 
            { return symbol(sym.ACCION);
            }
          case 162: break;
          case 71: 
            { return symbol(sym.ENVIAR);
            }
          case 163: break;
          case 72: 
            { return symbol(sym.FUENTE);
            }
          case 164: break;
          case 73: 
            { return symbol(sym.NEGRITA);
            }
          case 165: break;
          case 74: 
            { return symbol(sym.VENTANA);
            }
          case 166: break;
          case 75: 
            { return symbol(sym.CONTROL);
            }
          case 167: break;
          case 76: 
            { return symbol(sym.CURSIVA);
            }
          case 168: break;
          case 77: 
            { return symbol(sym.DEFECTO);
            }
          case 169: break;
          case 78: 
            { return symbol(sym.NUMERICO);
            }
          case 170: break;
          case 79: 
            { return symbol(sym.IMPORTAR);
            }
          case 171: break;
          case 80: 
            { return symbol(sym.HEX, yytext());
            }
          case 172: break;
          case 81: 
            { return symbol(sym.PRINCIPAL);
            }
          case 173: break;
          case 82: 
            { return symbol(sym.TEXTOAREA);
            }
          case 174: break;
          case 83: 
            { return symbol(sym.VERDADERO);
            }
          case 175: break;
          case 84: 
            { return symbol(sym.MULTIMEDIA);
            }
          case 176: break;
          case 85: 
            { return symbol(sym.REFERENCIA);
            }
          case 177: break;
          case 86: 
            { return symbol(sym.CONTENEDOR);
            }
          case 178: break;
          case 87: 
            { return symbol(sym.LISTADATOS);
            }
          case 179: break;
          case 88: 
            { return symbol(sym.SECUNDARIA);
            }
          case 180: break;
          case 89: 
            { return symbol(sym.ACCIONFINAL);
            }
          case 181: break;
          case 90: 
            { return symbol(sym.DESPLEGABLE);
            }
          case 182: break;
          case 91: 
            { return symbol(sym.ACCIONINICIAL);
            }
          case 183: break;
          case 92: 
            { return symbol(sym.AUTO_REPRODUCCION);
            }
          case 184: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
